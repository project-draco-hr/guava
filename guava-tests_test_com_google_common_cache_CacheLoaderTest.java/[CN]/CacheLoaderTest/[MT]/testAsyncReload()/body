{
  final AtomicInteger loadCount=new AtomicInteger();
  final AtomicInteger reloadCount=new AtomicInteger();
  final AtomicInteger loadAllCount=new AtomicInteger();
  CacheLoader<Object,Object> baseLoader=new CacheLoader<Object,Object>(){
    @Override public Object load(    Object key){
      loadCount.incrementAndGet();
      return new Object();
    }
    @Override public ListenableFuture<Object> reload(    Object key,    Object oldValue){
      reloadCount.incrementAndGet();
      return Futures.immediateFuture(new Object());
    }
    @Override public Map<Object,Object> loadAll(    Iterable<? extends Object> keys){
      loadAllCount.incrementAndGet();
      return ImmutableMap.of();
    }
  }
;
  assertEquals(0,loadCount.get());
  assertEquals(0,reloadCount.get());
  assertEquals(0,loadAllCount.get());
  baseLoader.load(new Object());
  baseLoader.reload(new Object(),new Object());
  baseLoader.loadAll(ImmutableList.of(new Object()));
  assertEquals(1,loadCount.get());
  assertEquals(1,reloadCount.get());
  assertEquals(1,loadAllCount.get());
  QueuingExecutor executor=new QueuingExecutor();
  CacheLoader<Object,Object> asyncReloader=CacheLoader.asyncReload(baseLoader,executor);
  asyncReloader.load(new Object());
  asyncReloader.reload(new Object(),new Object());
  asyncReloader.loadAll(ImmutableList.of(new Object()));
  assertEquals(2,loadCount.get());
  assertEquals(1,reloadCount.get());
  assertEquals(2,loadAllCount.get());
  executor.runNext();
  assertEquals(2,loadCount.get());
  assertEquals(2,reloadCount.get());
  assertEquals(2,loadAllCount.get());
}
