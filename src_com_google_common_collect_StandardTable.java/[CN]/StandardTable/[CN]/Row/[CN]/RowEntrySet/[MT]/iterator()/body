{
  final Map<C,V> map=backingMap.get(rowKey);
  if (map == null) {
    return Iterators.emptyModifiableIterator();
  }
  final Iterator<Entry<C,V>> iterator=map.entrySet().iterator();
  return new Iterator<Entry<C,V>>(){
    public boolean hasNext(){
      return iterator.hasNext();
    }
    public Entry<C,V> next(){
      final Entry<C,V> entry=iterator.next();
      return new ForwardingMapEntry<C,V>(){
        @Override protected Entry<C,V> delegate(){
          return entry;
        }
        @Override public V setValue(        V value){
          return super.setValue(checkNotNull(value));
        }
      }
;
    }
    public void remove(){
      iterator.remove();
      if (map.isEmpty()) {
        backingMap.remove(rowKey);
      }
    }
  }
;
}
