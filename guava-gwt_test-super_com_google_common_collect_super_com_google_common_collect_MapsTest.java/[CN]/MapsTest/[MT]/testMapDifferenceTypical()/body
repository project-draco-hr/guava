{
  Map<Integer,String> left=ImmutableMap.of(1,"a",2,"b",3,"c",4,"d",5,"e");
  Map<Integer,String> right=ImmutableMap.of(1,"a",3,"f",5,"g",6,"z");
  MapDifference<Integer,String> diff1=Maps.difference(left,right);
  assertFalse(diff1.areEqual());
  assertEquals(ImmutableMap.of(2,"b",4,"d"),diff1.entriesOnlyOnLeft());
  assertEquals(ImmutableMap.of(6,"z"),diff1.entriesOnlyOnRight());
  assertEquals(ImmutableMap.of(1,"a"),diff1.entriesInCommon());
  assertEquals(ImmutableMap.of(3,ValueDifferenceImpl.create("c","f"),5,ValueDifferenceImpl.create("e","g")),diff1.entriesDiffering());
  assertEquals("not equal: only on left={2=b, 4=d}: only on right={6=z}: " + "value differences={3=(c, f), 5=(e, g)}",diff1.toString());
  MapDifference<Integer,String> diff2=Maps.difference(right,left);
  assertFalse(diff2.areEqual());
  assertEquals(ImmutableMap.of(6,"z"),diff2.entriesOnlyOnLeft());
  assertEquals(ImmutableMap.of(2,"b",4,"d"),diff2.entriesOnlyOnRight());
  assertEquals(ImmutableMap.of(1,"a"),diff2.entriesInCommon());
  assertEquals(ImmutableMap.of(3,ValueDifferenceImpl.create("f","c"),5,ValueDifferenceImpl.create("g","e")),diff2.entriesDiffering());
  assertEquals("not equal: only on left={6=z}: only on right={2=b, 4=d}: " + "value differences={3=(f, c), 5=(g, e)}",diff2.toString());
}
