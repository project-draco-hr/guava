{
  Class<?> rawType=type.getRawType();
  List<Object> samples=sampleInstances.get(rawType);
  Object sample=pickInstance(samples,null);
  if (sample != null) {
    return sample;
  }
  if (rawType.isEnum()) {
    return pickInstance(rawType.getEnumConstants(),null);
  }
  if (type.isArray()) {
    TypeToken<?> componentType=type.getComponentType();
    Object array=Array.newInstance(componentType.getRawType(),1);
    Array.set(array,0,generate(componentType));
    return array;
  }
  Method emptyGenerate=EMPTY_GENEREATORS.get(rawType);
  if (emptyGenerate != null) {
    if (emptyInstanceGenerated.containsKey(type.getType())) {
      if (emptyInstanceGenerated.get(type.getType()).intValue() == freshness.get()) {
        return invokeGeneratorMethod(emptyGenerate);
      }
 else {
      }
    }
 else {
      Object emptyInstance=invokeGeneratorMethod(emptyGenerate);
      emptyInstanceGenerated.put(type.getType(),freshness.get());
      return emptyInstance;
    }
  }
  Method generate=GENERATORS.get(rawType);
  if (generate != null) {
    ImmutableList<Parameter> params=Invokable.from(generate).getParameters();
    List<Object> args=Lists.newArrayListWithCapacity(params.size());
    TypeVariable<?>[] typeVars=rawType.getTypeParameters();
    for (int i=0; i < params.size(); i++) {
      TypeToken<?> paramType=type.resolveType(typeVars[i]);
      Object argValue=generate(paramType);
      if (argValue == null) {
        return null;
      }
      args.add(argValue);
    }
    return invokeGeneratorMethod(generate,args.toArray());
  }
  return defaultGenerate(rawType);
}
