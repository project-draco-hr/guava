{
  new Thread(){
    @Override public void run(){
      inputFuture.set(SLOW_FUNC_VALID_INPUT_DATA);
    }
  }
.start();
  funcIsWaitingLatch.await();
  assertTrue(resultFuture.cancel(true));
  assertTrue(resultFuture.isCancelled());
  assertFalse(inputFuture.isCancelled());
  assertFalse(outputFuture.isCancelled());
  try {
    resultFuture.get();
    fail("Result future is cancelled and should have thrown a" + " CancellationException");
  }
 catch (  CancellationException expected) {
  }
  funcCompletionLatch.countDown();
  try {
    outputFuture.get();
    fail("The function output future is cancelled and should have thrown a" + " CancellationException");
  }
 catch (  CancellationException expected) {
  }
}
