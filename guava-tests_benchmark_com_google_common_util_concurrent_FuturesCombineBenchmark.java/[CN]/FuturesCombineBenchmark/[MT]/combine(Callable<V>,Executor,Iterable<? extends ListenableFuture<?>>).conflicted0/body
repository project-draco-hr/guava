{
  ListenableFuture<?> trigger=Futures.successfulAsList(futures);
  checkNotNull(combiner);
  checkNotNull(trigger);
  return Futures.transform(trigger,new AsyncFunction<Object,V>(){
    @Override public ListenableFuture<V> apply(    Object arg) throws Exception {
      try {
        return Futures.immediateFuture(combiner.call());
      }
 catch (      CancellationException e) {
        return Futures.immediateCancelledFuture();
      }
catch (      ExecutionException e) {
        return Futures.immediateFailedFuture(e.getCause());
      }
    }
  }
,executor);
}
