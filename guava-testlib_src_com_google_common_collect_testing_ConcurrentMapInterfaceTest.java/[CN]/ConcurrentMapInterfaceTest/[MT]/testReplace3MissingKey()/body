{
  final ConcurrentMap<K,V> map;
  final K keyToReplace;
  final V oldValue;
  final V newValue;
  try {
    map=makeEitherMap();
    keyToReplace=getKeyNotInPopulatedMap();
    oldValue=getValueNotInPopulatedMap();
    newValue=getSecondValueNotInPopulatedMap();
  }
 catch (  UnsupportedOperationException e) {
    return;
  }
  int initialSize=map.size();
  if (supportsPut) {
    assertFalse(map.replace(keyToReplace,oldValue,newValue));
  }
 else {
    try {
      map.replace(keyToReplace,oldValue,newValue);
      fail("Expected UnsupportedOperationException.");
    }
 catch (    UnsupportedOperationException e) {
    }
  }
  assertFalse(map.containsKey(keyToReplace));
  assertFalse(map.containsValue(newValue));
  assertFalse(map.containsValue(oldValue));
  assertEquals(initialSize,map.size());
  assertInvariants(map);
}
