{
  for (  Segment<?,?> segment : cchm.segments) {
    if (cchm.usesWriteQueue()) {
      Set<ReferenceEntry<?,?>> entries=Sets.newIdentityHashSet();
      ReferenceEntry<?,?> prev=null;
      for (      ReferenceEntry<?,?> current : segment.writeQueue) {
        assertTrue(entries.add(current));
        if (prev != null) {
          assertSame(prev,current.getPreviousInWriteQueue());
          assertSame(prev.getNextInWriteQueue(),current);
          assertThat(prev.getWriteTime()).isAtMost(current.getWriteTime());
        }
        Object key=current.getKey();
        if (key != null) {
          assertSame(current,segment.getEntry(key,current.getHash()));
        }
        prev=current;
      }
      assertEquals(segment.count,entries.size());
    }
 else {
      assertTrue(segment.writeQueue.isEmpty());
    }
    if (cchm.usesAccessQueue()) {
      Set<ReferenceEntry<?,?>> entries=Sets.newIdentityHashSet();
      ReferenceEntry<?,?> prev=null;
      for (      ReferenceEntry<?,?> current : segment.accessQueue) {
        assertTrue(entries.add(current));
        if (prev != null) {
          assertSame(prev,current.getPreviousInAccessQueue());
          assertSame(prev.getNextInAccessQueue(),current);
          assertTrue(prev.getAccessTime() <= current.getAccessTime() || prev.getAccessTime() - current.getAccessTime() < 1000);
        }
        Object key=current.getKey();
        if (key != null) {
          assertSame(current,segment.getEntry(key,current.getHash()));
        }
        prev=current;
      }
      assertEquals(segment.count,entries.size());
    }
 else {
      assertTrue(segment.accessQueue.isEmpty());
    }
  }
}
