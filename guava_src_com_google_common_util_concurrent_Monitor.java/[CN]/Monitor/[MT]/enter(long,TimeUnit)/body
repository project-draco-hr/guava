{
  long timeoutNanos=unit.toNanos(time);
  final ReentrantLock lock=this.lock;
  if (!fair && lock.tryLock()) {
    return true;
  }
  long startNanos=System.nanoTime();
  long remainingNanos=timeoutNanos;
  boolean interruptIgnored=false;
  try {
    while (true) {
      try {
        return lock.tryLock(remainingNanos,TimeUnit.NANOSECONDS);
      }
 catch (      InterruptedException ignored) {
        interruptIgnored=true;
        remainingNanos=(timeoutNanos - (System.nanoTime() - startNanos));
      }
    }
  }
  finally {
    if (interruptIgnored) {
      Thread.currentThread().interrupt();
    }
  }
}
