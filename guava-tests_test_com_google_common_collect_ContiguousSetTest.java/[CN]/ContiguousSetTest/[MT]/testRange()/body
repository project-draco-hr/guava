{
  assertEquals(Ranges.closed(1,3),Ranges.closed(1,3).asSet(integers()).range());
  assertEquals(Ranges.closed(1,3),Ranges.closedOpen(1,4).asSet(integers()).range());
  assertEquals(Ranges.closed(1,3),Ranges.open(0,4).asSet(integers()).range());
  assertEquals(Ranges.closed(1,3),Ranges.openClosed(0,3).asSet(integers()).range());
  assertEquals(Ranges.openClosed(0,3),Ranges.closed(1,3).asSet(integers()).range(OPEN,CLOSED));
  assertEquals(Ranges.openClosed(0,3),Ranges.closedOpen(1,4).asSet(integers()).range(OPEN,CLOSED));
  assertEquals(Ranges.openClosed(0,3),Ranges.open(0,4).asSet(integers()).range(OPEN,CLOSED));
  assertEquals(Ranges.openClosed(0,3),Ranges.openClosed(0,3).asSet(integers()).range(OPEN,CLOSED));
  assertEquals(Ranges.open(0,4),Ranges.closed(1,3).asSet(integers()).range(OPEN,OPEN));
  assertEquals(Ranges.open(0,4),Ranges.closedOpen(1,4).asSet(integers()).range(OPEN,OPEN));
  assertEquals(Ranges.open(0,4),Ranges.open(0,4).asSet(integers()).range(OPEN,OPEN));
  assertEquals(Ranges.open(0,4),Ranges.openClosed(0,3).asSet(integers()).range(OPEN,OPEN));
  assertEquals(Ranges.closedOpen(1,4),Ranges.closed(1,3).asSet(integers()).range(CLOSED,OPEN));
  assertEquals(Ranges.closedOpen(1,4),Ranges.closedOpen(1,4).asSet(integers()).range(CLOSED,OPEN));
  assertEquals(Ranges.closedOpen(1,4),Ranges.open(0,4).asSet(integers()).range(CLOSED,OPEN));
  assertEquals(Ranges.closedOpen(1,4),Ranges.openClosed(0,3).asSet(integers()).range(CLOSED,OPEN));
}
