{
  assertEquals(Ranges.closed(1,3),ContiguousSet.create(Ranges.closed(1,3),integers()).range());
  assertEquals(Ranges.closed(1,3),ContiguousSet.create(Ranges.closedOpen(1,4),integers()).range());
  assertEquals(Ranges.closed(1,3),ContiguousSet.create(Ranges.open(0,4),integers()).range());
  assertEquals(Ranges.closed(1,3),ContiguousSet.create(Ranges.openClosed(0,3),integers()).range());
  assertEquals(Ranges.openClosed(0,3),ContiguousSet.create(Ranges.closed(1,3),integers()).range(OPEN,CLOSED));
  assertEquals(Ranges.openClosed(0,3),ContiguousSet.create(Ranges.closedOpen(1,4),integers()).range(OPEN,CLOSED));
  assertEquals(Ranges.openClosed(0,3),ContiguousSet.create(Ranges.open(0,4),integers()).range(OPEN,CLOSED));
  assertEquals(Ranges.openClosed(0,3),ContiguousSet.create(Ranges.openClosed(0,3),integers()).range(OPEN,CLOSED));
  assertEquals(Ranges.open(0,4),ContiguousSet.create(Ranges.closed(1,3),integers()).range(OPEN,OPEN));
  assertEquals(Ranges.open(0,4),ContiguousSet.create(Ranges.closedOpen(1,4),integers()).range(OPEN,OPEN));
  assertEquals(Ranges.open(0,4),ContiguousSet.create(Ranges.open(0,4),integers()).range(OPEN,OPEN));
  assertEquals(Ranges.open(0,4),ContiguousSet.create(Ranges.openClosed(0,3),integers()).range(OPEN,OPEN));
  assertEquals(Ranges.closedOpen(1,4),ContiguousSet.create(Ranges.closed(1,3),integers()).range(CLOSED,OPEN));
  assertEquals(Ranges.closedOpen(1,4),ContiguousSet.create(Ranges.closedOpen(1,4),integers()).range(CLOSED,OPEN));
  assertEquals(Ranges.closedOpen(1,4),ContiguousSet.create(Ranges.open(0,4),integers()).range(CLOSED,OPEN));
  assertEquals(Ranges.closedOpen(1,4),ContiguousSet.create(Ranges.openClosed(0,3),integers()).range(CLOSED,OPEN));
}
