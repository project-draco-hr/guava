{
  CheckCloseSupplier.Input<Reader> okRead=newCheckReader(CharStreams.newReaderSupplier(TEXT));
  CheckCloseSupplier.Output<Writer> okWrite=newCheckWriter(new OutputSupplier<Writer>(){
    @Override public Writer getOutput(){
      return new StringWriter();
    }
  }
);
  CheckCloseSupplier.Input<Reader> brokenRead=newCheckReader(BROKEN_READ);
  CheckCloseSupplier.Output<Writer> brokenWrite=newCheckWriter(BROKEN_WRITE);
  CharStreams.copy(okRead,okWrite);
  assertTrue(okRead.areClosed());
  assertTrue(okWrite.areClosed());
  try {
    CharStreams.copy(okRead,brokenWrite);
    fail("expected exception");
  }
 catch (  Exception e) {
    assertEquals("broken write",e.getMessage());
  }
  assertTrue(okRead.areClosed());
  assertTrue(brokenWrite.areClosed());
  try {
    CharStreams.copy(brokenRead,okWrite);
    fail("expected exception");
  }
 catch (  Exception e) {
    assertEquals("broken read",e.getMessage());
  }
  assertTrue(brokenRead.areClosed());
  assertTrue(okWrite.areClosed());
  try {
    CharStreams.copy(brokenRead,brokenWrite);
    fail("expected exception");
  }
 catch (  Exception e) {
    assertEquals("broken read",e.getMessage());
  }
  assertTrue(brokenRead.areClosed());
  assertTrue(brokenWrite.areClosed());
  assertEquals(TEXT,CharStreams.toString(okRead));
  assertTrue(okRead.areClosed());
  try {
    CharStreams.toString(brokenRead);
    fail("expected exception");
  }
 catch (  Exception e) {
    assertEquals("broken read",e.getMessage());
  }
  assertTrue(brokenRead.areClosed());
  try {
    CharStreams.write("hello world",brokenWrite);
    fail("expected exception");
  }
 catch (  Exception e) {
    assertEquals("broken write",e.getMessage());
  }
  assertTrue(brokenWrite.areClosed());
}
