{
  CacheBuilder<Object,Object> builder=createCacheBuilder().concurrencyLevel(1);
  AutoLocalCache<Object,Object> cache=makeCache(builder,identityLoader());
  ConcurrentMap<Object,Object> map=cache.map;
  assertEquals(EMPTY_STATS,cache.stats());
  Object one=new Object();
  assertNull(map.put(one,one));
  assertSame(one,map.get(one));
  assertTrue(map.containsKey(one));
  assertTrue(map.containsValue(one));
  Object two=new Object();
  assertSame(one,map.replace(one,two));
  assertTrue(map.containsKey(one));
  assertFalse(map.containsValue(one));
  Object three=new Object();
  assertTrue(map.replace(one,two,three));
  assertTrue(map.remove(one,three));
  assertFalse(map.containsKey(one));
  assertFalse(map.containsValue(one));
  assertNull(map.putIfAbsent(two,three));
  assertSame(three,map.remove(two));
  assertNull(map.put(three,one));
  assertNull(map.put(one,two));
  Set<Map.Entry<Object,Object>> entries=map.entrySet();
  ASSERT.that(entries).hasContentsAnyOrder(Maps.immutableEntry(three,one),Maps.immutableEntry(one,two));
  Set<Object> keys=map.keySet();
  ASSERT.that(keys).hasContentsAnyOrder(one,three);
  Collection<Object> values=map.values();
  ASSERT.that(values).hasContentsAnyOrder(one,two);
  map.clear();
  assertEquals(EMPTY_STATS,cache.stats());
}
