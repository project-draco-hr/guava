{
  checkNotNull(future);
  if (future instanceof UninterruptibleFuture<?>) {
    return (UninterruptibleFuture<V>)future;
  }
  return new UninterruptibleFuture<V>(){
    @Override public boolean cancel(    boolean mayInterruptIfRunning){
      return future.cancel(mayInterruptIfRunning);
    }
    @Override public boolean isCancelled(){
      return future.isCancelled();
    }
    @Override public boolean isDone(){
      return future.isDone();
    }
    @Override public V get(    long originalTimeout,    TimeUnit originalUnit) throws TimeoutException, ExecutionException {
      boolean interrupted=false;
      try {
        long end=System.nanoTime() + originalUnit.toNanos(originalTimeout);
        while (true) {
          try {
            return future.get(end - System.nanoTime(),NANOSECONDS);
          }
 catch (          InterruptedException e) {
            interrupted=true;
          }
        }
      }
  finally {
        if (interrupted) {
          Thread.currentThread().interrupt();
        }
      }
    }
    @Override public V get() throws ExecutionException {
      boolean interrupted=false;
      try {
        while (true) {
          try {
            return future.get();
          }
 catch (          InterruptedException ignored) {
            interrupted=true;
          }
        }
      }
  finally {
        if (interrupted) {
          Thread.currentThread().interrupt();
        }
      }
    }
  }
;
}
