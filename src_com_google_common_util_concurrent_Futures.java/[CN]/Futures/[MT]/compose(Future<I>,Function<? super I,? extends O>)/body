{
  return new Future<O>(){
    private final Object lock=new Object();
    private boolean set=false;
    private O value=null;
    @Override public O get() throws InterruptedException, ExecutionException {
      return apply(future.get());
    }
    @Override public O get(    long timeout,    TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
      return apply(future.get(timeout,unit));
    }
    private O apply(    I raw){
synchronized (lock) {
        if (!set) {
          value=function.apply(raw);
          set=true;
        }
        return value;
      }
    }
    @Override public boolean cancel(    boolean mayInterruptIfRunning){
      return future.cancel(mayInterruptIfRunning);
    }
    @Override public boolean isCancelled(){
      return future.isCancelled();
    }
    @Override public boolean isDone(){
      return future.isDone();
    }
  }
;
}
