{
  UnicodeEscaper e=new PercentEscaper("",false);
  for (char c=0; c < 128; c++) {
    if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
      assertUnescaped(e,c);
    }
 else {
      assertEscaping(e,escapeAscii(c),c);
    }
  }
  assertEscaping(e,"%00",'\u0000');
  assertEscaping(e,"%7F",'\u007f');
  assertEscaping(e,"%C2%80",'\u0080');
  assertEscaping(e,"%DF%BF",'\u07ff');
  assertEscaping(e,"%E0%A0%80",'\u0800');
  assertEscaping(e,"%EF%BF%BF",'\uffff');
  assertUnicodeEscaping(e,"%F0%90%80%80",'\uD800','\uDC00');
  assertUnicodeEscaping(e,"%F4%8F%BF%BF",'\uDBFF','\uDFFF');
  assertEquals("",e.escape(""));
  assertEquals("safestring",e.escape("safestring"));
  assertEquals("embedded%00null",e.escape("embedded\0null"));
  assertEquals("max%EF%BF%BFchar",e.escape("max\uffffchar"));
}
