{
  Comparator<NonComparableSuperClass> comparator=new Comparator<NonComparableSuperClass>(){
    @Override public int compare(    NonComparableSuperClass left,    NonComparableSuperClass right){
      return left.value.compareTo(right.value);
    }
  }
;
  MutableGraph<NonComparableSuperClass> graph=GraphBuilder.undirected().nodeOrder(ElementOrder.sorted(comparator)).build();
  NonComparableSuperClass node1=new NonComparableSuperClass(1);
  NonComparableSuperClass node3=new NonComparableSuperClass(3);
  NonComparableSuperClass node5=new NonComparableSuperClass(5);
  NonComparableSuperClass node7=new NonComparableSuperClass(7);
  graph.addNode(node1);
  graph.addNode(node7);
  graph.addNode(node5);
  graph.addNode(node3);
  assertThat(graph.nodeOrder().comparator()).isEqualTo(comparator);
  assertThat(graph.nodes()).containsExactly(node1,node3,node5,node7).inOrder();
}
