{
  return new AbstractSet<Entry<K,V>>(){
    private Set<Entry<K,V>> delegate(){
      return delegate.entrySet();
    }
    @Override public boolean contains(    Object object){
      try {
        return delegate().contains(object);
      }
 catch (      NullPointerException e) {
        return false;
      }
catch (      ClassCastException e) {
        return false;
      }
    }
    @Override public Iterator<Entry<K,V>> iterator(){
      return delegate().iterator();
    }
    @Override public int size(){
      return delegate().size();
    }
    @Override public boolean remove(    Object o){
      return delegate().remove(o);
    }
    @Override public void clear(){
      delegate().clear();
    }
  }
;
}
