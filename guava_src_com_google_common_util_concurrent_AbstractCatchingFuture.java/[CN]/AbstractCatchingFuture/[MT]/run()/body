{
  ListenableFuture<? extends V> localInputFuture=inputFuture;
  Class<X> localExceptionType=exceptionType;
  F localFallback=fallback;
  if (localInputFuture == null | localExceptionType == null | localFallback == null | isCancelled()) {
    return;
  }
  inputFuture=null;
  exceptionType=null;
  fallback=null;
  V sourceResult=null;
  Throwable throwable=null;
  try {
    sourceResult=getUninterruptibly(localInputFuture);
  }
 catch (  ExecutionException e) {
    throwable=checkNotNull(e.getCause());
  }
catch (  Throwable e) {
    throwable=e;
  }
  if (throwable == null) {
    set(sourceResult);
    return;
  }
  if (!isInstanceOfThrowableClass(throwable,localExceptionType)) {
    setException(throwable);
    return;
  }
  @SuppressWarnings("unchecked") X castThrowable=(X)throwable;
  T fallbackResult;
  try {
    fallbackResult=doFallback(localFallback,castThrowable);
  }
 catch (  Throwable t) {
    setException(t);
    return;
  }
  setResult(fallbackResult);
}
