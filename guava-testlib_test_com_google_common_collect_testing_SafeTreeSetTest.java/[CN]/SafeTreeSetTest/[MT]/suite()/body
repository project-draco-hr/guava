{
  TestSuite suite=new TestSuite();
  suite.addTestSuite(SafeTreeSetTest.class);
  suite.addTest(NavigableSetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      return new SafeTreeSet<String>(Arrays.asList(elements));
    }
    @Override public List<String> order(    List<String> insertionOrder){
      return Lists.newArrayList(Sets.newTreeSet(insertionOrder));
    }
  }
).withFeatures(CollectionSize.ANY,CollectionFeature.KNOWN_ORDER,CollectionFeature.GENERAL_PURPOSE).named("SafeTreeSet with natural comparator").createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      NavigableSet<String> set=new SafeTreeSet<String>(Ordering.natural().nullsFirst());
      set.addAll(Arrays.asList(elements));
      return set;
    }
    @Override public List<String> order(    List<String> insertionOrder){
      return Lists.newArrayList(Sets.newTreeSet(insertionOrder));
    }
  }
).withFeatures(CollectionSize.ANY,CollectionFeature.KNOWN_ORDER,CollectionFeature.GENERAL_PURPOSE,CollectionFeature.ALLOWS_NULL_VALUES).named("SafeTreeSet with null-friendly comparator").createTestSuite());
  return suite;
}
