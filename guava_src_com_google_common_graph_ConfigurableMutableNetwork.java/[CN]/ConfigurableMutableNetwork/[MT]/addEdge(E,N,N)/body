{
  checkNotNull(edge,"edge");
  checkNotNull(nodeA,"nodeA");
  checkNotNull(nodeB,"nodeB");
  checkArgument(allowsSelfLoops() || !nodeA.equals(nodeB),SELF_LOOPS_NOT_ALLOWED,nodeA);
  boolean containsN1=containsNode(nodeA);
  boolean containsN2=containsNode(nodeB);
  if (containsEdge(edge)) {
    checkArgument(containsN1 && containsN2 && edgesConnecting(nodeA,nodeB).contains(edge),REUSING_EDGE,edge,incidentNodes(edge),nodeA,nodeB);
    return false;
  }
 else   if (!allowsParallelEdges()) {
    checkArgument(!(containsN1 && containsN2 && successors(nodeA).contains(nodeB)),ADDING_PARALLEL_EDGE,nodeA,nodeB);
  }
  if (!containsN1) {
    addNode(nodeA);
  }
  NodeConnections<N,E> connectionsN1=nodeConnections.get(nodeA);
  connectionsN1.addOutEdge(edge,nodeB);
  if (!containsN2) {
    addNode(nodeB);
  }
  NodeConnections<N,E> connectionsN2=nodeConnections.get(nodeB);
  connectionsN2.addInEdge(edge,nodeA);
  edgeToReferenceNode.put(edge,nodeA);
  return true;
}
