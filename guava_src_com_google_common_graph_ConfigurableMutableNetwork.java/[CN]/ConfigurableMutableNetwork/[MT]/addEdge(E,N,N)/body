{
  checkNotNull(edge,"edge");
  checkNotNull(nodeA,"nodeA");
  checkNotNull(nodeB,"nodeB");
  checkArgument(allowsSelfLoops() || !nodeA.equals(nodeB),SELF_LOOPS_NOT_ALLOWED,nodeA);
  boolean containsA=containsNode(nodeA);
  boolean containsB=containsNode(nodeB);
  if (containsEdge(edge)) {
    checkArgument(containsA && containsB && edgesConnecting(nodeA,nodeB).contains(edge),REUSING_EDGE,edge,incidentNodes(edge),nodeA,nodeB);
    return false;
  }
 else   if (!allowsParallelEdges()) {
    checkArgument(!(containsA && containsB && successors(nodeA).contains(nodeB)),ADDING_PARALLEL_EDGE,nodeA,nodeB);
  }
  if (!containsA) {
    addNode(nodeA);
  }
  NodeConnections<N,E> connectionsA=nodeConnections.get(nodeA);
  connectionsA.addOutEdge(edge,nodeB);
  if (!containsB) {
    addNode(nodeB);
  }
  NodeConnections<N,E> connectionsB=nodeConnections.get(nodeB);
  connectionsB.addInEdge(edge,nodeA);
  edgeToReferenceNode.put(edge,nodeA);
  return true;
}
