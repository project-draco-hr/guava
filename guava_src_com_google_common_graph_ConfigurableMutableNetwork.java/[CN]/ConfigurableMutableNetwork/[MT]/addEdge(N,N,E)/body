{
  checkNotNull(edge,"edge");
  checkNotNull(nodeU,"nodeU");
  checkNotNull(nodeV,"nodeV");
  if (containsEdge(edge)) {
    EndpointPair<N> existingIncidentNodes=incidentNodes(edge);
    EndpointPair<N> newIncidentNodes=EndpointPair.of(this,nodeU,nodeV);
    checkArgument(existingIncidentNodes.equals(newIncidentNodes),REUSING_EDGE,edge,existingIncidentNodes,newIncidentNodes);
    return false;
  }
  NetworkConnections<N,E> connectionsU=nodeConnections.get(nodeU);
  if (!allowsParallelEdges()) {
    checkArgument(!(connectionsU != null && connectionsU.successors().contains(nodeV)),PARALLEL_EDGES_NOT_ALLOWED,nodeU,nodeV);
  }
  boolean isSelfLoop=nodeU.equals(nodeV);
  if (!allowsSelfLoops()) {
    checkArgument(!isSelfLoop,SELF_LOOPS_NOT_ALLOWED,nodeU);
  }
  if (connectionsU == null) {
    connectionsU=addNodeInternal(nodeU);
  }
  connectionsU.addOutEdge(edge,nodeV);
  NetworkConnections<N,E> connectionsV=nodeConnections.get(nodeV);
  if (connectionsV == null) {
    connectionsV=addNodeInternal(nodeV);
  }
  connectionsV.addInEdge(edge,nodeU,isSelfLoop);
  edgeToReferenceNode.put(edge,nodeU);
  return true;
}
