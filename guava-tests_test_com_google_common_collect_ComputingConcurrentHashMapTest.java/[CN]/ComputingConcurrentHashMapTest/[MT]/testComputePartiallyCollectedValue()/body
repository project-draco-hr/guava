{
  MapMaker maker=createMapMaker().concurrencyLevel(1);
  CountingFunction computingFunction=new CountingFunction();
  ComputingConcurrentHashMap<Object,Object> map=makeComputingMap(maker,computingFunction);
  Segment<Object,Object> segment=map.segments[0];
  AtomicReferenceArray<ReferenceEntry<Object,Object>> table=segment.table;
  assertEquals(0,computingFunction.getCount());
  Object key=new Object();
  int hash=map.hash(key);
  Object value=new Object();
  int index=hash & (table.length() - 1);
  DummyEntry<Object,Object> entry=DummyEntry.create(key,hash,null);
  DummyValueReference<Object,Object> valueRef=DummyValueReference.create(value,entry);
  entry.setValueReference(valueRef);
  table.set(index,entry);
  segment.count++;
  assertSame(value,map.getOrCompute(key));
  assertEquals(0,computingFunction.getCount());
  assertEquals(1,segment.count);
  valueRef.clear(null);
  assertNotSame(value,map.getOrCompute(key));
  assertEquals(1,computingFunction.getCount());
  assertEquals(1,segment.count);
}
