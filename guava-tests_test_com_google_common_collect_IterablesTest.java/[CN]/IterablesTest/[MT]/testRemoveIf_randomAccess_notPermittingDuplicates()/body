{
  final List<String> delegate=newArrayList("a","b","c","d","e");
  List<String> uniqueList=Constraints.constrainedList(delegate,new Constraint<String>(){
    @Override public String checkElement(    String element){
      checkArgument(!delegate.contains(element),"this list does not permit duplicate elements");
      return element;
    }
  }
);
  assertTrue(uniqueList instanceof RandomAccess);
  assertTrue(Iterables.removeIf(uniqueList,new Predicate<String>(){
    @Override public boolean apply(    String s){
      return s.equals("b") || s.equals("d") || s.equals("f");
    }
  }
));
  assertEquals(newArrayList("a","c","e"),uniqueList);
  assertFalse(Iterables.removeIf(uniqueList,new Predicate<String>(){
    @Override public boolean apply(    String s){
      return s.equals("x") || s.equals("y") || s.equals("z");
    }
  }
));
  assertEquals(newArrayList("a","c","e"),uniqueList);
}
