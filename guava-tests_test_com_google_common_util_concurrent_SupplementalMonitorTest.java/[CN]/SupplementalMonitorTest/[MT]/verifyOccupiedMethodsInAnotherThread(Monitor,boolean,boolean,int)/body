{
  final AtomicBoolean actualIsOccupied=new AtomicBoolean();
  final AtomicBoolean actualIsOccupiedByCurrentThread=new AtomicBoolean();
  final AtomicInteger actualOccupiedDepth=new AtomicInteger();
  final AtomicReference<Throwable> thrown=new AtomicReference<Throwable>();
  joinUninterruptibly(startThread(new Runnable(){
    @Override public void run(){
      try {
        actualIsOccupied.set(monitor.isOccupied());
        actualIsOccupiedByCurrentThread.set(monitor.isOccupiedByCurrentThread());
        actualOccupiedDepth.set(monitor.getOccupiedDepth());
      }
 catch (      Throwable t) {
        thrown.set(t);
      }
    }
  }
));
  assertNull(thrown.get());
  assertEquals(expectedIsOccupied,actualIsOccupied.get());
  assertEquals(expectedIsOccupiedByCurrentThread,actualIsOccupiedByCurrentThread.get());
  assertEquals(expectedOccupiedDepth,actualOccupiedDepth.get());
}
