{
  if ((map instanceof ImmutableMap) && !(map instanceof ImmutableSortedMap)) {
    @SuppressWarnings("unchecked") ImmutableMap<K,V> kvMap=(ImmutableMap<K,V>)map;
    return kvMap;
  }
 else   if (map instanceof EnumMap) {
    EnumMap<?,?> enumMap=(EnumMap<?,?>)map;
    for (    Map.Entry<?,?> entry : enumMap.entrySet()) {
      checkNotNull(entry.getKey());
      checkNotNull(entry.getValue());
    }
    @SuppressWarnings("unchecked") ImmutableMap<K,V> result=ImmutableEnumMap.asImmutable(new EnumMap(enumMap));
    return result;
  }
  int size=map.size();
switch (size) {
case 0:
    return of();
case 1:
  Entry<? extends K,? extends V> entry=getOnlyElement(map.entrySet());
return ImmutableMap.<K,V>of(entry.getKey(),entry.getValue());
default :
Map<K,V> orderPreservingCopy=Maps.newLinkedHashMap();
for (Entry<? extends K,? extends V> e : map.entrySet()) {
orderPreservingCopy.put(checkNotNull(e.getKey()),checkNotNull(e.getValue()));
}
return new RegularImmutableMap<K,V>(orderPreservingCopy);
}
}
