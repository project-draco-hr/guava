{
  final Map<K,V> outer=this;
  return new ImmutableMap<K,ImmutableSet<V>>(){
    @Override public int size(){
      return outer.size();
    }
    @Override public ImmutableSet<V> get(    @Nullable Object key){
      V outerValue=outer.get(key);
      return outerValue == null ? null : ImmutableSet.of(outerValue);
    }
    @Override ImmutableSet<Entry<K,ImmutableSet<V>>> createEntrySet(){
      return new ImmutableSet<Entry<K,ImmutableSet<V>>>(){
        @Override public UnmodifiableIterator<Entry<K,ImmutableSet<V>>> iterator(){
          final Iterator<Entry<K,V>> outerEntryIterator=outer.entrySet().iterator();
          return new UnmodifiableIterator<Entry<K,ImmutableSet<V>>>(){
            @Override public boolean hasNext(){
              return outerEntryIterator.hasNext();
            }
            @Override public Entry<K,ImmutableSet<V>> next(){
              final Entry<K,V> outerEntry=outerEntryIterator.next();
              return new AbstractMapEntry<K,ImmutableSet<V>>(){
                @Override public K getKey(){
                  return outerEntry.getKey();
                }
                @Override public ImmutableSet<V> getValue(){
                  return ImmutableSet.of(outerEntry.getValue());
                }
              }
;
            }
          }
;
        }
        @Override boolean isPartialView(){
          return false;
        }
        @Override public int size(){
          return outer.size();
        }
      }
;
    }
    @Override boolean isPartialView(){
      return false;
    }
  }
;
}
