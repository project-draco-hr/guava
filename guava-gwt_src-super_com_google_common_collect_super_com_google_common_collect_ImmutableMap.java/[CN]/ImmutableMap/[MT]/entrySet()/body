{
  if (cachedEntrySet != null) {
    return cachedEntrySet;
  }
  return cachedEntrySet=ImmutableSet.unsafeDelegate(new ForwardingSet<Entry<K,V>>(){
    @Override protected Set<Entry<K,V>> delegate(){
      return delegate.entrySet();
    }
    @Override public boolean contains(    Object object){
      if (object instanceof Entry && ((Entry<?,?>)object).getKey() == null) {
        return false;
      }
      try {
        return super.contains(object);
      }
 catch (      ClassCastException e) {
        return false;
      }
    }
    @Override public <T>T[] toArray(    T[] array){
      T[] result=super.toArray(array);
      if (size() < result.length) {
        result[size()]=null;
      }
      return result;
    }
  }
);
}
