{
  new EqualsTester().addEqualityGroup(ContiguousSet.create(Range.closed(1,3),integers()),ContiguousSet.create(Range.closedOpen(1,4),integers()),ContiguousSet.create(Range.openClosed(0,3),integers()),ContiguousSet.create(Range.open(0,4),integers()),ContiguousSet.create(Range.closed(1,3),NOT_EQUAL_TO_INTEGERS),ContiguousSet.create(Range.closedOpen(1,4),NOT_EQUAL_TO_INTEGERS),ContiguousSet.create(Range.openClosed(0,3),NOT_EQUAL_TO_INTEGERS),ContiguousSet.create(Range.open(0,4),NOT_EQUAL_TO_INTEGERS),ImmutableSortedSet.of(1,2,3)).addEqualityGroup(ContiguousSet.create(Range.closedOpen(1,1),integers()),ImmutableSortedSet.of(),ImmutableSet.of()).testEquals();
  assertEquals(ContiguousSet.create(Range.closed(Integer.MIN_VALUE,Integer.MAX_VALUE),integers()),ContiguousSet.create(Range.<Integer>all(),integers()));
  assertEquals(ContiguousSet.create(Range.closed(Integer.MIN_VALUE,Integer.MAX_VALUE),integers()),ContiguousSet.create(Range.atLeast(Integer.MIN_VALUE),integers()));
  assertEquals(ContiguousSet.create(Range.closed(Integer.MIN_VALUE,Integer.MAX_VALUE),integers()),ContiguousSet.create(Range.atMost(Integer.MAX_VALUE),integers()));
}
