{
  checkNotNull(future);
  if (future instanceof UninterruptibleFuture<?>) {
    return (UninterruptibleFuture<V>)future;
  }
  return new UninterruptibleFuture<V>(){
    @Override public boolean cancel(    boolean mayInterruptIfRunning){
      return future.cancel(mayInterruptIfRunning);
    }
    @Override public boolean isCancelled(){
      return future.isCancelled();
    }
    @Override public boolean isDone(){
      return future.isDone();
    }
    @Override public V get(    long timeout,    TimeUnit unit) throws TimeoutException, ExecutionException {
      return Uninterruptibles.getUninterruptibly(future,timeout,unit);
    }
    @Override public V get() throws ExecutionException {
      return Uninterruptibles.getUninterruptibly(future);
    }
  }
;
}
