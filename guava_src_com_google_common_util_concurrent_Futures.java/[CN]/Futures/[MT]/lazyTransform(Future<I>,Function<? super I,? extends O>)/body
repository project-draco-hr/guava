{
  checkNotNull(future);
  checkNotNull(function);
  return new Future<O>(){
    @Override public boolean cancel(    boolean mayInterruptIfRunning){
      return future.cancel(mayInterruptIfRunning);
    }
    @Override public boolean isCancelled(){
      return future.isCancelled();
    }
    @Override public boolean isDone(){
      return future.isDone();
    }
    @Override public O get() throws InterruptedException, ExecutionException {
      return applyTransformation(future.get());
    }
    @Override public O get(    long timeout,    TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
      return applyTransformation(future.get(timeout,unit));
    }
    private O applyTransformation(    I input) throws ExecutionException {
      try {
        return function.apply(input);
      }
 catch (      Throwable t) {
        throw new ExecutionException(t);
      }
    }
  }
;
}
