{
  final Iterator<K> keyIterator=new DistinctKeyIterator();
  return new Iterator<Entry<K,Collection<V>>>(){
    @Override public boolean hasNext(){
      return keyIterator.hasNext();
    }
    @Override public Entry<K,Collection<V>> next(){
      final K key=keyIterator.next();
      return new AbstractMapEntry<K,Collection<V>>(){
        @Override public K getKey(){
          return key;
        }
        @Override public Collection<V> getValue(){
          return LinkedListMultimap.this.get(key);
        }
      }
;
    }
    @Override public void remove(){
      keyIterator.remove();
    }
  }
;
}
