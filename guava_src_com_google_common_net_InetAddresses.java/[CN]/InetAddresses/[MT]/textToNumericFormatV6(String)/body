{
  if (!ipString.contains(":")) {
    return null;
  }
  if (ipString.contains(":::")) {
    return null;
  }
  if (ipString.contains(".")) {
    ipString=convertDottedQuadToHex(ipString);
    if (ipString == null) {
      return null;
    }
  }
  ByteBuffer rawBytes=ByteBuffer.allocate(2 * IPV6_PART_COUNT);
  int partsHi=0;
  int partsLo=0;
  String[] addressHalves=ipString.split("::",2);
  if (!addressHalves[0].equals("")) {
    String[] parts=addressHalves[0].split(":",IPV6_PART_COUNT);
    try {
      for (int i=0; i < parts.length; i++) {
        rawBytes.putShort(2 * i,parseHextet(parts[i]));
      }
      partsHi=parts.length;
    }
 catch (    NumberFormatException ex) {
      return null;
    }
  }
 else {
    partsHi=1;
  }
  if (addressHalves.length > 1) {
    if (!addressHalves[1].equals("")) {
      String[] parts=addressHalves[1].split(":",IPV6_PART_COUNT);
      try {
        for (int i=0; i < parts.length; i++) {
          int partsIndex=parts.length - i - 1;
          int bytesIndex=2 * (IPV6_PART_COUNT - i - 1);
          rawBytes.putShort(bytesIndex,parseHextet(parts[partsIndex]));
        }
        partsLo=parts.length;
      }
 catch (      NumberFormatException ex) {
        return null;
      }
    }
 else {
      partsLo=1;
    }
  }
  int totalParts=partsHi + partsLo;
  if (totalParts > IPV6_PART_COUNT) {
    return null;
  }
  if (addressHalves.length == 1 && totalParts != IPV6_PART_COUNT) {
    return null;
  }
  return rawBytes.array();
}
