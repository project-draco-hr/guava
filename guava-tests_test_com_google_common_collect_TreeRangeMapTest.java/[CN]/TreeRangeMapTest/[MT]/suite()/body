{
  TestSuite suite=new TestSuite();
  suite.addTestSuite(TreeRangeMapTest.class);
  suite.addTest(MapTestSuiteBuilder.using(new TestMapGenerator<Range<Integer>,String>(){
    @Override public SampleElements<Entry<Range<Integer>,String>> samples(){
      return new SampleElements<Entry<Range<Integer>,String>>(mapEntry(Range.singleton(0),"banana"),mapEntry(Range.closedOpen(3,5),"frisbee"),mapEntry(Range.atMost(-1),"fruitcake"),mapEntry(Range.open(10,15),"elephant"),mapEntry(Range.closed(20,22),"umbrella"));
    }
    @Override public Map<Range<Integer>,String> create(    Object... elements){
      RangeMap<Integer,String> rangeMap=TreeRangeMap.create();
      for (      Object o : elements) {
        @SuppressWarnings("unchecked") Entry<Range<Integer>,String> entry=(Entry<Range<Integer>,String>)o;
        rangeMap.put(entry.getKey(),entry.getValue());
      }
      return rangeMap.asMapOfRanges();
    }
    @SuppressWarnings("unchecked") @Override public Entry<Range<Integer>,String>[] createArray(    int length){
      return new Entry[length];
    }
    @Override public Iterable<Entry<Range<Integer>,String>> order(    List<Entry<Range<Integer>,String>> insertionOrder){
      return Range.RANGE_LEX_ORDERING.<Range<Integer>>onKeys().sortedCopy(insertionOrder);
    }
    @SuppressWarnings("unchecked") @Override public Range<Integer>[] createKeyArray(    int length){
      return new Range[length];
    }
    @Override public String[] createValueArray(    int length){
      return new String[length];
    }
  }
).named("TreeRangeMap.asMapOfRanges").withFeatures(CollectionSize.ANY,MapFeature.SUPPORTS_REMOVE,MapFeature.ALLOWS_NULL_QUERIES,CollectionFeature.KNOWN_ORDER).createTestSuite());
  suite.addTest(MapTestSuiteBuilder.using(new TestMapGenerator<Range<Integer>,String>(){
    @Override public SampleElements<Entry<Range<Integer>,String>> samples(){
      return new SampleElements<Entry<Range<Integer>,String>>(mapEntry(Range.singleton(0),"banana"),mapEntry(Range.closedOpen(3,5),"frisbee"),mapEntry(Range.atMost(-1),"fruitcake"),mapEntry(Range.open(10,15),"elephant"),mapEntry(Range.closed(20,22),"umbrella"));
    }
    @Override public Map<Range<Integer>,String> create(    Object... elements){
      RangeMap<Integer,String> rangeMap=TreeRangeMap.create();
      for (      Object o : elements) {
        @SuppressWarnings("unchecked") Entry<Range<Integer>,String> entry=(Entry<Range<Integer>,String>)o;
        rangeMap.put(entry.getKey(),entry.getValue());
      }
      return rangeMap.subRangeMap(Range.atMost(22)).asMapOfRanges();
    }
    @SuppressWarnings("unchecked") @Override public Entry<Range<Integer>,String>[] createArray(    int length){
      return new Entry[length];
    }
    @Override public Iterable<Entry<Range<Integer>,String>> order(    List<Entry<Range<Integer>,String>> insertionOrder){
      return Range.RANGE_LEX_ORDERING.<Range<Integer>>onKeys().sortedCopy(insertionOrder);
    }
    @SuppressWarnings("unchecked") @Override public Range<Integer>[] createKeyArray(    int length){
      return new Range[length];
    }
    @Override public String[] createValueArray(    int length){
      return new String[length];
    }
  }
).named("TreeRangeMap.subRangeMap.asMapOfRanges").withFeatures(CollectionSize.ANY,MapFeature.SUPPORTS_REMOVE,MapFeature.ALLOWS_NULL_QUERIES,CollectionFeature.KNOWN_ORDER).suppressing(CollectionIteratorTester.getIteratorKnownOrderRemoveSupportedMethod()).createTestSuite());
  return suite;
}
