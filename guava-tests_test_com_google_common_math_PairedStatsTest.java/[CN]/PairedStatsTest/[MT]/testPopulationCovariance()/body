{
  try {
    EMPTY_PAIRED_STATS.populationCovariance();
    fail("Expected IllegalStateException");
  }
 catch (  IllegalStateException expected) {
  }
  assertThat(ONE_VALUE_PAIRED_STATS.populationCovariance()).isWithin(0.0).of(0.0);
  assertThat(createSingleStats(Double.POSITIVE_INFINITY,1.23).populationCovariance()).isNaN();
  assertThat(createSingleStats(Double.NEGATIVE_INFINITY,1.23).populationCovariance()).isNaN();
  assertThat(createSingleStats(Double.NaN,1.23).populationCovariance()).isNaN();
  assertThat(TWO_VALUES_PAIRED_STATS.populationCovariance()).isWithin(ALLOWED_ERROR).of(TWO_VALUES_SUM_OF_PRODUCTS_OF_DELTAS / 2);
  for (  ManyValues values : ALL_MANY_VALUES) {
    PairedStats stats=createPairedStatsOf(values.asIterable(),OTHER_MANY_VALUES);
    double populationCovariance=stats.populationCovariance();
    if (values.hasAnyNonFinite()) {
      assertThat(populationCovariance).named("population covariance of " + values).isNaN();
    }
 else {
      assertThat(populationCovariance).named("population covariance of " + values).isWithin(ALLOWED_ERROR).of(MANY_VALUES_SUM_OF_PRODUCTS_OF_DELTAS / MANY_VALUES_COUNT);
    }
  }
  assertThat(HORIZONTAL_VALUES_PAIRED_STATS.populationCovariance()).isWithin(ALLOWED_ERROR).of(0.0);
  assertThat(VERTICAL_VALUES_PAIRED_STATS.populationCovariance()).isWithin(ALLOWED_ERROR).of(0.0);
  assertThat(CONSTANT_VALUES_PAIRED_STATS.populationCovariance()).isWithin(ALLOWED_ERROR).of(0.0);
}
