{
  Class<?> matchedClass=of(supertype).getRawType();
  if (!someRawTypeIsSubclassOf(matchedClass)) {
    return false;
  }
  Type[] typeParams=matchedClass.getTypeParameters();
  Type[] toTypeArgs=supertype.getActualTypeArguments();
  for (int i=0; i < typeParams.length; i++) {
    if (!resolveType(typeParams[i]).is(toTypeArgs[i])) {
      return false;
    }
  }
  return Modifier.isStatic(((Class<?>)supertype.getRawType()).getModifiers()) || supertype.getOwnerType() == null || isOwnedBySubtypeOf(supertype.getOwnerType());
}
