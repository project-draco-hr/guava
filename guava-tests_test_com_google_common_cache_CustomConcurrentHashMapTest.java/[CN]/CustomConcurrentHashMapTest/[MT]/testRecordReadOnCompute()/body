{
  CountingLoader loader=new CountingLoader();
  for (  CacheBuilder<Object,Object> builder : allEvictingMakers()) {
    CustomConcurrentHashMap<Object,Object> map=makeComputingMap(builder.concurrencyLevel(1),loader);
    Segment<Object,Object> segment=map.segments[0];
    List<ReferenceEntry<Object,Object>> writeOrder=Lists.newLinkedList();
    List<ReferenceEntry<Object,Object>> readOrder=Lists.newLinkedList();
    for (int i=0; i < SMALL_MAX_SIZE; i++) {
      Object key=new Object();
      int hash=map.hash(key);
      map.getOrLoad(key);
      ReferenceEntry<Object,Object> entry=segment.getEntry(key,hash);
      writeOrder.add(entry);
      readOrder.add(entry);
    }
    checkEvictionQueues(map,segment,readOrder,writeOrder);
    checkExpirationTimes(map);
    assertTrue(segment.recencyQueue.isEmpty());
    Random random=new Random();
    List<ReferenceEntry<Object,Object>> reads=Lists.newArrayList();
    Iterator<ReferenceEntry<Object,Object>> i=readOrder.iterator();
    while (i.hasNext()) {
      ReferenceEntry<Object,Object> entry=i.next();
      if (random.nextBoolean()) {
        map.getOrLoad(entry.getKey());
        reads.add(entry);
        i.remove();
        assertTrue(segment.recencyQueue.size() <= DRAIN_THRESHOLD);
      }
    }
    int undrainedIndex=reads.size() - segment.recencyQueue.size();
    checkAndDrainRecencyQueue(map,segment,reads.subList(undrainedIndex,reads.size()));
    readOrder.addAll(reads);
    checkEvictionQueues(map,segment,readOrder,writeOrder);
    checkExpirationTimes(map);
  }
}
