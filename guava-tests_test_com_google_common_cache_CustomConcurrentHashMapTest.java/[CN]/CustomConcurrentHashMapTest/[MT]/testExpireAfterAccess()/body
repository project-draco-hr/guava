{
  FakeTicker ticker=new FakeTicker();
  CustomConcurrentHashMap<Object,Object> map=makeMap(createCacheBuilder().concurrencyLevel(1).ticker(ticker).expireAfterAccess(1,TimeUnit.NANOSECONDS));
  Segment<Object,Object> segment=map.segments[0];
  Object key=new Object();
  Object value=new Object();
  map.put(key,value);
  ReferenceEntry<Object,Object> entry=map.getEntry(key);
  assertTrue(map.isLive(entry));
  segment.expirationQueue.add(entry);
  assertSame(value,map.get(key));
  assertSame(entry,segment.expirationQueue.peek());
  assertEquals(1,segment.expirationQueue.size());
  segment.recordRead(entry);
  segment.expireEntries();
  assertTrue(map.containsKey(key));
  assertSame(entry,segment.expirationQueue.peek());
  assertEquals(1,segment.expirationQueue.size());
  ticker.advance(1);
  segment.recordRead(entry);
  segment.expireEntries();
  assertTrue(map.containsKey(key));
  assertSame(entry,segment.expirationQueue.peek());
  assertEquals(1,segment.expirationQueue.size());
  ticker.advance(1);
  segment.recordRead(entry);
  segment.expireEntries();
  assertTrue(map.containsKey(key));
  assertSame(entry,segment.expirationQueue.peek());
  assertEquals(1,segment.expirationQueue.size());
  ticker.advance(1);
  segment.expireEntries();
  assertTrue(map.containsKey(key));
  assertSame(entry,segment.expirationQueue.peek());
  assertEquals(1,segment.expirationQueue.size());
  ticker.advance(1);
  assertFalse(map.containsKey(key));
  assertNull(map.get(key));
  segment.expireEntries();
  assertFalse(map.containsKey(key));
  assertNull(map.get(key));
  assertTrue(segment.expirationQueue.isEmpty());
}
