{
  CustomConcurrentHashMap<Object,Object> map=makeMap(createCacheBuilder().concurrencyLevel(1).initialCapacity(1));
  Segment<Object,Object> segment=map.segments[0];
  assertEquals(1,segment.table.length());
  int originalCount=1024;
  ReferenceEntry<Object,Object> entry=null;
  for (int i=0; i < originalCount; i++) {
    Object key=new Object();
    Object value=(i % 3 == 0) ? null : new Object();
    int hash=map.hash(key);
    if (i % 3 == 1) {
      key=null;
    }
    entry=DummyEntry.create(key,hash,entry);
    ValueReference<Object,Object> valueRef=DummyValueReference.create(value,entry);
    entry.setValueReference(valueRef);
  }
  segment.table.set(0,entry);
  segment.count=originalCount;
  int liveCount=originalCount / 3;
  assertEquals(1,segment.table.length());
  assertEquals(liveCount,countLiveEntries(map));
  ImmutableMap<Object,Object> originalMap=ImmutableMap.copyOf(map);
  assertEquals(liveCount,originalMap.size());
  for (int i=1; i <= originalCount * 2; i*=2) {
    if (i > 1) {
      segment.expand();
    }
    assertEquals(i,segment.table.length());
    assertEquals(liveCount,countLiveEntries(map));
    assertTrue(segment.count >= liveCount);
    assertTrue(segment.count <= originalCount);
    assertEquals(originalMap,ImmutableMap.copyOf(map));
  }
}
