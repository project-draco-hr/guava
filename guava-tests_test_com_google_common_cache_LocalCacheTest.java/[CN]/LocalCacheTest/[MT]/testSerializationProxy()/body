{
  CacheLoader<Object,Object> loader=new SerializableCacheLoader();
  RemovalListener<Object,Object> listener=new SerializableRemovalListener<Object,Object>();
  SerializableWeigher<Object,Object> weigher=new SerializableWeigher<Object,Object>();
  Ticker ticker=new SerializableTicker();
  @SuppressWarnings("unchecked") AutoLocalCache<Object,Object> one=(AutoLocalCache)CacheBuilder.newBuilder().weakKeys().softValues().expireAfterAccess(123,NANOSECONDS).maximumWeight(789).weigher(weigher).concurrencyLevel(12).removalListener(listener).ticker(ticker).build(loader);
  one.getUnchecked(new Object());
  assertEquals(1,one.size());
  assertFalse(one.asMap().isEmpty());
  AutoLocalCache<Object,Object> two=SerializableTester.reserialize(one);
  assertEquals(0,two.size());
  assertTrue(two.asMap().isEmpty());
  LocalCache<Object,Object> localCacheOne=one.localCache;
  LocalCache<Object,Object> localCacheTwo=two.localCache;
  assertEquals(one.loader,two.loader);
  assertEquals(localCacheOne.keyStrength,localCacheTwo.keyStrength);
  assertEquals(localCacheOne.keyStrength,localCacheTwo.keyStrength);
  assertEquals(localCacheOne.valueEquivalence,localCacheTwo.valueEquivalence);
  assertEquals(localCacheOne.valueEquivalence,localCacheTwo.valueEquivalence);
  assertEquals(localCacheOne.maxWeight,localCacheTwo.maxWeight);
  assertEquals(localCacheOne.weigher,localCacheTwo.weigher);
  assertEquals(localCacheOne.expireAfterAccessNanos,localCacheTwo.expireAfterAccessNanos);
  assertEquals(localCacheOne.expireAfterWriteNanos,localCacheTwo.expireAfterWriteNanos);
  assertEquals(localCacheOne.removalListener,localCacheTwo.removalListener);
  assertEquals(localCacheOne.ticker,localCacheTwo.ticker);
}
