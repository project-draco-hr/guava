{
  CountingRemovalListener<Object,Object> listener=countingRemovalListener();
  LocalCache<Object,Object> map=makeMap(createCacheBuilder().concurrencyLevel(1).initialCapacity(1).maximumSize(SMALL_MAX_SIZE).expireAfterWrite(99999,SECONDS).removalListener(listener));
  Segment<Object,Object> segment=map.segments[0];
  AtomicReferenceArray<ReferenceEntry<Object,Object>> table=segment.table;
  assertEquals(1,table.length());
  Object keyOne=new Object();
  Object valueOne=new Object();
  int hashOne=map.hash(keyOne);
  DummyEntry<Object,Object> entryOne=createDummyEntry(keyOne,hashOne,valueOne,null);
  Object keyTwo=new Object();
  Object valueTwo=new Object();
  int hashTwo=map.hash(keyTwo);
  DummyEntry<Object,Object> entryTwo=createDummyEntry(keyTwo,hashTwo,valueTwo,entryOne);
  Object keyThree=new Object();
  Object valueThree=new Object();
  int hashThree=map.hash(keyThree);
  DummyEntry<Object,Object> entryThree=createDummyEntry(keyThree,hashThree,valueThree,entryTwo);
  assertEquals(0,listener.getCount());
  assertFalse(segment.reclaimKey(entryOne,hashOne));
  assertEquals(0,listener.getCount());
  table.set(0,entryOne);
  assertFalse(segment.reclaimKey(entryTwo,hashTwo));
  assertEquals(0,listener.getCount());
  table.set(0,entryTwo);
  assertFalse(segment.reclaimKey(entryThree,hashThree));
  assertEquals(0,listener.getCount());
  table.set(0,entryOne);
  segment.count=1;
  assertTrue(segment.reclaimKey(entryOne,hashOne));
  assertEquals(1,listener.getCount());
  assertSame(keyOne,listener.getLastEvictedKey());
  assertSame(valueOne,listener.getLastEvictedValue());
  assertTrue(map.removalNotificationQueue.isEmpty());
  assertFalse(segment.accessQueue.contains(entryOne));
  assertFalse(segment.writeQueue.contains(entryOne));
  assertEquals(0,segment.count);
  assertNull(table.get(0));
}
