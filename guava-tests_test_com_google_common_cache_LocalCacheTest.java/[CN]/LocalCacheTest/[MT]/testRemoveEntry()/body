{
  LocalCache<Object,Object> map=makeMap(createCacheBuilder().concurrencyLevel(1).initialCapacity(1).maximumSize(SMALL_MAX_SIZE).expireAfterWrite(99999,SECONDS).removalListener(countingRemovalListener()));
  Segment<Object,Object> segment=map.segments[0];
  AtomicReferenceArray<ReferenceEntry<Object,Object>> table=segment.table;
  assertEquals(1,table.length());
  Object key=new Object();
  Object value=new Object();
  int hash=map.hash(key);
  DummyEntry<Object,Object> entry=createDummyEntry(key,hash,value,null);
  assertFalse(segment.removeEntry(entry,hash,RemovalCause.COLLECTED));
  segment.recordWrite(entry,1,map.ticker.read());
  table.set(0,entry);
  segment.count=1;
  assertTrue(segment.removeEntry(entry,hash,RemovalCause.COLLECTED));
  assertNotificationEnqueued(map,key,value,hash);
  assertTrue(map.removalNotificationQueue.isEmpty());
  assertFalse(segment.accessQueue.contains(entry));
  assertFalse(segment.writeQueue.contains(entry));
  assertEquals(0,segment.count);
  assertNull(table.get(0));
}
