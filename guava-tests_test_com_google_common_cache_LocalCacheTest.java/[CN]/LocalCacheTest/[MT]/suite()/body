{
  TestSuite suite=new TestSuite();
  suite.addTestSuite(LocalCacheTest.class);
  suite.addTest(ConcurrentMapTestSuiteBuilder.using(new TestStringCacheGenerator(createCacheBuilder())).named("LocalCache with defaults").withFeatures(CollectionSize.ANY,MapFeature.GENERAL_PURPOSE,CollectionFeature.SUPPORTS_ITERATOR_REMOVE).createTestSuite());
  suite.addTest(ConcurrentMapTestSuiteBuilder.using(new TestStringCacheGenerator(createCacheBuilder().concurrencyLevel(1))).named("LocalCache with concurrencyLevel[1]").withFeatures(CollectionSize.ANY,MapFeature.GENERAL_PURPOSE,CollectionFeature.SUPPORTS_ITERATOR_REMOVE).createTestSuite());
  suite.addTest(ConcurrentMapTestSuiteBuilder.using(new TestStringCacheGenerator(createCacheBuilder().maximumSize(Integer.MAX_VALUE))).named("LocalCache with maximumSize").withFeatures(CollectionSize.ANY,MapFeature.GENERAL_PURPOSE,CollectionFeature.SUPPORTS_ITERATOR_REMOVE).createTestSuite());
  suite.addTest(ConcurrentMapTestSuiteBuilder.using(new TestStringCacheGenerator(createCacheBuilder().maximumWeight(Integer.MAX_VALUE).weigher(new SerializableWeigher<String,String>()))).named("LocalCache with maximumWeight").withFeatures(CollectionSize.ANY,MapFeature.GENERAL_PURPOSE,CollectionFeature.SUPPORTS_ITERATOR_REMOVE).createTestSuite());
  suite.addTest(ConcurrentMapTestSuiteBuilder.using(new TestStringCacheGenerator(createCacheBuilder().weakKeys())).named("LocalCache with weakKeys").withFeatures(CollectionSize.ANY,MapFeature.GENERAL_PURPOSE,CollectionFeature.SUPPORTS_ITERATOR_REMOVE).createTestSuite());
  suite.addTest(ConcurrentMapTestSuiteBuilder.using(new TestStringCacheGenerator(createCacheBuilder().weakValues())).named("LocalCache with weakValues").withFeatures(CollectionSize.ANY,MapFeature.GENERAL_PURPOSE,CollectionFeature.SUPPORTS_ITERATOR_REMOVE).createTestSuite());
  suite.addTest(ConcurrentMapTestSuiteBuilder.using(new TestStringCacheGenerator(createCacheBuilder().softValues())).named("LocalCache with softValues").withFeatures(CollectionSize.ANY,MapFeature.GENERAL_PURPOSE,CollectionFeature.SUPPORTS_ITERATOR_REMOVE).createTestSuite());
  suite.addTest(ConcurrentMapTestSuiteBuilder.using(new TestStringCacheGenerator(createCacheBuilder().expireAfterAccess(1,SECONDS).ticker(new SerializableTicker()))).named("LocalCache with expireAfterAccess").withFeatures(CollectionSize.ANY,MapFeature.GENERAL_PURPOSE,CollectionFeature.SUPPORTS_ITERATOR_REMOVE).createTestSuite());
  suite.addTest(ConcurrentMapTestSuiteBuilder.using(new TestStringCacheGenerator(createCacheBuilder().expireAfterWrite(1,SECONDS).ticker(new SerializableTicker()))).named("LocalCache with expireAfterWrite").withFeatures(CollectionSize.ANY,MapFeature.GENERAL_PURPOSE,CollectionFeature.SUPPORTS_ITERATOR_REMOVE).createTestSuite());
  suite.addTest(ConcurrentMapTestSuiteBuilder.using(new TestStringCacheGenerator(createCacheBuilder().removalListener(new SerializableRemovalListener<String,String>()))).named("LocalCache with removalListener").withFeatures(CollectionSize.ANY,MapFeature.GENERAL_PURPOSE,CollectionFeature.SUPPORTS_ITERATOR_REMOVE).createTestSuite());
  suite.addTest(ConcurrentMapTestSuiteBuilder.using(new TestStringCacheGenerator(createCacheBuilder().recordStats())).named("LocalCache with recordStats").withFeatures(CollectionSize.ANY,MapFeature.GENERAL_PURPOSE,CollectionFeature.SUPPORTS_ITERATOR_REMOVE).createTestSuite());
  return suite;
}
