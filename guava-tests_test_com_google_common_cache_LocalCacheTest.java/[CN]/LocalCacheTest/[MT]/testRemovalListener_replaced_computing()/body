{
  final CountDownLatch startSignal=new CountDownLatch(1);
  final CountDownLatch computingSignal=new CountDownLatch(1);
  final CountDownLatch doneSignal=new CountDownLatch(1);
  final Object computedObject=new Object();
  final CacheLoader<Object,Object> loader=new CacheLoader<Object,Object>(){
    @Override public Object load(    Object key) throws Exception {
      computingSignal.countDown();
      startSignal.await();
      return computedObject;
    }
  }
;
  QueuingRemovalListener<Object,Object> listener=queuingRemovalListener();
  CacheBuilder<Object,Object> builder=createCacheBuilder().removalListener(listener);
  final LocalCache<Object,Object> map=makeLocalCache(builder);
  assertTrue(listener.isEmpty());
  final Object one=new Object();
  final Object two=new Object();
  new Thread(){
    @Override public void run(){
      try {
        map.get(one,loader);
      }
 catch (      ExecutionException e) {
        throw new RuntimeException(e);
      }
      doneSignal.countDown();
    }
  }
.start();
  try {
    computingSignal.await();
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
  map.put(one,two);
  assertSame(two,map.get(one));
  startSignal.countDown();
  try {
    doneSignal.await();
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
  map.cleanUp();
  assertNotified(listener,one,computedObject,RemovalCause.REPLACED);
  assertTrue(listener.isEmpty());
}
