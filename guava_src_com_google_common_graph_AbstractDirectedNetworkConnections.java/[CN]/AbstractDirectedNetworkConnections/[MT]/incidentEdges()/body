{
  return new AbstractSet<E>(){
    @Override public UnmodifiableIterator<E> iterator(){
      Iterable<E> incidentEdges=(selfLoopCount == 0) ? Iterables.concat(inEdgeMap.keySet(),outEdgeMap.keySet()) : Sets.union(inEdgeMap.keySet(),outEdgeMap.keySet());
      return Iterators.unmodifiableIterator(incidentEdges.iterator());
    }
    @Override public int size(){
      return IntMath.saturatedAdd(inEdgeMap.size() - selfLoopCount,outEdgeMap.size());
    }
    @Override public boolean contains(    @Nullable Object obj){
      return inEdgeMap.containsKey(obj) || outEdgeMap.containsKey(obj);
    }
  }
;
}
