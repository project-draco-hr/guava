{
  final AtomicReference<ScheduledExecutorService> executor=Atomics.newReference();
  AbstractScheduledService service=new AbstractScheduledService(){
    @Override protected void startUp() throws Exception {
      throw new Exception("Failed");
    }
    @Override protected void runOneIteration() throws Exception {
    }
    @Override protected ScheduledExecutorService executor(){
      executor.set(super.executor());
      return executor.get();
    }
    @Override protected Scheduler scheduler(){
      return newFixedDelaySchedule(0,1,TimeUnit.MILLISECONDS);
    }
  }
;
  try {
    service.startAsync().awaitRunning();
    fail("Expected service to fail during startup");
  }
 catch (  IllegalStateException expected) {
  }
  assertTrue(executor.get().awaitTermination(100,TimeUnit.MILLISECONDS));
}
