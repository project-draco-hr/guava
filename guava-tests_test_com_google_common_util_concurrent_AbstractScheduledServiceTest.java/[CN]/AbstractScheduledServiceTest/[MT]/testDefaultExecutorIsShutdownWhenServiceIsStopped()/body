{
  final CountDownLatch terminationLatch=new CountDownLatch(1);
  AbstractScheduledService service=new AbstractScheduledService(){
    volatile ScheduledExecutorService executorService;
    @Override protected void runOneIteration() throws Exception {
    }
    @Override protected ScheduledExecutorService executor(){
      if (executorService == null) {
        executorService=super.executor();
        addListener(new Listener(){
          @Override public void starting(){
          }
          @Override public void running(){
          }
          @Override public void stopping(          State from){
          }
          @Override public void terminated(          State from){
            terminationLatch.countDown();
          }
          @Override public void failed(          State from,          Throwable failure){
          }
        }
,MoreExecutors.sameThreadExecutor());
      }
      return executorService;
    }
    @Override protected Scheduler scheduler(){
      return Scheduler.newFixedDelaySchedule(0,1,TimeUnit.MILLISECONDS);
    }
  }
;
  service.start();
  assertFalse(service.executor().isShutdown());
  service.startAndWait();
  service.stop();
  terminationLatch.await();
  assertTrue(service.executor().isShutdown());
  assertTrue(service.executor().awaitTermination(100,TimeUnit.MILLISECONDS));
}
