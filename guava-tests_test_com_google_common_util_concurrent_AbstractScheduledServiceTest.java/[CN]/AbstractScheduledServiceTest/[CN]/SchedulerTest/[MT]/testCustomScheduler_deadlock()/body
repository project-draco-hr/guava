{
  final CyclicBarrier inGetNextSchedule=new CyclicBarrier(2);
  for (int i=0; i < 1000; i++) {
    Service service=new AbstractScheduledService(){
      @Override protected void runOneIteration(){
      }
      @Override protected Scheduler scheduler(){
        return new CustomScheduler(){
          @Override protected Schedule getNextSchedule() throws Exception {
            if (state() != State.STARTING) {
              inGetNextSchedule.await();
              Thread.yield();
              throw new RuntimeException("boom");
            }
            return new Schedule(0,TimeUnit.NANOSECONDS);
          }
        }
;
      }
    }
;
    service.startAsync().awaitRunning();
    inGetNextSchedule.await();
    service.stopAsync();
  }
}
