{
  try {
    outer:     while (true) {
      ReferenceEntry<K,V> e=getEntry(key,hash);
      if (e != null) {
        V value=getLiveValue(e);
        if (value != null) {
          recordRead(e);
          statsCounter.recordHit();
          return value;
        }
      }
      if (e == null || !e.getValueReference().isComputingReference()) {
        ComputingValueReference<K,V> computingValueReference=null;
        lock();
        try {
          preWriteCleanup();
          int newCount=this.count - 1;
          AtomicReferenceArray<ReferenceEntry<K,V>> table=this.table;
          int index=hash & (table.length() - 1);
          ReferenceEntry<K,V> first=table.get(index);
          boolean createNewEntry=true;
          for (e=first; e != null; e=e.getNext()) {
            K entryKey=e.getKey();
            if (e.getHash() == hash && entryKey != null && map.keyEquivalence.equivalent(key,entryKey)) {
              ValueReference<K,V> valueReference=e.getValueReference();
              if (valueReference.isComputingReference()) {
                createNewEntry=false;
              }
 else {
                V value=getLiveValue(e);
                if (value != null) {
                  recordLockedRead(e);
                  statsCounter.recordHit();
                  return value;
                }
                enqueueNotification(entryKey,hash,value,RemovalCause.COLLECTED);
                evictionQueue.remove(e);
                expirationQueue.remove(e);
                this.count=newCount;
              }
              break;
            }
          }
          if (createNewEntry) {
            computingValueReference=new ComputingValueReference<K,V>(loader);
            if (e == null) {
              e=map.newEntry(key,hash,first);
              table.set(index,e);
            }
            e.setValueReference(computingValueReference);
          }
        }
  finally {
          unlock();
          postWriteCleanup();
        }
        if (computingValueReference != null) {
          V value=null;
          long start=System.nanoTime();
          long end=0;
          try {
synchronized (e) {
              value=computingValueReference.compute(key,hash);
              end=System.nanoTime();
              statsCounter.recordCreateSuccess(end - start);
            }
            if (value != null) {
              V oldValue=put(key,hash,value,true);
              if (oldValue != null) {
                enqueueNotification(key,hash,value,RemovalCause.REPLACED);
              }
            }
            return value;
          }
  finally {
            if (end == 0) {
              end=System.nanoTime();
              statsCounter.recordCreateException(end - start);
            }
            if (value == null) {
              clearValue(key,hash,computingValueReference);
            }
          }
        }
      }
      checkState(!Thread.holdsLock(e),"Recursive computation");
      V value=e.getValueReference().waitForValue();
      if (value != null) {
        recordRead(e);
        statsCounter.recordConcurrentMiss();
        return value;
      }
      continue outer;
    }
  }
  finally {
    postReadCleanup();
  }
}
