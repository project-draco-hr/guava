{
  final Iterator<Map.Entry<K,Collection<V>>> backingIterator=multimap().asMap().entrySet().iterator();
  return new Iterator<Multiset.Entry<K>>(){
    @Override public boolean hasNext(){
      return backingIterator.hasNext();
    }
    @Override public Multiset.Entry<K> next(){
      final Map.Entry<K,Collection<V>> backingEntry=backingIterator.next();
      return new Multisets.AbstractEntry<K>(){
        @Override public K getElement(){
          return backingEntry.getKey();
        }
        @Override public int getCount(){
          return backingEntry.getValue().size();
        }
      }
;
    }
    @Override public void remove(){
      backingIterator.remove();
    }
  }
;
}
