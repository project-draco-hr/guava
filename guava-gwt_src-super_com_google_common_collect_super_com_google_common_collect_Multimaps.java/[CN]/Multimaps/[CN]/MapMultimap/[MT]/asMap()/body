{
  Map<K,Collection<V>> result=asMap;
  if (result == null) {
    asMap=result=new AsMap<K,V>(){
      @Override Multimap<K,V> multimap(){
        return MapMultimap.this;
      }
      @Override public int size(){
        return map.size();
      }
      @Override Iterator<Map.Entry<K,Collection<V>>> entryIterator(){
        return new TransformedIterator<K,Entry<K,Collection<V>>>(map.keySet().iterator()){
          @Override Entry<K,Collection<V>> transform(          final K key){
            return new AbstractMapEntry<K,Collection<V>>(){
              @Override public K getKey(){
                return key;
              }
              @Override public Collection<V> getValue(){
                return get(key);
              }
            }
;
          }
        }
;
      }
    }
;
  }
  return result;
}
