{
  checkNotNull(value);
  lock();
  try {
    preWriteCleanup();
    int newCount=this.count + 1;
    if (newCount > this.threshold) {
      expand();
      newCount=this.count + 1;
    }
    AtomicReferenceArray<ReferenceEntry<K,V>> table=this.table;
    int index=hash & (table.length() - 1);
    ReferenceEntry<K,V> first=table.get(index);
    for (ReferenceEntry<K,V> e=first; e != null; e=e.getNext()) {
      K entryKey=e.getKey();
      if (e.getHash() == hash && entryKey != null && map.keyEquivalence.equivalent(key,entryKey)) {
        ValueReference<K,V> valueReference=e.getValueReference();
        V entryValue=valueReference.get();
        if (entryValue == null) {
          ++modCount;
          valueReference.notifyValueReclaimed();
          evictEntries();
          newCount=this.count + 1;
          setValue(e,value);
          this.count=newCount;
          return entryValue;
        }
 else         if (onlyIfAbsent) {
          recordLockedRead(e);
          return entryValue;
        }
 else {
          ++modCount;
          enqueueNotification(key,hash,valueReference,RemovalCause.REPLACED);
          setValue(e,value);
          return entryValue;
        }
      }
    }
    if (evictEntries()) {
      newCount=this.count + 1;
      first=table.get(index);
    }
    ++modCount;
    ReferenceEntry<K,V> newEntry=map.newEntry(key,hash,first);
    setValue(newEntry,value);
    table.set(index,newEntry);
    this.count=newCount;
    return null;
  }
  finally {
    unlock();
    postWriteCleanup();
  }
}
