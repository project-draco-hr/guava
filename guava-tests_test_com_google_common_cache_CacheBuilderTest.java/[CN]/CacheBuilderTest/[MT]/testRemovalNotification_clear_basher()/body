{
  AtomicBoolean computationShouldWait=new AtomicBoolean();
  CountDownLatch computationLatch=new CountDownLatch(1);
  QueuingRemovalListener<String,String> listener=queuingRemovalListener();
  final Cache<String,String> cache=CacheBuilder.newBuilder().removalListener(listener).concurrencyLevel(20).build(new DelayingIdentityLoader<String>(computationShouldWait,computationLatch));
  int nThreads=100;
  int nTasks=1000;
  int nSeededEntries=100;
  Set<String> expectedKeys=Sets.newHashSetWithExpectedSize(nTasks + nSeededEntries);
  for (int i=0; i < nSeededEntries; i++) {
    String s="b" + i;
    cache.getUnchecked(s);
    expectedKeys.add(s);
  }
  computationShouldWait.set(true);
  final AtomicInteger computedCount=new AtomicInteger();
  ExecutorService threadPool=Executors.newFixedThreadPool(nThreads);
  final CountDownLatch tasksFinished=new CountDownLatch(nTasks);
  for (int i=0; i < nTasks; i++) {
    final String s="a" + i;
    threadPool.submit(new Runnable(){
      @Override public void run(){
        cache.getUnchecked(s);
        computedCount.incrementAndGet();
        tasksFinished.countDown();
      }
    }
);
    expectedKeys.add(s);
  }
  computationLatch.countDown();
  while (computedCount.get() < nThreads) {
    Thread.yield();
  }
  cache.asMap().clear();
  tasksFinished.await();
  Map<String,String> removalNotifications=Maps.newHashMap();
  for (  RemovalNotification<String,String> notification : listener) {
    removalNotifications.put(notification.getKey(),notification.getValue());
    assertEquals("Unexpected key/value pair passed to removalListener",notification.getKey(),notification.getValue());
  }
  for (int i=0; i < nSeededEntries; i++) {
    assertEquals("b" + i,removalNotifications.get("b" + i));
  }
  assertEquals(expectedKeys,Sets.union(cache.asMap().keySet(),removalNotifications.keySet()));
  assertTrue(Sets.intersection(cache.asMap().keySet(),removalNotifications.keySet()).isEmpty());
}
