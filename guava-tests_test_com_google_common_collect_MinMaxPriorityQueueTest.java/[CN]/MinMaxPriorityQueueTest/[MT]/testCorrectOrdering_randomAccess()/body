{
  long seed=new Random().nextLong();
  Random random=new Random(seed);
  PriorityQueue<Integer> control=new PriorityQueue<Integer>();
  MinMaxPriorityQueue<Integer> q=MinMaxPriorityQueue.create();
  for (int i=0; i < 73; i++) {
    Integer element=random.nextInt();
    control.add(element);
    assertTrue(q.add(element));
  }
  assertTrue("State " + Arrays.toString(q.toArray()),q.isIntact());
  for (int i=0; i < 500000; i++) {
    if (random.nextBoolean()) {
      Integer element=random.nextInt();
      control.add(element);
      q.add(element);
    }
 else {
      assertEquals("Using seed " + seed,control.poll(),q.pollFirst());
    }
  }
  while (!control.isEmpty()) {
    assertEquals("Using seed " + seed,control.poll(),q.pollFirst());
  }
  assertTrue(q.isEmpty());
}
