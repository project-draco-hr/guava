{
  assertTrue(MinMaxPriorityQueue.isEvenLevel(0));
  assertFalse(MinMaxPriorityQueue.isEvenLevel(1));
  assertFalse(MinMaxPriorityQueue.isEvenLevel(2));
  assertTrue(MinMaxPriorityQueue.isEvenLevel(3));
  assertFalse(MinMaxPriorityQueue.isEvenLevel((1 << 10) - 2));
  assertTrue(MinMaxPriorityQueue.isEvenLevel((1 << 10) - 1));
  int i=1 << 29;
  assertTrue(MinMaxPriorityQueue.isEvenLevel(i - 2));
  assertFalse(MinMaxPriorityQueue.isEvenLevel(i - 1));
  assertFalse(MinMaxPriorityQueue.isEvenLevel(i));
  i=1 << 30;
  assertFalse(MinMaxPriorityQueue.isEvenLevel(i - 2));
  assertTrue(MinMaxPriorityQueue.isEvenLevel(i - 1));
  assertTrue(MinMaxPriorityQueue.isEvenLevel(i));
  assertTrue(MinMaxPriorityQueue.isEvenLevel((1 << 31) - 2));
  assertTrue(MinMaxPriorityQueue.isEvenLevel(Integer.MAX_VALUE - 1));
  try {
    MinMaxPriorityQueue.isEvenLevel((1 << 31) - 1);
    fail("Should overflow");
  }
 catch (  IllegalStateException e) {
  }
  try {
    MinMaxPriorityQueue.isEvenLevel(Integer.MAX_VALUE);
    fail("Should overflow");
  }
 catch (  IllegalStateException e) {
  }
  try {
    MinMaxPriorityQueue.isEvenLevel(1 << 31);
    fail("Should be negative");
  }
 catch (  IllegalStateException e) {
  }
  try {
    MinMaxPriorityQueue.isEvenLevel(Integer.MIN_VALUE);
    fail("Should be negative");
  }
 catch (  IllegalStateException e) {
  }
}
