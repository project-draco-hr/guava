{
  MinMaxPriorityQueue<Integer> mmHeap=MinMaxPriorityQueue.create();
  mmHeap.addAll(Lists.newArrayList(1,20,1000,2,3,30,40,10,11,12,13,200,300,500,400));
  assertTrue("Heap is not intact initially",mmHeap.isIntact());
  Iterator<Integer> it=mmHeap.iterator();
  assertEquals((Integer)1,it.next());
  assertEquals((Integer)20,it.next());
  assertEquals((Integer)1000,it.next());
  assertEquals((Integer)2,it.next());
  it.remove();
  assertTrue("Heap is not intact after remove",mmHeap.isIntact());
  assertEquals((Integer)10,it.next());
  assertEquals((Integer)3,it.next());
  it.remove();
  assertTrue("Heap is not intact after remove",mmHeap.isIntact());
  assertEquals((Integer)12,it.next());
  assertEquals((Integer)30,it.next());
  assertEquals((Integer)40,it.next());
  assertEquals((Integer)11,it.next());
  assertEquals((Integer)13,it.next());
  assertEquals((Integer)200,it.next());
  assertEquals((Integer)300,it.next());
  assertEquals((Integer)400,it.next());
  assertEquals((Integer)500,it.next());
}
