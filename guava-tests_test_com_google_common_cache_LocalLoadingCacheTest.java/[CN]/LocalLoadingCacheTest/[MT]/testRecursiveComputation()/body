{
  final AtomicReference<LoadingCache<Integer,String>> cacheRef=new AtomicReference<LoadingCache<Integer,String>>();
  CacheLoader<Integer,String> recursiveLoader=new CacheLoader<Integer,String>(){
    @Override public String load(    Integer key){
      if (key > 0) {
        return key + ", " + cacheRef.get().getUnchecked(key - 1);
      }
 else {
        return "0";
      }
    }
  }
;
  LoadingCache<Integer,String> recursiveCache=new CacheBuilder<Integer,String>().weakKeys().weakValues().build(recursiveLoader);
  cacheRef.set(recursiveCache);
  assertEquals("3, 2, 1, 0",recursiveCache.getUnchecked(3));
  recursiveLoader=new CacheLoader<Integer,String>(){
    @Override public String load(    Integer key){
      return cacheRef.get().getUnchecked(key);
    }
  }
;
  recursiveCache=new CacheBuilder<Integer,String>().weakKeys().weakValues().build(recursiveLoader);
  cacheRef.set(recursiveCache);
  final CountDownLatch doneSignal=new CountDownLatch(1);
  Thread thread=new Thread(){
    @Override public void run(){
      try {
        cacheRef.get().getUnchecked(3);
      }
  finally {
        doneSignal.countDown();
      }
    }
  }
;
  thread.setUncaughtExceptionHandler(new UncaughtExceptionHandler(){
    @Override public void uncaughtException(    Thread t,    Throwable e){
    }
  }
);
  thread.start();
  boolean done=doneSignal.await(1,TimeUnit.SECONDS);
  if (!done) {
    StringBuilder builder=new StringBuilder();
    for (    StackTraceElement trace : thread.getStackTrace()) {
      builder.append("\tat ").append(trace).append('\n');
    }
    fail(builder.toString());
  }
}
