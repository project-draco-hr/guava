{
  checkCanCreate();
  String name=getName();
  Set<Feature<?>> features=Helpers.copyToSet(getFeatures());
  List<Class<? extends AbstractTester>> testers=getTesters();
  logger.fine(" Testing: " + name);
  Set<Feature<?>> sizesToTest=Helpers.<Feature<?>>copyToSet(CollectionSize.values());
  sizesToTest.retainAll(features);
  features.removeAll(sizesToTest);
  FeatureUtil.addImpliedFeatures(sizesToTest);
  sizesToTest.retainAll(Arrays.asList(CollectionSize.ZERO,CollectionSize.ONE,CollectionSize.SEVERAL));
  logger.fine("   Sizes: " + formatFeatureSet(sizesToTest));
  if (sizesToTest.isEmpty()) {
    throw new IllegalStateException(name + ": no CollectionSizes specified (check the argument to " + "FeatureSpecificTestSuiteBuilder.withFeatures().)");
  }
  TestSuite suite=new TestSuite(name);
  for (  Feature<?> collectionSize : sizesToTest) {
    String oneSizeName=Platform.format("%s [collection size: %s]",name,collectionSize.toString().toLowerCase());
    OneSizeGenerator<T,E> oneSizeGenerator=new OneSizeGenerator<T,E>(getSubjectGenerator(),(CollectionSize)collectionSize);
    Set<Feature<?>> oneSizeFeatures=Helpers.copyToSet(features);
    oneSizeFeatures.add(collectionSize);
    Set<Method> oneSizeSuppressedTests=getSuppressedTests();
    OneSizeTestSuiteBuilder<T,E> oneSizeBuilder=new OneSizeTestSuiteBuilder<T,E>(testers).named(oneSizeName).usingGenerator(oneSizeGenerator).withFeatures(oneSizeFeatures).withSetUp(getSetUp()).withTearDown(getTearDown()).suppressing(oneSizeSuppressedTests);
    TestSuite oneSizeSuite=oneSizeBuilder.createTestSuite();
    suite.addTest(oneSizeSuite);
    for (    TestSuite derivedSuite : createDerivedSuites(oneSizeBuilder)) {
      oneSizeSuite.addTest(derivedSuite);
    }
  }
  return suite;
}
