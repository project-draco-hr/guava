{
  final AtomicReferenceArray<Object> result=new AtomicReferenceArray<Object>(nThreads);
  final CountDownLatch gettersComplete=new CountDownLatch(nThreads);
  for (int i=0; i < nThreads; i++) {
    final int index=i;
    Thread thread=new Thread(new Runnable(){
      @Override public void run(){
        gettersStartedSignal.countDown();
        Object value=null;
        try {
          if (index % 2 == 0) {
            value=cache.getUnchecked(key);
          }
 else {
            value=cache.get(key);
          }
          result.set(index,value);
        }
 catch (        Throwable t) {
          result.set(index,t);
        }
        gettersComplete.countDown();
      }
    }
);
    thread.start();
    while (thread.isAlive() && thread.getState() != Thread.State.WAITING) {
      Thread.yield();
    }
  }
  gettersStartedSignal.countDown();
  gettersComplete.await();
  List<Object> resultList=Lists.newArrayListWithExpectedSize(nThreads);
  for (int i=0; i < nThreads; i++) {
    resultList.add(result.get(i));
  }
  return resultList;
}
