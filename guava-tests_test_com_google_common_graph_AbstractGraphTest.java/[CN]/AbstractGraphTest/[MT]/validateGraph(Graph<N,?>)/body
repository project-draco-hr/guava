{
  if (graph instanceof BasicGraph) {
    @SuppressWarnings("unchecked") BasicGraph<N> basicGraph=(BasicGraph<N>)graph;
    new EqualsTester().addEqualityGroup(basicGraph,Graphs.copyOf(basicGraph),ImmutableBasicGraph.copyOf(basicGraph)).testEquals();
  }
  String graphString=graph.toString();
  assertThat(graphString).contains("isDirected: " + graph.isDirected());
  assertThat(graphString).contains("allowsSelfLoops: " + graph.allowsSelfLoops());
  int nodeStart=graphString.indexOf("nodes:");
  int edgeStart=graphString.indexOf("edges:");
  String nodeString=graphString.substring(nodeStart,edgeStart);
  sanityCheckCollection(graph.nodes());
  sanityCheckCollection(graph.edges());
  Set<Endpoints<N>> allEndpoints=new HashSet<Endpoints<N>>();
  for (  N node : graph.nodes()) {
    assertThat(nodeString).contains(node.toString());
    sanityCheckCollection(graph.adjacentNodes(node));
    sanityCheckCollection(graph.predecessors(node));
    sanityCheckCollection(graph.successors(node));
    for (    N adjacentNode : graph.adjacentNodes(node)) {
      assertThat(graph.predecessors(node).contains(adjacentNode) || graph.successors(node).contains(adjacentNode)).isTrue();
    }
    for (    N predecessor : graph.predecessors(node)) {
      assertThat(graph.successors(predecessor)).contains(node);
    }
    for (    N successor : graph.successors(node)) {
      allEndpoints.add(Endpoints.of(graph,node,successor));
      assertThat(graph.predecessors(successor)).contains(node);
    }
  }
  assertThat(graph.edges()).isEqualTo(allEndpoints);
}
