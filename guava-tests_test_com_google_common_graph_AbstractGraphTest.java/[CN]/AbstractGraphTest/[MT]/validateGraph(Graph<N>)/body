{
  assertStronglyEquivalent(graph,Graphs.copyOf(graph));
  assertStronglyEquivalent(graph,ImmutableGraph.copyOf(graph));
  String graphString=graph.toString();
  assertThat(graphString).contains("isDirected: " + graph.isDirected());
  assertThat(graphString).contains("allowsSelfLoops: " + graph.allowsSelfLoops());
  int nodeStart=graphString.indexOf("nodes:");
  int edgeStart=graphString.indexOf("edges:");
  String nodeString=graphString.substring(nodeStart,edgeStart);
  Set<EndpointPair<N>> allEndpointPairs=new HashSet<EndpointPair<N>>();
  for (  N node : sanityCheckSet(graph.nodes())) {
    assertThat(nodeString).contains(node.toString());
    if (graph.isDirected()) {
      assertThat(graph.degree(node)).isEqualTo(graph.inDegree(node) + graph.outDegree(node));
      assertThat(graph.predecessors(node)).hasSize(graph.inDegree(node));
      assertThat(graph.successors(node)).hasSize(graph.outDegree(node));
    }
 else {
      int selfLoopCount=graph.adjacentNodes(node).contains(node) ? 1 : 0;
      assertThat(graph.degree(node)).isEqualTo(graph.adjacentNodes(node).size() + selfLoopCount);
      assertThat(graph.predecessors(node)).isEqualTo(graph.adjacentNodes(node));
      assertThat(graph.successors(node)).isEqualTo(graph.adjacentNodes(node));
      assertThat(graph.inDegree(node)).isEqualTo(graph.degree(node));
      assertThat(graph.outDegree(node)).isEqualTo(graph.degree(node));
    }
    for (    N adjacentNode : sanityCheckSet(graph.adjacentNodes(node))) {
      if (!graph.allowsSelfLoops()) {
        assertThat(node).isNotEqualTo(adjacentNode);
      }
      assertThat(graph.predecessors(node).contains(adjacentNode) || graph.successors(node).contains(adjacentNode)).isTrue();
    }
    for (    N predecessor : sanityCheckSet(graph.predecessors(node))) {
      assertThat(graph.successors(predecessor)).contains(node);
    }
    for (    N successor : sanityCheckSet(graph.successors(node))) {
      allEndpointPairs.add(EndpointPair.of(graph,node,successor));
      assertThat(graph.predecessors(successor)).contains(node);
    }
  }
  sanityCheckSet(graph.edges());
  assertThat(graph.edges()).doesNotContain(EndpointPair.of(graph,new Object(),new Object()));
  assertThat(graph.edges()).isEqualTo(allEndpointPairs);
}
