{
  checkNotNull(edge,"edge");
  IncidentNodes<N> incidentNodes=edgeToIncidentNodes.get(edge);
  if (incidentNodes == null) {
    return false;
  }
  N node1=incidentNodes.node1();
  N node2=incidentNodes.node2();
  NodeConnections<N,E> node1Connections=nodeConnections.get(node1);
  NodeConnections<N,E> node2Connections=nodeConnections.get(node2);
  if (!config.isMultigraph() || edgesConnecting(node1,node2).size() <= 1) {
    node1Connections.removeSuccessor(node2);
    node2Connections.removePredecessor(node1);
  }
  node1Connections.removeOutEdge(edge);
  node2Connections.removeInEdge(edge);
  edgeToIncidentNodes.remove(edge);
  return true;
}
