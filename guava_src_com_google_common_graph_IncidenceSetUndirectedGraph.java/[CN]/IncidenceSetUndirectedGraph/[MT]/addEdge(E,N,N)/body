{
  checkNotNull(edge,"edge");
  checkNotNull(node1,"node1");
  checkNotNull(node2,"node2");
  IncidentNodes<N> incidentNodes=IncidentNodes.of(node1,node2);
  checkArgument(config.isSelfLoopsAllowed() || !incidentNodes.isSelfLoop(),SELF_LOOPS_NOT_ALLOWED,node1);
  IncidentNodes<N> previousIncidentNodes=edgeToIncidentNodes.get(edge);
  if (previousIncidentNodes != null) {
    checkArgument(previousIncidentNodes.equals(incidentNodes),REUSING_EDGE,edge,previousIncidentNodes,incidentNodes);
    return false;
  }
 else   if (!config.isMultigraph()) {
    checkArgument(!(nodes().contains(node1) && successors(node1).contains(node2)),ADDING_PARALLEL_EDGE,node1,node2);
  }
  addNode(node1);
  NodeConnections<N,E> connectionsN1=nodeConnections.get(node1);
  connectionsN1.addSuccessor(node2,edge);
  if (!incidentNodes.isSelfLoop()) {
    addNode(node2);
    NodeConnections<N,E> connectionsN2=nodeConnections.get(node2);
    connectionsN2.addPredecessor(node1,edge);
  }
  edgeToIncidentNodes.put(edge,incidentNodes);
  return true;
}
