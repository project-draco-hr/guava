{
  assertThat(EMPTY_STATS_VARARGS.sum()).isEqualTo(0.0);
  assertThat(EMPTY_STATS_ITERABLE.sum()).isEqualTo(0.0);
  assertThat(ONE_VALUE_STATS.sum()).isWithin(ALLOWED_ERROR).of(ONE_VALUE);
  assertThat(TWO_VALUES_STATS.sum()).isWithin(ALLOWED_ERROR).of(TWO_VALUES_MEAN * 2);
  assertThat(MANY_VALUES_STATS_VARARGS.sum()).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MEAN * MANY_VALUES_COUNT);
  assertThat(MANY_VALUES_STATS_ITERABLE.sum()).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MEAN * MANY_VALUES_COUNT);
  assertThat(MANY_VALUES_STATS_ITERATOR.sum()).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MEAN * MANY_VALUES_COUNT);
  assertThat(MANY_VALUES_STATS_SNAPSHOT.sum()).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MEAN * MANY_VALUES_COUNT);
  assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.sum()).isWithin(ALLOWED_ERROR).of(INTEGER_MANY_VALUES_MEAN * INTEGER_MANY_VALUES_COUNT);
  assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.sum()).isWithin(ALLOWED_ERROR).of(INTEGER_MANY_VALUES_MEAN * INTEGER_MANY_VALUES_COUNT);
  assertThat(LONG_MANY_VALUES_STATS_ITERATOR.sum()).isWithin(ALLOWED_ERROR).of(LONG_MANY_VALUES_MEAN * LONG_MANY_VALUES_COUNT);
  assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.sum()).isWithin(ALLOWED_ERROR).of(LONG_MANY_VALUES_MEAN * LONG_MANY_VALUES_COUNT);
}
