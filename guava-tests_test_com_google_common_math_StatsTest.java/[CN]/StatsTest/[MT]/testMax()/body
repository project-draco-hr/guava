{
  try {
    EMPTY_STATS_VARARGS.max();
    fail("Expected IllegalStateException");
  }
 catch (  IllegalStateException expected) {
  }
  try {
    EMPTY_STATS_ITERABLE.max();
    fail("Expected IllegalStateException");
  }
 catch (  IllegalStateException expected) {
  }
  assertThat(ONE_VALUE_STATS.max()).isWithin(ALLOWED_ERROR).of(ONE_VALUE);
  assertThat(Stats.of(POSITIVE_INFINITY).max()).isPositiveInfinity();
  assertThat(Stats.of(NEGATIVE_INFINITY).max()).isNegativeInfinity();
  assertThat(Stats.of(NaN).max()).isNaN();
  assertThat(TWO_VALUES_STATS.max()).isWithin(ALLOWED_ERROR).of(TWO_VALUES_MAX);
  assertThat(MANY_VALUES_STATS_VARARGS.max()).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MAX);
  assertThat(MANY_VALUES_STATS_ITERABLE.max()).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MAX);
  for (  ManyValues values : ALL_MANY_VALUES) {
    double max=Stats.of(values.asIterable().iterator()).max();
    if (values.hasAnyNaN()) {
      assertThat(max).named("max of " + values).isNaN();
    }
 else     if (values.hasAnyPositiveInfinity()) {
      assertThat(max).named("max of " + values).isPositiveInfinity();
    }
 else {
      assertThat(max).named("max of " + values).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MAX);
    }
  }
  assertThat(MANY_VALUES_STATS_SNAPSHOT.max()).isWithin(ALLOWED_ERROR).of(MANY_VALUES_MAX);
  assertThat(INTEGER_MANY_VALUES_STATS_VARARGS.max()).isWithin(ALLOWED_ERROR).of(INTEGER_MANY_VALUES_MAX);
  assertThat(INTEGER_MANY_VALUES_STATS_ITERABLE.max()).isWithin(ALLOWED_ERROR).of(INTEGER_MANY_VALUES_MAX);
  assertThat(LONG_MANY_VALUES_STATS_ITERATOR.max()).isWithin(ALLOWED_ERROR).of(LONG_MANY_VALUES_MAX);
  assertThat(LONG_MANY_VALUES_STATS_SNAPSHOT.max()).isWithin(ALLOWED_ERROR).of(LONG_MANY_VALUES_MAX);
}
