{
  CustomConcurrentHashMap<Object,Object> map=makeMap(createMapMaker().concurrencyLevel(1));
  Segment<Object,Object> segment=map.segments[0];
  Object keyOne=new Object();
  Object valueOne=new Object();
  int hashOne=map.hash(keyOne);
  DummyEntry<Object,Object> entryOne=createDummyEntry(keyOne,hashOne,valueOne,null);
  Object keyTwo=new Object();
  Object valueTwo=new Object();
  int hashTwo=map.hash(keyTwo);
  DummyEntry<Object,Object> entryTwo=createDummyEntry(keyTwo,hashTwo,valueTwo,entryOne);
  Object keyThree=new Object();
  Object valueThree=new Object();
  int hashThree=map.hash(keyThree);
  DummyEntry<Object,Object> entryThree=createDummyEntry(keyThree,hashThree,valueThree,entryTwo);
  assertNull(segment.removeFromChain(entryOne,entryOne));
  assertSame(entryOne,segment.removeFromChain(entryTwo,entryTwo));
  ReferenceEntry<Object,Object> newFirst=segment.removeFromChain(entryThree,entryTwo);
  assertSame(keyThree,newFirst.getKey());
  assertSame(valueThree,newFirst.getValueReference().get());
  assertEquals(hashThree,newFirst.getHash());
  assertSame(entryOne,newFirst.getNext());
  newFirst=segment.removeFromChain(entryThree,entryOne);
  assertSame(keyTwo,newFirst.getKey());
  assertSame(valueTwo,newFirst.getValueReference().get());
  assertEquals(hashTwo,newFirst.getHash());
  newFirst=newFirst.getNext();
  assertSame(keyThree,newFirst.getKey());
  assertSame(valueThree,newFirst.getValueReference().get());
  assertEquals(hashThree,newFirst.getHash());
  assertNull(newFirst.getNext());
}
