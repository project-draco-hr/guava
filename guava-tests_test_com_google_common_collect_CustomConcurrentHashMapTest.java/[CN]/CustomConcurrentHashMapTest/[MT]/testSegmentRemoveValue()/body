{
  CustomConcurrentHashMap<Object,Object> map=makeMap(createMapMaker().concurrencyLevel(1));
  Segment<Object,Object> segment=map.segments[0];
  Object key=new Object();
  int hash=map.hash(key);
  Object oldValue=new Object();
  Object newValue=new Object();
  AtomicReferenceArray<ReferenceEntry<Object,Object>> table=segment.table;
  int index=hash & (table.length() - 1);
  DummyEntry<Object,Object> entry=DummyEntry.create(key,hash,null);
  DummyValueReference<Object,Object> oldValueRef=DummyValueReference.create(oldValue,entry);
  entry.setValueReference(oldValueRef);
  assertEquals(0,segment.count);
  assertNull(segment.remove(key,hash));
  assertEquals(0,segment.count);
  table.set(index,entry);
  segment.count++;
  assertEquals(1,segment.count);
  assertSame(oldValue,segment.get(key,hash));
  assertTrue(segment.remove(key,hash,oldValue));
  assertEquals(0,segment.count);
  assertNull(segment.get(key,hash));
  table.set(index,entry);
  segment.count++;
  assertEquals(1,segment.count);
  assertSame(oldValue,segment.get(key,hash));
  assertFalse(segment.remove(key,hash,newValue));
  assertEquals(1,segment.count);
  assertSame(oldValue,segment.get(key,hash));
  assertSame(oldValue,segment.get(key,hash));
  oldValueRef.clear(null);
  assertFalse(segment.remove(key,hash,oldValue));
  assertEquals(0,segment.count);
  assertNull(segment.get(key,hash));
}
