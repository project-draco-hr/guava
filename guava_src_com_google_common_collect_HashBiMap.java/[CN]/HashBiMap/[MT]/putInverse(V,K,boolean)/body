{
  int smearedValueHash=Hashing.smearedHash(value);
  int smearedKeyHash=Hashing.smearedHash(key);
  BiEntry<K,V> oldEntryForValue=seekByValue(value,smearedValueHash);
  if (oldEntryForValue != null && oldEntryForValue.matchesKey(key,smearedKeyHash)) {
    return key;
  }
  BiEntry<K,V> oldEntryForKey=seekByKey(key,smearedKeyHash);
  if (oldEntryForKey != null) {
    if (force) {
      delete(oldEntryForKey);
    }
 else {
      throw new IllegalArgumentException("value already present: " + key);
    }
  }
  if (oldEntryForValue != null) {
    delete(oldEntryForValue);
  }
  BiEntry<K,V> newEntry=new BiEntry<K,V>(key,smearedKeyHash,value,smearedValueHash);
  insert(newEntry);
  rehashIfNecessary();
  return keyOrNull(oldEntryForValue);
}
