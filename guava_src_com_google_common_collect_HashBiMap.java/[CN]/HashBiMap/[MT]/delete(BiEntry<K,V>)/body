{
  int keyBucket=entry.smearedKeyHash & mask;
  BiEntry<K,V> prevBucketEntry=null;
  for (BiEntry<K,V> bucketEntry=hashTableKToV[keyBucket]; true; bucketEntry=bucketEntry.nextInKeyBucket) {
    if (bucketEntry == entry) {
      if (prevBucketEntry == null) {
        hashTableKToV[keyBucket]=entry.nextInKeyBucket;
      }
 else {
        prevBucketEntry.nextInKeyBucket=entry.nextInKeyBucket;
      }
      break;
    }
    prevBucketEntry=bucketEntry;
  }
  int valueBucket=entry.smearedValueHash & mask;
  prevBucketEntry=null;
  for (BiEntry<K,V> bucketEntry=hashTableVToK[valueBucket]; true; bucketEntry=bucketEntry.nextInValueBucket) {
    if (bucketEntry == entry) {
      if (prevBucketEntry == null) {
        hashTableVToK[valueBucket]=entry.nextInValueBucket;
      }
 else {
        prevBucketEntry.nextInValueBucket=entry.nextInValueBucket;
      }
      break;
    }
    prevBucketEntry=bucketEntry;
  }
  size--;
  modCount++;
}
