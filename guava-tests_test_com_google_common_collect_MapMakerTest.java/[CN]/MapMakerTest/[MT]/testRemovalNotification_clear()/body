{
  final CountDownLatch computingLatch=new CountDownLatch(1);
  Function<String,String> computingFunction=new DelayingIdentityLoader<String>(computingLatch);
  @SuppressWarnings("deprecation") final ConcurrentMap<String,String> map=new MapMaker().concurrencyLevel(1).makeComputingMap(computingFunction);
  map.put("a","a");
  final CountDownLatch computationStarted=new CountDownLatch(1);
  final CountDownLatch computationComplete=new CountDownLatch(1);
  new Thread(new Runnable(){
    @Override public void run(){
      computationStarted.countDown();
      map.get("b");
      computationComplete.countDown();
    }
  }
).start();
  computationStarted.await();
  map.clear();
  computingLatch.countDown();
  computationComplete.await();
  assertEquals(1,map.size());
  assertEquals("b",map.get("b"));
}
