{
  TestSuite suite=new TestSuite("FilterSortedMap");
  suite.addTest(SortedMapTestSuiteBuilder.using(new TestStringSortedMapGenerator(){
    @Override protected SortedMap<String,String> create(    Entry<String,String>[] entries){
      SortedMap<String,String> map=new NonNavigableSortedMap();
      putEntries(map,entries);
      map.putAll(ENTRIES_TO_FILTER);
      return Maps.filterKeys(map,FILTER_KEYS);
    }
  }
).named("Maps.filterKeys[SortedMap, Predicate]").withFeatures(MapFeature.ALLOWS_NULL_VALUES,MapFeature.GENERAL_PURPOSE,CollectionSize.ANY).createTestSuite());
  suite.addTest(SortedMapTestSuiteBuilder.using(new TestStringSortedMapGenerator(){
    @Override protected SortedMap<String,String> create(    Entry<String,String>[] entries){
      SortedMap<String,String> map=new NonNavigableSortedMap();
      putEntries(map,entries);
      map.putAll(ENTRIES_TO_FILTER);
      return Maps.filterValues(map,FILTER_VALUES);
    }
  }
).named("Maps.filterValues[SortedMap, Predicate]").withFeatures(MapFeature.ALLOWS_NULL_VALUES,MapFeature.GENERAL_PURPOSE,CollectionSize.ANY).createTestSuite());
  suite.addTest(SortedMapTestSuiteBuilder.using(new TestStringSortedMapGenerator(){
    @Override protected SortedMap<String,String> create(    Entry<String,String>[] entries){
      SortedMap<String,String> map=new NonNavigableSortedMap();
      putEntries(map,entries);
      map.putAll(ENTRIES_TO_FILTER);
      return Maps.filterEntries(map,FILTER_ENTRIES);
    }
  }
).named("Maps.filterEntries[SortedMap, Predicate]").withFeatures(MapFeature.ALLOWS_NULL_VALUES,MapFeature.GENERAL_PURPOSE,CollectionSize.ANY).createTestSuite());
  return suite;
}
