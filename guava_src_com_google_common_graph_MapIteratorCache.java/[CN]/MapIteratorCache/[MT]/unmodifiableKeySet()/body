{
  return new AbstractSet<K>(){
    @Override public Iterator<K> iterator(){
      final Iterator<Entry<K,V>> entryIterator=backingMap.entrySet().iterator();
      return new UnmodifiableIterator<K>(){
        @Override public boolean hasNext(){
          return entryIterator.hasNext();
        }
        @Override public K next(){
          Entry<K,V> entry=entryIterator.next();
          entrySetCache=entry;
          return entry.getKey();
        }
      }
;
    }
    @Override public int size(){
      return backingMap.size();
    }
    @Override public boolean contains(    @Nullable Object key){
      return containsKey(key);
    }
  }
;
}
