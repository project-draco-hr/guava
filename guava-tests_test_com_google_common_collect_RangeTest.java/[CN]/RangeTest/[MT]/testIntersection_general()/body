{
  Range<Integer> range=Range.closed(4,8);
  try {
    range.intersection(Range.closed(0,2));
    fail();
  }
 catch (  IllegalArgumentException expected) {
  }
  assertEquals(Range.closedOpen(4,4),range.intersection(Range.closedOpen(2,4)));
  assertEquals(Range.closed(4,6),range.intersection(Range.closed(2,6)));
  assertEquals(Range.closed(4,6),range.intersection(Range.closed(4,6)));
  assertEquals(Range.closed(5,7),range.intersection(Range.closed(5,7)));
  assertEquals(Range.closed(6,8),range.intersection(Range.closed(6,8)));
  assertEquals(range,range.intersection(range));
  assertEquals(range,range.intersection(Range.closed(4,10)));
  assertEquals(range,range.intersection(Range.closed(2,8)));
  assertEquals(range,range.intersection(Range.closed(2,10)));
  assertEquals(Range.closed(6,8),range.intersection(Range.closed(6,10)));
  assertEquals(Range.openClosed(8,8),range.intersection(Range.openClosed(8,10)));
  try {
    range.intersection(Range.closed(10,12));
    fail();
  }
 catch (  IllegalArgumentException expected) {
  }
}
