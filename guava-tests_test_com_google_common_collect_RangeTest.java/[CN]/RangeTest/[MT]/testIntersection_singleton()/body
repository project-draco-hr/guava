{
  Range<Integer> range=Range.closed(3,3);
  assertEquals(range,range.intersection(range));
  assertEquals(range,range.intersection(Range.atMost(4)));
  assertEquals(range,range.intersection(Range.atMost(3)));
  assertEquals(range,range.intersection(Range.atLeast(3)));
  assertEquals(range,range.intersection(Range.atLeast(2)));
  assertEquals(Range.closedOpen(3,3),range.intersection(Range.lessThan(3)));
  assertEquals(Range.openClosed(3,3),range.intersection(Range.greaterThan(3)));
  try {
    range.intersection(Range.atLeast(4));
    fail();
  }
 catch (  IllegalArgumentException expected) {
  }
  try {
    range.intersection(Range.atMost(2));
    fail();
  }
 catch (  IllegalArgumentException expected) {
  }
}
