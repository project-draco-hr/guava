{
  if (cls.isEnum()) {
    Object[] constants=cls.getEnumConstants();
    if (constants.length > 0) {
      return constants[0];
    }
 else {
      return null;
    }
  }
  TypeToken<?> type=TypeToken.of(cls);
  List<AssertionFailedError> errors=Lists.newArrayList();
  List<InvocationTargetException> instantiationExceptions=Lists.newArrayList();
  for (  Invokable<?,?> factory : getFactories(type)) {
    List<Object> args;
    try {
      args=getDummyArguments(factory,errorReporter);
    }
 catch (    AssertionFailedError e) {
      errors.add(e);
      continue;
    }
    Object instance;
    try {
      instance=factory.invoke(null,args.toArray());
    }
 catch (    InvocationTargetException e) {
      instantiationExceptions.add(e);
      continue;
    }
    try {
      assertNotNull(factory + " returns null and cannot be used to test instance methods.",instance);
      return instance;
    }
 catch (    AssertionFailedError e) {
      errors.add(e);
    }
  }
  if (!errors.isEmpty()) {
    throw errors.get(0);
  }
  if (!instantiationExceptions.isEmpty()) {
    throw instantiationExceptions.get(0);
  }
  return null;
}
