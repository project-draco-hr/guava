{
  HashMap<Integer,Integer> utf8Lengths=new HashMap<Integer,Integer>();
  utf8Lengths.put(0x00,1);
  utf8Lengths.put(0x7f,1);
  utf8Lengths.put(0x80,2);
  utf8Lengths.put(0x7ff,2);
  utf8Lengths.put(0x800,3);
  utf8Lengths.put(MIN_SUPPLEMENTARY_CODE_POINT - 1,3);
  utf8Lengths.put(MIN_SUPPLEMENTARY_CODE_POINT,4);
  utf8Lengths.put(MAX_CODE_POINT,4);
  Integer[] codePoints=utf8Lengths.keySet().toArray(new Integer[]{});
  StringBuilder sb=new StringBuilder();
  Random rnd=new Random();
  for (int trial=0; trial < 100; trial++) {
    sb.setLength(0);
    int utf8Length=0;
    for (int i=0; i < 6; i++) {
      Integer randomCodePoint=codePoints[rnd.nextInt(codePoints.length)];
      sb.appendCodePoint(randomCodePoint);
      utf8Length+=utf8Lengths.get(randomCodePoint);
      if (utf8Length != Utf8.encodedLength(sb)) {
        StringBuilder repro=new StringBuilder();
        for (int j=0; j < sb.length(); j++) {
          repro.append(" " + (int)sb.charAt(j));
        }
        assertEquals(repro.toString(),utf8Length,Utf8.encodedLength(sb));
      }
    }
  }
}
