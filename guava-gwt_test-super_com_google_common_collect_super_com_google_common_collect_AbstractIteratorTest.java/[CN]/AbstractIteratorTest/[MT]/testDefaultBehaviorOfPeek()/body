{
  AbstractIterator<Integer> iter=new AbstractIterator<Integer>(){
    private int rep;
    @Override public Integer computeNext(){
switch (rep++) {
case 0:
        return 0;
case 1:
      return 1;
case 2:
    return endOfData();
default :
  fail("Should not have been invoked again");
return null;
}
}
}
;
assertEquals(0,(int)iter.peek());
assertEquals(0,(int)iter.peek());
assertTrue(iter.hasNext());
assertEquals(0,(int)iter.peek());
assertEquals(0,(int)iter.next());
assertEquals(1,(int)iter.peek());
assertEquals(1,(int)iter.next());
try {
iter.peek();
fail("peek() should throw NoSuchElementException at end");
}
 catch (NoSuchElementException expected) {
}
try {
iter.peek();
fail("peek() should continue to throw NoSuchElementException at end");
}
 catch (NoSuchElementException expected) {
}
try {
iter.next();
fail("next() should throw NoSuchElementException as usual");
}
 catch (NoSuchElementException expected) {
}
try {
iter.peek();
fail("peek() should still throw NoSuchElementException after next()");
}
 catch (NoSuchElementException expected) {
}
}
