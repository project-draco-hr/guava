{
  this.alphabet=checkNotNull(alphabet);
  try {
    this.bitsPerChar=log2(alphabet.length(),UNNECESSARY);
  }
 catch (  ArithmeticException e) {
    throw new IllegalArgumentException("Illegal alphabet length " + alphabet.length(),e);
  }
  int gcd=Math.min(8,Integer.lowestOneBit(bitsPerChar));
  this.charsPerChunk=8 / gcd;
  this.bytesPerChunk=bitsPerChar / gcd;
  this.alphabetMask=alphabet.length() - 1;
  this.paddingChar=paddingChar;
  checkArgument(paddingChar == null || alphabet.indexOf(paddingChar.charValue()) == -1,"Padding character must not appear in alphabet");
  byte[] decodabet=new byte[128];
  Arrays.fill(decodabet,(byte)-1);
  for (int i=0; i < alphabet.length(); i++) {
    char c=alphabet.charAt(i);
    decodabet[c]=(byte)i;
  }
  this.decodabet=decodabet;
  boolean[] validPadding=new boolean[charsPerChunk];
  for (int i=0; i < bytesPerChunk; i++) {
    int chars=divide(i * 8,bitsPerChar,CEILING);
    validPadding[chars]=true;
  }
  this.validPadding=validPadding;
}
