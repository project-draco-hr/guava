{
  TestSuite suite=new TestSuite();
  suite.addTestSuite(ForwardingSortedMapTest.class);
  suite.addTest(MapTestSuiteBuilder.using(new TestStringMapGenerator(){
    @Override protected Map<String,String> create(    Entry<String,String>[] entries){
      SortedMap<String,String> map=new SafeTreeMap<String,String>();
      for (      Entry<String,String> entry : entries) {
        map.put(entry.getKey(),entry.getValue());
      }
      return new StandardImplForwardingSortedMap<String,String>(map);
    }
    @Override public Iterable<Entry<String,String>> order(    List<Entry<String,String>> insertionOrder){
      return sort(insertionOrder);
    }
  }
).named("ForwardingSortedMap[SafeTreeMap] with no comparator and standard " + "implementations").withFeatures(CollectionSize.ANY,CollectionFeature.KNOWN_ORDER,MapFeature.ALLOWS_NULL_VALUES,MapFeature.GENERAL_PURPOSE).createTestSuite());
  suite.addTest(MapTestSuiteBuilder.using(new TestStringMapGenerator(){
    private final Comparator<String> comparator=Ordering.natural().nullsFirst();
    @Override protected Map<String,String> create(    Entry<String,String>[] entries){
      SortedMap<String,String> map=new SafeTreeMap<String,String>(comparator);
      for (      Entry<String,String> entry : entries) {
        map.put(entry.getKey(),entry.getValue());
      }
      return new StandardImplForwardingSortedMap<String,String>(map);
    }
    @Override public Iterable<Entry<String,String>> order(    List<Entry<String,String>> insertionOrder){
      return sort(insertionOrder);
    }
  }
).named("ForwardingSortedMap[SafeTreeMap] with natural comparator and " + "standard implementations").withFeatures(CollectionSize.ANY,CollectionFeature.KNOWN_ORDER,MapFeature.ALLOWS_NULL_VALUES,MapFeature.ALLOWS_NULL_KEYS,MapFeature.GENERAL_PURPOSE).createTestSuite());
  suite.addTest(MapTestSuiteBuilder.using(new TestStringMapGenerator(){
    @Override protected Map<String,String> create(    Entry<String,String>[] entries){
      ImmutableSortedMap.Builder<String,String> builder=ImmutableSortedMap.naturalOrder();
      for (      Entry<String,String> entry : entries) {
        builder.put(entry.getKey(),entry.getValue());
      }
      return new StandardImplForwardingSortedMap<String,String>(builder.build());
    }
    @Override public Iterable<Entry<String,String>> order(    List<Entry<String,String>> insertionOrder){
      return sort(insertionOrder);
    }
  }
).named("ForwardingSortedMap[ImmutableSortedMap] with standard " + "implementations").withFeatures(CollectionSize.ANY,MapFeature.REJECTS_DUPLICATES_AT_CREATION,MapFeature.ALLOWS_NULL_QUERIES).createTestSuite());
  return suite;
}
