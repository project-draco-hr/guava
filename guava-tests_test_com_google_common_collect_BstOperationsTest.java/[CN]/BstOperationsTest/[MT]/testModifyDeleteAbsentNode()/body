{
  SimpleNode a=new SimpleNode('a',null,null);
  SimpleNode b=new SimpleNode('b',a,null);
  SimpleNode g=new SimpleNode('g',null,null);
  SimpleNode f=new SimpleNode('f',null,g);
  SimpleNode d=new SimpleNode('d',b,f);
  BstNodeFactory<SimpleNode> nodeFactory=EasyMock.createStrictMock(BstNodeFactory.class);
  BstBalancePolicy<SimpleNode> balancePolicy=EasyMock.createStrictMock(BstBalancePolicy.class);
  BstModifier<Character,SimpleNode> modifier=EasyMock.createStrictMock(BstModifier.class);
  expectPossibleEntryfication(nodeFactory,a);
  expect(modifier.modify(eq('c'),(SimpleNode)isNull())).andReturn(BstModificationResult.<SimpleNode>identity(null));
  replay(nodeFactory,balancePolicy,modifier);
  BstMutationRule<Character,SimpleNode> mutationRule=BstMutationRule.createRule(modifier,balancePolicy,nodeFactory);
  BstMutationResult<Character,SimpleNode> mutationResult=BstOperations.mutate(Ordering.natural(),mutationRule,d,'c');
  assertEquals('c',mutationResult.getTargetKey().charValue());
  assertEquals(d,mutationResult.getOriginalRoot());
  assertEquals(d,mutationResult.getChangedRoot());
  assertNull(mutationResult.getOriginalTarget());
  assertNull(mutationResult.getChangedTarget());
  assertEquals(ModificationType.IDENTITY,mutationResult.modificationType());
  verify(nodeFactory,balancePolicy,modifier);
}
