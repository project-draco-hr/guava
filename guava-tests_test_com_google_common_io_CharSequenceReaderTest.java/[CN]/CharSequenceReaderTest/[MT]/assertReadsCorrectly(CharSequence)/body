{
  String expected=charSequence.toString();
  CharSequenceReader reader=new CharSequenceReader(charSequence);
  for (int i=0; i < expected.length(); i++) {
    assertEquals(expected.charAt(i),reader.read());
  }
  assertFullyRead(reader);
  reader=new CharSequenceReader(charSequence);
  char[] buf=new char[expected.length()];
  assertEquals(expected.length() == 0 ? -1 : expected.length(),reader.read(buf));
  assertEquals(expected,new String(buf));
  assertFullyRead(reader);
  reader=new CharSequenceReader(charSequence);
  buf=new char[5];
  StringBuilder builder=new StringBuilder();
  int read;
  while ((read=reader.read(buf,0,buf.length)) != -1) {
    builder.append(buf,0,read);
  }
  assertEquals(expected,builder.toString());
  assertFullyRead(reader);
  reader=new CharSequenceReader(charSequence);
  CharBuffer buf2=CharBuffer.allocate(expected.length());
  assertEquals(expected.length() == 0 ? -1 : expected.length(),reader.read(buf2));
  buf2.flip();
  assertEquals(expected,buf2.toString());
  assertFullyRead(reader);
  reader=new CharSequenceReader(charSequence);
  buf2=CharBuffer.allocate(5);
  builder=new StringBuilder();
  while (reader.read(buf2) != -1) {
    buf2.flip();
    builder.append(buf2);
    buf2.clear();
  }
  assertEquals(expected,builder.toString());
  assertFullyRead(reader);
  reader=new CharSequenceReader(charSequence);
  assertEquals(expected.length(),reader.skip(Long.MAX_VALUE));
  assertFullyRead(reader);
  if (expected.length() > 5) {
    reader=new CharSequenceReader(charSequence);
    assertEquals(5,reader.skip(5));
    buf=new char[expected.length() - 5];
    assertEquals(buf.length,reader.read(buf,0,buf.length));
    assertEquals(expected.substring(5),new String(buf));
    assertFullyRead(reader);
  }
}
