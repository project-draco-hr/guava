{
  for (  CacheBuilder<Object,Object> builder : factoryWithAllKeyStrengths().buildAllPermutations()) {
    if (builder.keyStrength == STRONG && builder.valueStrength == STRONG) {
      continue;
    }
    CountingRemovalListener<Integer,String> removalListener=countingRemovalListener();
    CacheLoader<Integer,String> toStringLoader=new CacheLoader<Integer,String>(){
      @Override public String load(      Integer key){
        return key.toString();
      }
    }
;
    Cache<Integer,String> cache=builder.removalListener(removalListener).build(toStringLoader);
    Integer key1=1001;
    Integer key2=1002;
    String value1=cache.getUnchecked(key1);
    String value2=cache.getUnchecked(key2);
    key1=null;
    value1=null;
    assertCleanup(cache,removalListener);
    assertSame(value2,cache.getUnchecked(key2));
  }
}
