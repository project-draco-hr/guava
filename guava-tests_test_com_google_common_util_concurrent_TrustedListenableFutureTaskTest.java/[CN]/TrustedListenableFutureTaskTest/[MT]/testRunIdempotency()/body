{
  final int numThreads=10;
  final ExecutorService executor=Executors.newFixedThreadPool(numThreads);
  for (int i=0; i < 1000; i++) {
    final AtomicInteger counter=new AtomicInteger();
    final TrustedListenableFutureTask<Integer> task=TrustedListenableFutureTask.create(new Callable<Integer>(){
      @Override public Integer call(){
        return counter.incrementAndGet();
      }
    }
);
    final CyclicBarrier barrier=new CyclicBarrier(numThreads + 1);
    Runnable wrapper=new Runnable(){
      @Override public void run(){
        awaitUnchecked(barrier);
        task.run();
        awaitUnchecked(barrier);
      }
    }
;
    for (int j=0; j < 10; j++) {
      executor.execute(wrapper);
    }
    barrier.await();
    barrier.await();
    assertEquals(1,task.get().intValue());
    assertEquals(1,counter.get());
  }
  executor.shutdown();
}
