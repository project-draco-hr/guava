{
  TestSuite suite=new TestSuite();
  suite.addTestSuite(ArrayRowTests.class);
  suite.addTestSuite(HashRowTests.class);
  suite.addTestSuite(TreeRowTests.class);
  suite.addTestSuite(TransposeRowTests.class);
  suite.addTestSuite(TransformValueRowTests.class);
  suite.addTestSuite(UnmodifiableHashRowTests.class);
  suite.addTestSuite(UnmodifiableTreeRowTests.class);
  suite.addTestSuite(ArrayColumnTests.class);
  suite.addTestSuite(HashColumnTests.class);
  suite.addTestSuite(TreeColumnTests.class);
  suite.addTestSuite(TransposeColumnTests.class);
  suite.addTestSuite(TransformValueColumnTests.class);
  suite.addTestSuite(UnmodifiableHashColumnTests.class);
  suite.addTestSuite(UnmodifiableTreeColumnTests.class);
  suite.addTestSuite(ArrayRowMapTests.class);
  suite.addTestSuite(HashRowMapTests.class);
  suite.addTestSuite(TreeRowMapTests.class);
  suite.addTestSuite(TreeRowMapHeadMapTests.class);
  suite.addTestSuite(TreeRowMapTailMapTests.class);
  suite.addTestSuite(TreeRowMapSubMapTests.class);
  suite.addTestSuite(TransformValueRowMapTests.class);
  suite.addTestSuite(UnmodifiableHashRowMapTests.class);
  suite.addTestSuite(UnmodifiableTreeRowMapTests.class);
  suite.addTestSuite(ArrayColumnMapTests.class);
  suite.addTestSuite(HashColumnMapTests.class);
  suite.addTestSuite(TreeColumnMapTests.class);
  suite.addTestSuite(TransformValueColumnMapTests.class);
  suite.addTestSuite(UnmodifiableHashColumnMapTests.class);
  suite.addTestSuite(UnmodifiableTreeColumnMapTests.class);
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      Table<String,Integer,Character> table=ArrayTable.create(ImmutableList.copyOf(elements),ImmutableList.of(1,2));
      populateForRowKeySet(table,elements);
      return table.rowKeySet();
    }
  }
).named("ArrayTable.rowKeySet").withFeatures(CollectionSize.ONE,CollectionSize.SEVERAL,CollectionFeature.KNOWN_ORDER,CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      Table<String,Integer,Character> table=HashBasedTable.create();
      populateForRowKeySet(table,elements);
      return table.rowKeySet();
    }
  }
).named("HashBasedTable.rowKeySet").withFeatures(COLLECTION_FEATURES_REMOVE).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      Table<String,Integer,Character> table=TreeBasedTable.create();
      populateForRowKeySet(table,elements);
      return table.rowKeySet();
    }
    @Override public List<String> order(    List<String> insertionOrder){
      Collections.sort(insertionOrder);
      return insertionOrder;
    }
  }
).named("TreeBasedTable.rowKeySet").withFeatures(COLLECTION_FEATURES_REMOVE_ORDER).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      TreeBasedTable<String,Integer,Character> table=TreeBasedTable.create();
      populateForRowKeySet(table,elements);
      table.put("z",1,'a');
      return table.rowKeySet().headSet("x");
    }
    @Override public List<String> order(    List<String> insertionOrder){
      Collections.sort(insertionOrder);
      return insertionOrder;
    }
  }
).named("TreeBasedTable.rowKeySet.headSet").withFeatures(COLLECTION_FEATURES_REMOVE_ORDER).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      TreeBasedTable<String,Integer,Character> table=TreeBasedTable.create();
      populateForRowKeySet(table,elements);
      table.put("\0",1,'a');
      return table.rowKeySet().tailSet("a");
    }
    @Override public List<String> order(    List<String> insertionOrder){
      Collections.sort(insertionOrder);
      return insertionOrder;
    }
  }
).named("TreeBasedTable.rowKeySet.tailSet").withFeatures(COLLECTION_FEATURES_REMOVE_ORDER).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      TreeBasedTable<String,Integer,Character> table=TreeBasedTable.create();
      populateForRowKeySet(table,elements);
      table.put("\0",1,'a');
      table.put("z",1,'a');
      return table.rowKeySet().subSet("a","x");
    }
    @Override public List<String> order(    List<String> insertionOrder){
      Collections.sort(insertionOrder);
      return insertionOrder;
    }
  }
).named("TreeBasedTable.rowKeySet.subSet").withFeatures(COLLECTION_FEATURES_REMOVE_ORDER).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      Table<String,Integer,Character> table=HashBasedTable.create();
      populateForRowKeySet(table,elements);
      return Tables.unmodifiableTable(table).rowKeySet();
    }
  }
).named("unmodifiableTable[HashBasedTable].rowKeySet").withFeatures(COLLECTION_FEATURES).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      RowSortedTable<String,Integer,Character> table=TreeBasedTable.create();
      populateForRowKeySet(table,elements);
      return Tables.unmodifiableRowSortedTable(table).rowKeySet();
    }
    @Override public List<String> order(    List<String> insertionOrder){
      Collections.sort(insertionOrder);
      return insertionOrder;
    }
  }
).named("unmodifiableRowSortedTable[TreeBasedTable].rowKeySet").withFeatures(COLLECTION_FEATURES_ORDER).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      Table<Integer,String,Character> table=ArrayTable.create(ImmutableList.of(1,2),ImmutableList.copyOf(elements));
      populateForColumnKeySet(table,elements);
      return table.columnKeySet();
    }
  }
).named("ArrayTable.columnKeySet").withFeatures(CollectionSize.ONE,CollectionSize.SEVERAL,CollectionFeature.KNOWN_ORDER,CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      Table<Integer,String,Character> table=HashBasedTable.create();
      populateForColumnKeySet(table,elements);
      return table.columnKeySet();
    }
  }
).named("HashBasedTable.columnKeySet").withFeatures(COLLECTION_FEATURES_REMOVE).suppressing(getIteratorUnknownOrderRemoveSupportedMethod()).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      Table<Integer,String,Character> table=TreeBasedTable.create();
      populateForColumnKeySet(table,elements);
      return table.columnKeySet();
    }
    @Override public List<String> order(    List<String> insertionOrder){
      Collections.sort(insertionOrder);
      return insertionOrder;
    }
  }
).named("TreeBasedTable.columnKeySet").withFeatures(COLLECTION_FEATURES_REMOVE_ORDER).suppressing(getIteratorKnownOrderRemoveSupportedMethod()).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      Table<Integer,String,Character> table=HashBasedTable.create();
      populateForColumnKeySet(table,elements);
      return Tables.unmodifiableTable(table).columnKeySet();
    }
  }
).named("unmodifiableTable[HashBasedTable].columnKeySet").withFeatures(COLLECTION_FEATURES).suppressing(getIteratorUnknownOrderRemoveSupportedMethod()).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      RowSortedTable<Integer,String,Character> table=TreeBasedTable.create();
      populateForColumnKeySet(table,elements);
      return Tables.unmodifiableRowSortedTable(table).columnKeySet();
    }
    @Override public List<String> order(    List<String> insertionOrder){
      Collections.sort(insertionOrder);
      return insertionOrder;
    }
  }
).named("unmodifiableRowSortedTable[TreeBasedTable].columnKeySet").withFeatures(COLLECTION_FEATURES_ORDER).suppressing(getIteratorKnownOrderRemoveSupportedMethod()).createTestSuite());
  suite.addTest(CollectionTestSuiteBuilder.using(new TestStringCollectionGenerator(){
    @Override protected Collection<String> create(    String[] elements){
      List<Integer> rowKeys=Lists.newArrayList();
      for (int i=0; i < elements.length; i++) {
        rowKeys.add(i);
      }
      Table<Integer,Character,String> table=ArrayTable.create(rowKeys,ImmutableList.of('a'));
      populateForValues(table,elements);
      return table.values();
    }
  }
).named("ArrayTable.values").withFeatures(CollectionSize.ONE,CollectionSize.SEVERAL,CollectionFeature.ALLOWS_NULL_VALUES,CollectionFeature.KNOWN_ORDER).createTestSuite());
  suite.addTest(CollectionTestSuiteBuilder.using(new TestStringCollectionGenerator(){
    @Override protected Collection<String> create(    String[] elements){
      Table<Integer,Character,String> table=HashBasedTable.create();
      table.put(1,'a',"foo");
      table.clear();
      populateForValues(table,elements);
      return table.values();
    }
  }
).named("HashBasedTable.values").withFeatures(COLLECTION_FEATURES_REMOVE).createTestSuite());
  suite.addTest(CollectionTestSuiteBuilder.using(new TestStringCollectionGenerator(){
    @Override protected Collection<String> create(    String[] elements){
      Table<Integer,Character,String> table=TreeBasedTable.create();
      table.put(1,'a',"foo");
      table.clear();
      populateForValues(table,elements);
      return table.values();
    }
  }
).named("TreeBasedTable.values").withFeatures(COLLECTION_FEATURES_REMOVE_ORDER).createTestSuite());
  final Function<String,String> removeFirstCharacter=new Function<String,String>(){
    @Override public String apply(    String input){
      return input.substring(1);
    }
  }
;
  suite.addTest(CollectionTestSuiteBuilder.using(new TestStringCollectionGenerator(){
    @Override protected Collection<String> create(    String[] elements){
      Table<Integer,Character,String> table=HashBasedTable.create();
      for (int i=0; i < elements.length; i++) {
        table.put(i,'a',"x" + checkNotNull(elements[i]));
      }
      return Tables.transformValues(table,removeFirstCharacter).values();
    }
  }
).named("TransformValues.values").withFeatures(COLLECTION_FEATURES_REMOVE).createTestSuite());
  suite.addTest(CollectionTestSuiteBuilder.using(new TestStringCollectionGenerator(){
    @Override protected Collection<String> create(    String[] elements){
      Table<Integer,Character,String> table=HashBasedTable.create();
      table.put(1,'a',"foo");
      table.clear();
      populateForValues(table,elements);
      return Tables.unmodifiableTable(table).values();
    }
  }
).named("unmodifiableTable[HashBasedTable].values").withFeatures(COLLECTION_FEATURES).createTestSuite());
  suite.addTest(CollectionTestSuiteBuilder.using(new TestStringCollectionGenerator(){
    @Override protected Collection<String> create(    String[] elements){
      RowSortedTable<Integer,Character,String> table=TreeBasedTable.create();
      table.put(1,'a',"foo");
      table.clear();
      populateForValues(table,elements);
      return Tables.unmodifiableRowSortedTable(table).values();
    }
  }
).named("unmodifiableTable[TreeBasedTable].values").withFeatures(COLLECTION_FEATURES_ORDER).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestCellSetGenerator(){
    @Override public SampleElements<Cell<String,Integer,Character>> samples(){
      return new SampleElements<Cell<String,Integer,Character>>(Tables.immutableCell("bar",1,'a'),Tables.immutableCell("bar",2,'b'),Tables.immutableCell("bar",3,(Character)null),Tables.immutableCell("bar",4,'b'),Tables.immutableCell("bar",5,'b'));
    }
    @Override public Set<Cell<String,Integer,Character>> create(    Object... elements){
      List<Integer> columnKeys=Lists.newArrayList();
      for (      Object element : elements) {
        @SuppressWarnings("unchecked") Cell<String,Integer,Character> cell=(Cell<String,Integer,Character>)element;
        columnKeys.add(cell.getColumnKey());
      }
      Table<String,Integer,Character> table=ArrayTable.create(ImmutableList.of("bar"),columnKeys);
      for (      Object element : elements) {
        @SuppressWarnings("unchecked") Cell<String,Integer,Character> cell=(Cell<String,Integer,Character>)element;
        table.put(cell.getRowKey(),cell.getColumnKey(),cell.getValue());
      }
      return table.cellSet();
    }
    @Override Table<String,Integer,Character> createTable(){
      throw new UnsupportedOperationException();
    }
  }
).named("ArrayTable.cellSet").withFeatures(CollectionSize.ONE,CollectionSize.SEVERAL,CollectionFeature.KNOWN_ORDER,CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestCellSetGenerator(){
    @Override Table<String,Integer,Character> createTable(){
      return HashBasedTable.create();
    }
  }
).named("HashBasedTable.cellSet").withFeatures(CollectionSize.ANY,CollectionFeature.REMOVE_OPERATIONS,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestCellSetGenerator(){
    @Override Table<String,Integer,Character> createTable(){
      return TreeBasedTable.create();
    }
  }
).named("TreeBasedTable.cellSet").withFeatures(CollectionSize.ANY,CollectionFeature.REMOVE_OPERATIONS,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestCellSetGenerator(){
    @Override Table<String,Integer,Character> createTable(){
      Table<Integer,String,Character> original=TreeBasedTable.create();
      return Tables.transpose(original);
    }
  }
).named("TransposedTable.cellSet").withFeatures(CollectionSize.ANY,CollectionFeature.REMOVE_OPERATIONS,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestCellSetGenerator(){
    @Override Table<String,Integer,Character> createTable(){
      return HashBasedTable.create();
    }
    @Override public Set<Cell<String,Integer,Character>> create(    Object... elements){
      Table<String,Integer,Character> table=createTable();
      for (      Object element : elements) {
        @SuppressWarnings("unchecked") Cell<String,Integer,Character> cell=(Cell<String,Integer,Character>)element;
        table.put(cell.getRowKey(),cell.getColumnKey(),cell.getValue());
      }
      return Tables.transformValues(table,Functions.<Character>identity()).cellSet();
    }
  }
).named("TransformValues.cellSet").withFeatures(CollectionSize.ANY,CollectionFeature.ALLOWS_NULL_QUERIES,CollectionFeature.REMOVE_OPERATIONS).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestCellSetGenerator(){
    @Override Table<String,Integer,Character> createTable(){
      return Tables.unmodifiableTable(HashBasedTable.<String,Integer,Character>create());
    }
    @Override public Set<Cell<String,Integer,Character>> create(    Object... elements){
      Table<String,Integer,Character> table=HashBasedTable.create();
      for (      Object element : elements) {
        @SuppressWarnings("unchecked") Cell<String,Integer,Character> cell=(Cell<String,Integer,Character>)element;
        table.put(cell.getRowKey(),cell.getColumnKey(),cell.getValue());
      }
      return Tables.unmodifiableTable(table).cellSet();
    }
  }
).named("unmodifiableTable[HashBasedTable].cellSet").withFeatures(CollectionSize.ANY,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestCellSetGenerator(){
    @Override RowSortedTable<String,Integer,Character> createTable(){
      return Tables.unmodifiableRowSortedTable(TreeBasedTable.<String,Integer,Character>create());
    }
    @Override public Set<Cell<String,Integer,Character>> create(    Object... elements){
      RowSortedTable<String,Integer,Character> table=TreeBasedTable.create();
      for (      Object element : elements) {
        @SuppressWarnings("unchecked") Cell<String,Integer,Character> cell=(Cell<String,Integer,Character>)element;
        table.put(cell.getRowKey(),cell.getColumnKey(),cell.getValue());
      }
      return Tables.unmodifiableRowSortedTable(table).cellSet();
    }
  }
).named("unmodifiableRowSortedTable[TreeBasedTable].cellSet").withFeatures(CollectionSize.ANY,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      Iterable<String> rowKeys=ImmutableSet.copyOf(elements);
      Iterable<Integer> columnKeys=ImmutableList.of(1,2,3);
      Table<String,Integer,Character> table=ArrayTable.create(rowKeys,columnKeys);
      populateForRowKeySet(table,elements);
      return table.column(1).keySet();
    }
  }
).named("ArrayTable.column.keySet").withFeatures(CollectionSize.ONE,CollectionSize.SEVERAL,CollectionFeature.KNOWN_ORDER,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      Table<String,Integer,Character> table=HashBasedTable.create();
      populateForRowKeySet(table,elements);
      return table.column(1).keySet();
    }
  }
).named("HashBasedTable.column.keySet").withFeatures(COLLECTION_FEATURES_REMOVE).suppressing(getIteratorUnknownOrderRemoveSupportedMethod()).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      Table<String,Integer,Character> table=TreeBasedTable.create();
      populateForRowKeySet(table,elements);
      return table.column(1).keySet();
    }
    @Override public List<String> order(    List<String> insertionOrder){
      Collections.sort(insertionOrder);
      return insertionOrder;
    }
  }
).named("TreeBasedTable.column.keySet").withFeatures(COLLECTION_FEATURES_REMOVE_ORDER).suppressing(getIteratorKnownOrderRemoveSupportedMethod()).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      Table<String,Integer,Character> table=HashBasedTable.create();
      populateForRowKeySet(table,elements);
      return Tables.transformValues(table,Functions.toStringFunction()).column(1).keySet();
    }
  }
).named("TransformValues.column.keySet").withFeatures(COLLECTION_FEATURES_REMOVE).suppressing(getIteratorUnknownOrderRemoveSupportedMethod()).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      Table<String,Integer,Character> table=HashBasedTable.create();
      populateForRowKeySet(table,elements);
      return Tables.unmodifiableTable(table).column(1).keySet();
    }
  }
).named("unmodifiableTable[HashBasedTable].column.keySet").withFeatures(COLLECTION_FEATURES).suppressing(getIteratorUnknownOrderRemoveSupportedMethod()).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      RowSortedTable<String,Integer,Character> table=TreeBasedTable.create();
      populateForRowKeySet(table,elements);
      return Tables.unmodifiableRowSortedTable(table).column(1).keySet();
    }
    @Override public List<String> order(    List<String> insertionOrder){
      Collections.sort(insertionOrder);
      return insertionOrder;
    }
  }
).named("unmodifiableRowSortedTable[TreeBasedTable].column.keySet").withFeatures(COLLECTION_FEATURES_ORDER).suppressing(getIteratorKnownOrderRemoveSupportedMethod()).createTestSuite());
  return suite;
}
