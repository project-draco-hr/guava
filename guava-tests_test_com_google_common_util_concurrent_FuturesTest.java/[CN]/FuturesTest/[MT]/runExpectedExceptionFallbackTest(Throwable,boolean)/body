{
  FutureFallback<Integer> fallback=mocksControl.createMock(FutureFallback.class);
  RuntimeException raisedException=new RuntimeException();
  if (!wrapInFuture) {
    expect(fallback.create(raisedException)).andThrow(expectedException);
  }
 else {
    expect(fallback.create(raisedException)).andReturn(Futures.<Integer>immediateFailedFuture(expectedException));
  }
  ListenableFuture<Integer> failingFuture=Futures.immediateFailedFuture(raisedException);
  mocksControl.replay();
  ListenableFuture<Integer> faultToleranteFuture=Futures.withFallback(failingFuture,fallback);
  try {
    faultToleranteFuture.get();
    fail("An Exception should have been thrown!");
  }
 catch (  ExecutionException ee) {
    assertSame(expectedException,ee.getCause());
  }
  mocksControl.verify();
}
