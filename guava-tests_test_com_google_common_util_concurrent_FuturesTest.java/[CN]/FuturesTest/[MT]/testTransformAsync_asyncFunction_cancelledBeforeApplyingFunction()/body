{
  final AtomicBoolean functionCalled=new AtomicBoolean();
  AsyncFunction<String,Integer> function=new AsyncFunction<String,Integer>(){
    @Override public ListenableFuture<Integer> apply(    String input) throws Exception {
      functionCalled.set(true);
      return immediateFuture(1);
    }
  }
;
  SettableFuture<String> inputFuture=SettableFuture.create();
  ExecutorService executor=newSingleThreadExecutor();
  ListenableFuture<Integer> future=transformAsync(inputFuture,function,executor);
  final CountDownLatch beforeFunction=new CountDownLatch(1);
  executor.submit(new Runnable(){
    @Override public void run(){
      awaitUninterruptibly(beforeFunction);
    }
  }
);
  inputFuture.set("value");
  future.cancel(false);
  beforeFunction.countDown();
  executor.awaitTermination(5,SECONDS);
  assertFalse(functionCalled.get());
}
