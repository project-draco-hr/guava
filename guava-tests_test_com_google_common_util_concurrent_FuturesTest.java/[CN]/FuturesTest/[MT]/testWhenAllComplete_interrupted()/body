{
  SettableFuture<String> stringFuture=SettableFuture.create();
  SettableFuture<Boolean> booleanFuture=SettableFuture.create();
  final CountDownLatch inFunction=new CountDownLatch(1);
  final CountDownLatch gotException=new CountDownLatch(1);
  AsyncCallable<String> combiner=new AsyncCallable<String>(){
    @Override public ListenableFuture<String> call() throws Exception {
      inFunction.countDown();
      try {
        new CountDownLatch(1).await();
      }
 catch (      InterruptedException expected) {
        gotException.countDown();
        throw expected;
      }
      return immediateFuture("a");
    }
  }
;
  ListenableFuture<String> futureResult=whenAllComplete(stringFuture,booleanFuture).callAsync(combiner,newSingleThreadExecutor());
  stringFuture.set("value");
  booleanFuture.set(true);
  inFunction.await();
  futureResult.cancel(true);
  try {
    futureResult.get();
    fail();
  }
 catch (  CancellationException expected) {
  }
  gotException.await();
}
