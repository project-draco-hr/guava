{
  Futures.successfulAsList(ImmutableList.of(SettableFuture.create())).cancel(true);
  final SettableFuture<String> future1=SettableFuture.create();
  final SettableFuture<String> future2=SettableFuture.create();
  @SuppressWarnings("unchecked") ListenableFuture<List<String>> compound=Futures.successfulAsList(future1,future2);
  future1.addListener(new Runnable(){
    @Override public void run(){
      assertTrue(future1.isCancelled());
      assertFalse(future2.isCancelled());
      future2.set(DATA2);
    }
  }
,directExecutor());
  assertTrue(compound.cancel(false));
  assertTrue(compound.isCancelled());
  assertTrue(future1.isCancelled());
  assertFalse(future2.isCancelled());
  try {
    compound.get();
    fail("Expected exception not thrown");
  }
 catch (  CancellationException e) {
  }
}
