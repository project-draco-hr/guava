{
  SettableFuture<String> input=SettableFuture.create();
  final CountDownLatch inFunction=new CountDownLatch(1);
  final CountDownLatch shouldCompleteFunction=new CountDownLatch(1);
  final CountDownLatch gotException=new CountDownLatch(1);
  AsyncFunction<Throwable,String> function=new AsyncFunction<Throwable,String>(){
    @Override public ListenableFuture<String> apply(    Throwable t) throws Exception {
      inFunction.countDown();
      try {
        shouldCompleteFunction.await();
      }
 catch (      InterruptedException expected) {
        gotException.countDown();
        throw expected;
      }
      return immediateFuture("a");
    }
  }
;
  ListenableFuture<String> futureResult=Futures.catchingAsync(input,Exception.class,function,newSingleThreadExecutor());
  input.setException(new Exception());
  inFunction.await();
  futureResult.cancel(true);
  shouldCompleteFunction.countDown();
  try {
    futureResult.get();
    fail();
  }
 catch (  CancellationException expected) {
  }
  assertEquals(1,gotException.getCount());
}
