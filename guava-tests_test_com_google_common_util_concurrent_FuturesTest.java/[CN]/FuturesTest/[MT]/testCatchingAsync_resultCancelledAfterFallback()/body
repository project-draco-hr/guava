{
  final SettableFuture<Integer> secondary=SettableFuture.create();
  final RuntimeException raisedException=new RuntimeException();
  AsyncFunctionSpy<Throwable,Integer> fallback=spy(new AsyncFunction<Throwable,Integer>(){
    @Override public ListenableFuture<Integer> apply(    Throwable t) throws Exception {
      assertThat(t).isSameAs(raisedException);
      return secondary;
    }
  }
);
  ListenableFuture<Integer> failingFuture=immediateFailedFuture(raisedException);
  ListenableFuture<Integer> derived=catchingAsync(failingFuture,Throwable.class,fallback);
  derived.cancel(false);
  assertTrue(secondary.isCancelled());
  assertFalse(secondary.wasInterrupted());
  fallback.verifyCallCount(1);
}
