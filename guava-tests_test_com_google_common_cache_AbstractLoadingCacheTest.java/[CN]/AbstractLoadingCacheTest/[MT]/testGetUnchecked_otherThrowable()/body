{
  final Throwable cause=new Throwable();
  final AtomicReference<Object> valueRef=new AtomicReference<Object>();
  LoadingCache<Object,Object> cache=new AbstractLoadingCache<Object,Object>(){
    @Override public Object get(    Object key) throws ExecutionException {
      Object v=valueRef.get();
      if (v == null) {
        throw new ExecutionException(cause);
      }
      return v;
    }
    @Override public Object getIfPresent(    Object key){
      return valueRef.get();
    }
  }
;
  try {
    cache.getUnchecked(new Object());
    fail();
  }
 catch (  UncheckedExecutionException expected) {
    assertEquals(cause,expected.getCause());
  }
  Object newValue=new Object();
  valueRef.set(newValue);
  assertSame(newValue,cache.getUnchecked(new Object()));
}
