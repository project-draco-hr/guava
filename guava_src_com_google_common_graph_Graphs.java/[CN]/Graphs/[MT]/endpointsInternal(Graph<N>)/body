{
  if (graph instanceof Network && !allowsParallelEdges(graph)) {
    return endpointsSimpleNetwork(castToNetwork(graph));
  }
  return new AbstractSet<Endpoints<N>>(){
    @Override public Iterator<Endpoints<N>> iterator(){
      return graph.isDirected() ? new DirectedEndpointsIterator<N>(graph) : new UndirectedEndpointsIterator<N>(graph);
    }
    @Override public int size(){
      boolean directed=graph.isDirected();
      long endpointsCount=0L;
      for (      N node : graph.nodes()) {
        Set<N> successors=graph.successors(node);
        endpointsCount+=successors.size();
        if (!directed && successors.contains(node)) {
          endpointsCount++;
        }
      }
      if (!directed) {
        checkState((endpointsCount & 1) == 0);
        endpointsCount>>>=1;
      }
      return Ints.saturatedCast(endpointsCount);
    }
    @Override public boolean contains(    Object obj){
      if (!(obj instanceof Endpoints)) {
        return false;
      }
      return containsEndpoints(graph,(Endpoints<?>)obj);
    }
  }
;
}
