{
class MyError extends Error {
  }
  final CyclicBarrier barrier=new CyclicBarrier(2);
  ExecutorService service=Executors.newSingleThreadExecutor();
  try {
    final SerializingExecutor executor=new SerializingExecutor(service);
    Runnable errorTask=new Runnable(){
      @Override public void run(){
        throw new MyError();
      }
    }
;
    Runnable barrierTask=new Runnable(){
      @Override public void run(){
        try {
          barrier.await();
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
    }
;
    executor.execute(errorTask);
    service.execute(barrierTask);
    barrier.await(10,TimeUnit.SECONDS);
    executor.execute(barrierTask);
    barrier.await(10,TimeUnit.SECONDS);
  }
  finally {
    service.shutdown();
  }
}
