{
class TestHashSet<E> extends HashSet<E> {
    boolean toArrayCalled=false;
    @Override public Object[] toArray(){
      toArrayCalled=true;
      return super.toArray();
    }
    @Override public <T>T[] toArray(    T[] a){
      toArrayCalled=true;
      return super.toArray(a);
    }
  }
  SortedMultiset<String> toCopy=mock(SortedMultiset.class);
  TestHashSet<Entry<String>> entrySet=new TestHashSet<Entry<String>>();
  when((Comparator<Comparable<String>>)toCopy.comparator()).thenReturn(Ordering.<Comparable<String>>natural());
  when(toCopy.entrySet()).thenReturn(entrySet);
  ImmutableSortedMultiset<String> unused=ImmutableSortedMultiset.copyOfSorted(toCopy);
  assertTrue(entrySet.toArrayCalled);
}
