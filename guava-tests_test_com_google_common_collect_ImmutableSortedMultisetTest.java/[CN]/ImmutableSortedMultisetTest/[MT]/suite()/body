{
  TestSuite suite=new TestSuite();
  suite.addTestSuite(ImmutableSortedMultisetTest.class);
  suite.addTest(SortedMultisetTestSuiteBuilder.using(new TestStringMultisetGenerator(){
    @Override protected Multiset<String> create(    String[] elements){
      return ImmutableSortedMultiset.copyOf(elements);
    }
    @Override public List<String> order(    List<String> insertionOrder){
      return Ordering.natural().sortedCopy(insertionOrder);
    }
  }
).named("ImmutableSortedMultiset").withFeatures(CollectionSize.ANY,CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());
  suite.addTest(ListTestSuiteBuilder.using(new TestStringListGenerator(){
    @Override protected List<String> create(    String[] elements){
      return ImmutableSortedMultiset.copyOf(elements).asList();
    }
    @Override public List<String> order(    List<String> insertionOrder){
      return Ordering.natural().sortedCopy(insertionOrder);
    }
  }
).named("ImmutableSortedMultiset.asList").withFeatures(CollectionSize.ANY,CollectionFeature.SERIALIZABLE,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());
  suite.addTest(ListTestSuiteBuilder.using(new TestStringListGenerator(){
    @Override protected List<String> create(    String[] elements){
      Set<String> set=Sets.newHashSet();
      ImmutableSortedMultiset.Builder<String> builder=ImmutableSortedMultiset.naturalOrder();
      for (      String s : elements) {
        checkArgument(set.add(s));
        builder.addCopies(s,2);
      }
      return builder.build().elementSet().asList();
    }
    @Override public List<String> order(    List<String> insertionOrder){
      return Ordering.natural().sortedCopy(insertionOrder);
    }
  }
).named("ImmutableSortedMultiset.elementSet.asList").withFeatures(CollectionSize.ANY,CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,CollectionFeature.SERIALIZABLE,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());
  return suite;
}
