{
  return new AbstractSet<Entry<K>>(){
    @Override public int size(){
      return keyCount.elementSet().size();
    }
    @Override public Iterator<Entry<K>> iterator(){
      final Iterator<K> keyIterator=new DistinctKeyIterator();
      return new Iterator<Entry<K>>(){
        @Override public boolean hasNext(){
          return keyIterator.hasNext();
        }
        @Override public Entry<K> next(){
          final K key=keyIterator.next();
          return new Multisets.AbstractEntry<K>(){
            @Override public K getElement(){
              return key;
            }
            @Override public int getCount(){
              return keyCount.count(key);
            }
          }
;
        }
        @Override public void remove(){
          keyIterator.remove();
        }
      }
;
    }
  }
;
}
