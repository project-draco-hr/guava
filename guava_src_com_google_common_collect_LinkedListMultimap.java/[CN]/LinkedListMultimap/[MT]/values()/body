{
  List<V> result=valuesList;
  if (result == null) {
    valuesList=result=new AbstractSequentialList<V>(){
      @Override public int size(){
        return keyCount.size();
      }
      @Override public ListIterator<V> listIterator(      int index){
        final NodeIterator nodes=new NodeIterator(index);
        return new ListIterator<V>(){
          @Override public boolean hasNext(){
            return nodes.hasNext();
          }
          @Override public V next(){
            return nodes.next().value;
          }
          @Override public boolean hasPrevious(){
            return nodes.hasPrevious();
          }
          @Override public V previous(){
            return nodes.previous().value;
          }
          @Override public int nextIndex(){
            return nodes.nextIndex();
          }
          @Override public int previousIndex(){
            return nodes.previousIndex();
          }
          @Override public void remove(){
            nodes.remove();
          }
          @Override public void set(          V e){
            nodes.setValue(e);
          }
          @Override public void add(          V e){
            throw new UnsupportedOperationException();
          }
        }
;
      }
    }
;
  }
  return result;
}
