{
  MutableGraph<Integer,String> graph=GraphBuilder.directed().build();
  graph.putEdgeValue(N1,N2,E12);
  graph.putEdgeValue(N1,N3,E13);
  BasicGraph<Integer> basicGraph=asBasicGraph(graph);
  assertThat(basicGraph.edgeValue(N1,N2)).isEqualTo(Presence.EDGE_EXISTS);
  assertThat(basicGraph.edgeValue(N1,N3)).isEqualTo(Presence.EDGE_EXISTS);
  assertThat(basicGraph.edgeValueOrDefault(N2,N3,null)).isEqualTo(null);
  assertThat(basicGraph.edgeValueOrDefault(N2,N3,Presence.EDGE_EXISTS)).isEqualTo(Presence.EDGE_EXISTS);
  try {
    basicGraph.edgeValue(N2,N3);
    fail("Should have rejected edgeValue() on non-existent edge");
  }
 catch (  IllegalArgumentException expected) {
  }
  AbstractGraphTest.validateGraph(basicGraph);
  graph.putEdgeValue(N2,N3,E23);
  assertThat(basicGraph.edgeValue(N2,N3)).isEqualTo(Presence.EDGE_EXISTS);
  AbstractGraphTest.validateGraph(basicGraph);
}
