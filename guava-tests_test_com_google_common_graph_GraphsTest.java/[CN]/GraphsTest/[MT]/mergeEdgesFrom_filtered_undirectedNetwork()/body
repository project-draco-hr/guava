{
  MutableNetwork<Integer,String> undirectedGraph=buildUndirectedTestNetwork();
  undirectedGraph.addNode(N3);
  Predicate<String> edgePredicate=Predicates.not(selfLoopPredicate(undirectedGraph));
  MutableNetwork<Integer,String> actualGraph=NetworkBuilder.undirected().allowsParallelEdges(true).build();
  actualGraph.addEdge(E11,N1,N1);
  actualGraph.addEdge(E22,N2,N2);
  actualGraph.addEdge(E44,N4,N4);
  actualGraph.addEdge(E12,N1,N2);
  mergeEdgesFrom(undirectedGraph,actualGraph,edgePredicate);
  MutableNetwork<Integer,String> expectedGraph=NetworkBuilder.undirected().allowsParallelEdges(true).build();
  expectedGraph.addEdge(E11,N1,N1);
  expectedGraph.addEdge(E22,N2,N2);
  expectedGraph.addEdge(E44,N4,N4);
  expectedGraph.addEdge(E12,N1,N2);
  expectedGraph.addEdge(E12_A,N1,N2);
  expectedGraph.addEdge(E21,N2,N1);
  assertThat(actualGraph).isEqualTo(expectedGraph);
}
