{
  BiMap<String,Integer> map=new AbstractBiMap<String,Integer>(Maps.<String,Integer>newLinkedHashMap(),Maps.<Integer,String>newLinkedHashMap()){
  }
;
  BiMap<String,Integer> constrained=MapConstraints.constrainedBiMap(map,TEST_CONSTRAINT);
  map.put(TEST_KEY,TEST_VALUE);
  constrained.put("foo",1);
  map.putAll(ImmutableMap.of("bar",2));
  constrained.putAll(ImmutableMap.of("baz",3));
  assertTrue(map.equals(constrained));
  assertTrue(constrained.equals(map));
  assertEquals(map.entrySet(),constrained.entrySet());
  assertEquals(map.keySet(),constrained.keySet());
  assertEquals(map.values(),constrained.values());
  assertEquals(map.toString(),constrained.toString());
  assertEquals(map.hashCode(),constrained.hashCode());
  ASSERT.that(map.entrySet()).has().exactly(Maps.immutableEntry(TEST_KEY,TEST_VALUE),Maps.immutableEntry("foo",1),Maps.immutableEntry("bar",2),Maps.immutableEntry("baz",3)).inOrder();
}
