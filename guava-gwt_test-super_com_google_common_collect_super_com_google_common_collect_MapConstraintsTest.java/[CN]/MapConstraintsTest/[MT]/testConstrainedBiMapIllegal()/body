{
  BiMap<String,Integer> map=new AbstractBiMap<String,Integer>(Maps.<String,Integer>newLinkedHashMap(),Maps.<Integer,String>newLinkedHashMap()){
  }
;
  BiMap<String,Integer> constrained=MapConstraints.constrainedBiMap(map,TEST_CONSTRAINT);
  try {
    constrained.put(TEST_KEY,TEST_VALUE);
    fail("TestKeyException expected");
  }
 catch (  TestKeyException expected) {
  }
  try {
    constrained.put("baz",TEST_VALUE);
    fail("TestValueException expected");
  }
 catch (  TestValueException expected) {
  }
  try {
    constrained.put(TEST_KEY,3);
    fail("TestKeyException expected");
  }
 catch (  TestKeyException expected) {
  }
  try {
    constrained.putAll(ImmutableMap.of("baz",3,TEST_KEY,4));
    fail("TestKeyException expected");
  }
 catch (  TestKeyException expected) {
  }
  try {
    constrained.forcePut(TEST_KEY,3);
    fail("TestKeyException expected");
  }
 catch (  TestKeyException expected) {
  }
  try {
    constrained.inverse().forcePut(TEST_VALUE,"baz");
    fail("TestValueException expected");
  }
 catch (  TestValueException expected) {
  }
  try {
    constrained.inverse().forcePut(3,TEST_KEY);
    fail("TestKeyException expected");
  }
 catch (  TestKeyException expected) {
  }
  assertEquals(Collections.emptySet(),map.entrySet());
  assertEquals(Collections.emptySet(),constrained.entrySet());
}
