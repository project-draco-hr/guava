{
  Multimap<String,Integer> multimap=LinkedListMultimap.create();
  Multimap<String,Integer> constrained=MapConstraints.constrainedMultimap(multimap,TEST_CONSTRAINT);
  try {
    constrained.put(TEST_KEY,1);
    fail("TestKeyException expected");
  }
 catch (  TestKeyException expected) {
  }
  try {
    constrained.put("foo",TEST_VALUE);
    fail("TestValueException expected");
  }
 catch (  TestValueException expected) {
  }
  try {
    constrained.put(TEST_KEY,TEST_VALUE);
    fail("TestKeyException expected");
  }
 catch (  TestKeyException expected) {
  }
  try {
    constrained.get(TEST_KEY).add(1);
    fail("TestKeyException expected");
  }
 catch (  TestKeyException expected) {
  }
  try {
    constrained.get("foo").add(TEST_VALUE);
    fail("TestValueException expected");
  }
 catch (  TestValueException expected) {
  }
  try {
    constrained.get(TEST_KEY).add(TEST_VALUE);
    fail("TestKeyException expected");
  }
 catch (  TestKeyException expected) {
  }
  try {
    constrained.get(TEST_KEY).addAll(Arrays.asList(1));
    fail("TestKeyException expected");
  }
 catch (  TestKeyException expected) {
  }
  try {
    constrained.get("foo").addAll(Arrays.asList(1,TEST_VALUE));
    fail("TestValueException expected");
  }
 catch (  TestValueException expected) {
  }
  try {
    constrained.get(TEST_KEY).addAll(Arrays.asList(1,TEST_VALUE));
    fail("TestKeyException expected");
  }
 catch (  TestKeyException expected) {
  }
  try {
    constrained.putAll(TEST_KEY,Arrays.asList(1));
    fail("TestKeyException expected");
  }
 catch (  TestKeyException expected) {
  }
  try {
    constrained.putAll("foo",Arrays.asList(1,TEST_VALUE));
    fail("TestValueException expected");
  }
 catch (  TestValueException expected) {
  }
  try {
    constrained.putAll(TEST_KEY,Arrays.asList(1,TEST_VALUE));
    fail("TestKeyException expected");
  }
 catch (  TestKeyException expected) {
  }
  try {
    constrained.putAll(new ImmutableMultimap.Builder<String,Integer>().put(TEST_KEY,2).put("foo",1).build());
    fail("TestKeyException expected");
  }
 catch (  TestKeyException expected) {
  }
  try {
    constrained.putAll(new ImmutableMultimap.Builder<String,Integer>().put("bar",TEST_VALUE).put("foo",1).build());
    fail("TestValueException expected");
  }
 catch (  TestValueException expected) {
  }
  try {
    constrained.putAll(new ImmutableMultimap.Builder<String,Integer>().put(TEST_KEY,TEST_VALUE).put("foo",1).build());
    fail("TestKeyException expected");
  }
 catch (  TestKeyException expected) {
  }
  try {
    constrained.entries().add(Maps.immutableEntry(TEST_KEY,1));
    fail("UnsupportedOperationException expected");
  }
 catch (  UnsupportedOperationException expected) {
  }
  try {
    constrained.entries().addAll(Arrays.asList(Maps.immutableEntry("foo",1),Maps.immutableEntry(TEST_KEY,2)));
    fail("UnsupportedOperationException expected");
  }
 catch (  UnsupportedOperationException expected) {
  }
  assertTrue(multimap.isEmpty());
  assertTrue(constrained.isEmpty());
  constrained.put("foo",1);
  try {
    constrained.asMap().get("foo").add(TEST_VALUE);
    fail("TestValueException expected");
  }
 catch (  TestValueException expected) {
  }
  try {
    constrained.asMap().values().iterator().next().add(TEST_VALUE);
    fail("TestValueException expected");
  }
 catch (  TestValueException expected) {
  }
  try {
    ((Collection<Integer>)constrained.asMap().values().toArray()[0]).add(TEST_VALUE);
    fail("TestValueException expected");
  }
 catch (  TestValueException expected) {
  }
  ASSERT.that(ImmutableList.copyOf(multimap.entries())).is(ImmutableList.copyOf(constrained.entries()));
  assertEquals(multimap.asMap(),constrained.asMap());
  assertEquals(multimap.values(),constrained.values());
  assertEquals(multimap.keys(),constrained.keys());
  assertEquals(multimap.keySet(),constrained.keySet());
  assertEquals(multimap.toString(),constrained.toString());
  assertEquals(multimap.hashCode(),constrained.hashCode());
}
