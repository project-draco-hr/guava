{
  TestSuite suite=new TestSuite();
  suite.addTestSuite(ForwardingMultisetTest.class);
  suite.addTest(MultisetTestSuiteBuilder.using(new TestStringMultisetGenerator(){
    @Override protected Multiset<String> create(    String[] elements){
      return new StandardImplForwardingMultiset<String>(LinkedHashMultiset.create(Arrays.asList(elements)));
    }
  }
).named("ForwardingMultiset[LinkedHashMultiset] with standard " + "implementations").withFeatures(CollectionSize.ANY,CollectionFeature.ALLOWS_NULL_VALUES,CollectionFeature.GENERAL_PURPOSE).createTestSuite());
  suite.addTest(MultisetTestSuiteBuilder.using(new TestStringMultisetGenerator(){
    @Override protected Multiset<String> create(    String[] elements){
      return new StandardImplForwardingMultiset<String>(ImmutableMultiset.copyOf(elements));
    }
  }
).named("ForwardingMultiset[ImmutableMultiset] with standard " + "implementations").withFeatures(CollectionSize.ANY,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    /** 
 * Returns a Multiset that throws an exception on any attempt to use a
 * method not specifically authorized by the elementSet() or hashCode()
 * docs.
 */
    @Override protected Set<String> create(    String[] elements){
      final Multiset<String> inner=LinkedHashMultiset.create(Arrays.asList(elements));
      return new ForwardingMultiset<String>(){
        @Override protected Multiset<String> delegate(){
          return inner;
        }
        @Override public Set<String> elementSet(){
          return new StandardElementSet();
        }
        @Override public int add(        String element,        int occurrences){
          throw new UnsupportedOperationException();
        }
        @Override public Set<Entry<String>> entrySet(){
          final Set<Entry<String>> backingSet=super.entrySet();
          return new ForwardingSet<Entry<String>>(){
            @Override protected Set<Entry<String>> delegate(){
              return backingSet;
            }
            @Override public boolean add(            Entry<String> element){
              throw new UnsupportedOperationException();
            }
            @Override public boolean addAll(            Collection<? extends Entry<String>> collection){
              throw new UnsupportedOperationException();
            }
            @Override public void clear(){
              throw new UnsupportedOperationException();
            }
            @Override public boolean contains(            Object object){
              throw new UnsupportedOperationException();
            }
            @Override public boolean containsAll(            Collection<?> collection){
              throw new UnsupportedOperationException();
            }
            @Override public boolean isEmpty(){
              throw new UnsupportedOperationException();
            }
            @Override public boolean remove(            Object object){
              throw new UnsupportedOperationException();
            }
            @Override public boolean removeAll(            Collection<?> collection){
              throw new UnsupportedOperationException();
            }
            @Override public boolean retainAll(            Collection<?> collection){
              throw new UnsupportedOperationException();
            }
          }
;
        }
        @Override public boolean equals(        Object object){
          throw new UnsupportedOperationException();
        }
        @Override public boolean remove(        Object element){
          throw new UnsupportedOperationException();
        }
        @Override public boolean setCount(        String element,        int oldCount,        int newCount){
          throw new UnsupportedOperationException();
        }
        @Override public int setCount(        String element,        int count){
          throw new UnsupportedOperationException();
        }
        @Override public boolean add(        String element){
          throw new UnsupportedOperationException();
        }
        @Override public boolean addAll(        Collection<? extends String> collection){
          throw new UnsupportedOperationException();
        }
        @Override public Iterator<String> iterator(){
          throw new UnsupportedOperationException();
        }
        @Override public boolean removeAll(        Collection<?> collection){
          throw new UnsupportedOperationException();
        }
        @Override public boolean retainAll(        Collection<?> collection){
          throw new UnsupportedOperationException();
        }
        @Override public int size(){
          throw new UnsupportedOperationException();
        }
      }
.elementSet();
    }
  }
).named("standardElementSet tripwire").withFeatures(CollectionSize.ANY,CollectionFeature.ALLOWS_NULL_VALUES,CollectionFeature.REMOVE_OPERATIONS).createTestSuite());
  return suite;
}
