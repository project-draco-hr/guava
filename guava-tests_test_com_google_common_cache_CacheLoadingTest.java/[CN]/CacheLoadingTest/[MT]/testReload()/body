{
  final Object one=new Object();
  final Object two=new Object();
  CacheLoader<Object,Object> loader=new CacheLoader<Object,Object>(){
    @Override public Object load(    Object key){
      return one;
    }
    @Override public Object reload(    Object key,    Object oldValue){
      return two;
    }
  }
;
  LoadingCache<Object,Object> cache=CacheBuilder.newBuilder().build(loader);
  Object key=new Object();
  CacheStats stats=cache.stats();
  assertEquals(0,stats.missCount());
  assertEquals(0,stats.loadSuccessCount());
  assertEquals(0,stats.loadExceptionCount());
  assertEquals(0,stats.hitCount());
  assertSame(one,cache.getUnchecked(key));
  stats=cache.stats();
  assertEquals(1,stats.missCount());
  assertEquals(1,stats.loadSuccessCount());
  assertEquals(0,stats.loadExceptionCount());
  assertEquals(0,stats.hitCount());
  cache.refresh(key);
  checkNothingLogged();
  stats=cache.stats();
  assertEquals(1,stats.missCount());
  assertEquals(2,stats.loadSuccessCount());
  assertEquals(0,stats.loadExceptionCount());
  assertEquals(0,stats.hitCount());
  assertSame(two,cache.getUnchecked(key));
  stats=cache.stats();
  assertEquals(1,stats.missCount());
  assertEquals(2,stats.loadSuccessCount());
  assertEquals(0,stats.loadExceptionCount());
  assertEquals(1,stats.hitCount());
}
