{
  Cache<Integer,Integer> cache=CacheBuilder.newBuilder().build(TestingCacheLoaders.<Integer>identityLoader());
  CacheStats stats=cache.stats();
  assertEquals(0,stats.missCount());
  assertEquals(0,stats.loadSuccessCount());
  assertEquals(0,stats.loadExceptionCount());
  assertEquals(0,stats.hitCount());
  assertEquals(ImmutableMap.of(),cache.getAll(ImmutableList.<Integer>of()));
  assertEquals(0,stats.missCount());
  assertEquals(0,stats.loadSuccessCount());
  assertEquals(0,stats.loadExceptionCount());
  assertEquals(0,stats.hitCount());
  assertEquals(ImmutableMap.of(1,1),cache.getAll(asList(1)));
  stats=cache.stats();
  assertEquals(1,stats.missCount());
  assertEquals(1,stats.loadSuccessCount());
  assertEquals(0,stats.loadExceptionCount());
  assertEquals(0,stats.hitCount());
  assertEquals(ImmutableMap.of(1,1,2,2,3,3,4,4),cache.getAll(asList(1,2,3,4)));
  stats=cache.stats();
  assertEquals(4,stats.missCount());
  assertEquals(4,stats.loadSuccessCount());
  assertEquals(0,stats.loadExceptionCount());
  assertEquals(1,stats.hitCount());
  assertEquals(ImmutableMap.of(2,2,3,3),cache.getAll(asList(2,3)));
  stats=cache.stats();
  assertEquals(4,stats.missCount());
  assertEquals(4,stats.loadSuccessCount());
  assertEquals(0,stats.loadExceptionCount());
  assertEquals(3,stats.hitCount());
}
