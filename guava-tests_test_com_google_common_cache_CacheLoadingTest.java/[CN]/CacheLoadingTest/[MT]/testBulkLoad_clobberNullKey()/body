{
  final Object extraKey=new Object();
  final Object extraValue=new Object();
  CacheLoader<Object,Object> loader=new CacheLoader<Object,Object>(){
    @Override public Object load(    Object key) throws Exception {
      throw new AssertionError();
    }
    @Override public Map<Object,Object> loadAll(    Iterable<? extends Object> keys) throws Exception {
      Map<Object,Object> result=Maps.newHashMap();
      for (      Object key : keys) {
        Object value=new Object();
        result.put(key,value);
      }
      result.put(extraKey,extraValue);
      result.put(null,extraKey);
      return result;
    }
  }
;
  Cache<Object,Object> cache=CacheBuilder.newBuilder().build(loader);
  cache.asMap().put(extraKey,extraKey);
  assertSame(extraKey,cache.asMap().get(extraKey));
  Object[] lookupKeys=new Object[]{new Object(),new Object(),new Object()};
  try {
    cache.getAll(asList(lookupKeys));
    fail();
  }
 catch (  InvalidCacheLoadException expected) {
  }
  for (  Object key : lookupKeys) {
    assertTrue(cache.asMap().containsKey(key));
  }
  assertSame(extraValue,cache.asMap().get(extraKey));
  assertFalse(cache.asMap().containsValue(extraKey));
}
