{
  final int count=3;
  final AtomicInteger callCount=new AtomicInteger();
  final CountDownLatch computeSignal=new CountDownLatch(1);
  final CountDownLatch secondSignal=new CountDownLatch(1);
  final CountDownLatch thirdSignal=new CountDownLatch(1);
  final CountDownLatch fourthSignal=new CountDownLatch(1);
  final CountDownLatch doneSignal=new CountDownLatch(count);
  CacheLoader<String,String> computeFunction=new CacheLoader<String,String>(){
    @Override public String load(    String key) throws InterruptedException {
      callCount.incrementAndGet();
      secondSignal.countDown();
      computeSignal.await();
      return key + "foo";
    }
  }
;
  final LoadingCache<String,String> cache=CacheBuilder.newBuilder().weakKeys().build(computeFunction);
  final AtomicReferenceArray<String> result=new AtomicReferenceArray<String>(count);
  final String key="bar";
  new Thread(){
    @Override public void run(){
      result.set(0,cache.getUnchecked(key));
      doneSignal.countDown();
    }
  }
.start();
  secondSignal.await();
  new Thread(){
    @Override public void run(){
      thirdSignal.countDown();
      result.set(1,cache.getUnchecked(key));
      doneSignal.countDown();
    }
  }
.start();
  thirdSignal.await();
  Thread.yield();
  CacheTesting.forceExpandSegment(cache,key);
  new Thread(){
    @Override public void run(){
      fourthSignal.countDown();
      result.set(2,cache.getUnchecked(key));
      doneSignal.countDown();
    }
  }
.start();
  fourthSignal.await();
  Thread.yield();
  computeSignal.countDown();
  doneSignal.await();
  assertTrue(callCount.get() == 1);
  assertEquals("barfoo",result.get(0));
  assertEquals("barfoo",result.get(1));
  assertEquals("barfoo",result.get(2));
  assertEquals("barfoo",cache.getUnchecked(key));
}
