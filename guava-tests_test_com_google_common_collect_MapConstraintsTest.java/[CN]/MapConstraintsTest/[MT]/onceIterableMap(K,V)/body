{
  final Map.Entry<K,V> entry=Maps.immutableEntry(key,value);
  return new AbstractMap<K,V>(){
    boolean iteratorCalled;
    @Override public int size(){
      return 1;
    }
    @Override public Set<Entry<K,V>> entrySet(){
      return new ForwardingSet<Entry<K,V>>(){
        @Override protected Set<Entry<K,V>> delegate(){
          return Collections.singleton(entry);
        }
        @Override public Iterator<Entry<K,V>> iterator(){
          assertFalse("Expected only one call to iterator()",iteratorCalled);
          iteratorCalled=true;
          return super.iterator();
        }
      }
;
    }
    @Override public Set<K> keySet(){
      throw new UnsupportedOperationException();
    }
    @Override public Collection<V> values(){
      throw new UnsupportedOperationException();
    }
  }
;
}
