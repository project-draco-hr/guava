{
  final TestMapGenerator<K,V> delegate=(TestMapGenerator<K,V>)parentBuilder.getSubjectGenerator().getInnerGenerator();
  List<Feature<?>> features=new ArrayList<Feature<?>>();
  features.add(NoRecurse.SUBMAP);
  features.addAll(parentBuilder.getFeatures());
  SortedMap<K,V> emptyMap=(SortedMap<K,V>)delegate.create();
  final Comparator<Entry<K,V>> entryComparator=Helpers.entryComparator(emptyMap.comparator());
  SampleElements<Entry<K,V>> samples=delegate.samples();
  @SuppressWarnings("unchecked") List<Entry<K,V>> samplesList=Arrays.asList(samples.e0,samples.e1,samples.e2,samples.e3,samples.e4);
  Collections.sort(samplesList,entryComparator);
  final K firstInclusive=samplesList.get(0).getKey();
  final K lastInclusive=samplesList.get(samplesList.size() - 1).getKey();
  return newBuilderUsing(new ForwardingTestMapGenerator<K,V>(delegate){
    @Override public Map<K,V> create(    Object... entries){
      @SuppressWarnings("unchecked") List<Entry<K,V>> extremeValues=(List)getExtremeValues();
      @SuppressWarnings("unchecked") List<Entry<K,V>> normalValues=(List)Arrays.asList(entries);
      Collections.sort(extremeValues,entryComparator);
      K firstExclusive=extremeValues.get(1).getKey();
      K lastExclusive=extremeValues.get(2).getKey();
      if (from == Bound.NO_BOUND) {
        extremeValues.remove(0);
        extremeValues.remove(0);
      }
      if (to == Bound.NO_BOUND) {
        extremeValues.remove(extremeValues.size() - 1);
        extremeValues.remove(extremeValues.size() - 1);
      }
      List<Entry<K,V>> allEntries=new ArrayList<Entry<K,V>>();
      allEntries.addAll(extremeValues);
      allEntries.addAll(normalValues);
      SortedMap<K,V> map=(SortedMap<K,V>)delegate.create((Object[])allEntries.toArray(new Entry[allEntries.size()]));
      return createSubMap(map,firstInclusive,firstExclusive,lastExclusive,lastInclusive,from,to);
    }
  }
).named(parentBuilder.getName() + " subMap " + from+ "-"+ to).withFeatures(features).suppressing(parentBuilder.getSuppressedTests()).createTestSuite();
}
