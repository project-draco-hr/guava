{
  CountingRemovalListener<Integer,Integer> removalListener=countingRemovalListener();
  IdentityLoader<Integer> loader=identityLoader();
  LoadingCache<Integer,Integer> cache=CacheBuilder.newBuilder().concurrencyLevel(1).maximumWeight(4).weigher(intValueWeigher()).removalListener(removalListener).build(loader);
  assertThat(cache.getUnchecked(2)).isEqualTo(2);
  assertThat(cache.asMap().keySet()).containsExactly(2);
  CacheTesting.processPendingNotifications(cache);
  assertThat(removalListener.getCount()).isEqualTo(0);
  assertThat(cache.getUnchecked(3)).isEqualTo(3);
  assertThat(cache.asMap().keySet()).containsExactly(3);
  CacheTesting.processPendingNotifications(cache);
  assertThat(removalListener.getCount()).isEqualTo(1);
  assertThat(cache.getUnchecked(5)).isEqualTo(5);
  assertThat(cache.asMap().keySet()).containsExactly(3);
  CacheTesting.processPendingNotifications(cache);
  assertThat(removalListener.getCount()).isEqualTo(2);
  assertThat(cache.getUnchecked(1)).isEqualTo(1);
  assertThat(cache.asMap().keySet()).containsExactly(3,1);
  CacheTesting.processPendingNotifications(cache);
  assertThat(removalListener.getCount()).isEqualTo(2);
  assertThat(cache.getUnchecked(4)).isEqualTo(4);
  assertThat(cache.asMap().keySet()).containsExactly(4);
  CacheTesting.processPendingNotifications(cache);
  assertThat(removalListener.getCount()).isEqualTo(4);
  CacheTesting.checkValidState(cache);
}
