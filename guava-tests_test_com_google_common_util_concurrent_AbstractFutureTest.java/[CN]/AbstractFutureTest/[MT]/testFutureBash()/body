{
  final CyclicBarrier barrier=new CyclicBarrier(6 + 50 + 50+ 1);
  final ExecutorService executor=Executors.newFixedThreadPool(barrier.getParties());
  final AtomicReference<AbstractFuture<String>> currentFuture=Atomics.newReference();
  final AtomicInteger numSuccessfulSetCalls=new AtomicInteger();
  Callable<Void> completeSucessFullyRunnable=new Callable<Void>(){
    @Override public Void call(){
      if (currentFuture.get().set("set")) {
        numSuccessfulSetCalls.incrementAndGet();
      }
      awaitUnchecked(barrier);
      return null;
    }
  }
;
  Callable<Void> completeExceptionallyRunnable=new Callable<Void>(){
    Exception failureCause=new Exception("setException");
    @Override public Void call(){
      if (currentFuture.get().setException(failureCause)) {
        numSuccessfulSetCalls.incrementAndGet();
      }
      awaitUnchecked(barrier);
      return null;
    }
  }
;
  Callable<Void> cancelRunnable=new Callable<Void>(){
    @Override public Void call(){
      if (currentFuture.get().cancel(true)) {
        numSuccessfulSetCalls.incrementAndGet();
      }
      awaitUnchecked(barrier);
      return null;
    }
  }
;
  Callable<Void> setFutureCompleteSucessFullyRunnable=new Callable<Void>(){
    ListenableFuture<String> future=Futures.immediateFuture("setFuture");
    @Override public Void call(){
      if (currentFuture.get().setFuture(future)) {
        numSuccessfulSetCalls.incrementAndGet();
      }
      awaitUnchecked(barrier);
      return null;
    }
  }
;
  Callable<Void> setFutureCompleteExceptionallyRunnable=new Callable<Void>(){
    ListenableFuture<String> future=Futures.immediateFailedFuture(new Exception("setFuture"));
    @Override public Void call(){
      if (currentFuture.get().setFuture(future)) {
        numSuccessfulSetCalls.incrementAndGet();
      }
      awaitUnchecked(barrier);
      return null;
    }
  }
;
  Callable<Void> setFutureCancelRunnable=new Callable<Void>(){
    ListenableFuture<String> future=Futures.immediateCancelledFuture();
    @Override public Void call(){
      if (currentFuture.get().setFuture(future)) {
        numSuccessfulSetCalls.incrementAndGet();
      }
      awaitUnchecked(barrier);
      return null;
    }
  }
;
  final Set<Object> finalResults=Collections.synchronizedSet(Sets.newIdentityHashSet());
  Runnable collectResultsRunnable=new Runnable(){
    @Override public void run(){
      try {
        String result=Uninterruptibles.getUninterruptibly(currentFuture.get());
        finalResults.add(result);
      }
 catch (      ExecutionException e) {
        finalResults.add(e.getCause());
      }
catch (      CancellationException e) {
        finalResults.add(e.getCause());
      }
 finally {
        awaitUnchecked(barrier);
      }
    }
  }
;
  Runnable collectResultsTimedGetRunnable=new Runnable(){
    @Override public void run(){
      Future<String> future=currentFuture.get();
      while (true) {
        try {
          String result=Uninterruptibles.getUninterruptibly(future,0,TimeUnit.SECONDS);
          finalResults.add(result);
          break;
        }
 catch (        ExecutionException e) {
          finalResults.add(e.getCause());
          break;
        }
catch (        CancellationException e) {
          finalResults.add(e.getCause());
          break;
        }
catch (        TimeoutException e) {
        }
      }
      awaitUnchecked(barrier);
    }
  }
;
  List<Callable<?>> allTasks=new ArrayList<Callable<?>>();
  allTasks.add(completeSucessFullyRunnable);
  allTasks.add(completeExceptionallyRunnable);
  allTasks.add(cancelRunnable);
  allTasks.add(setFutureCompleteSucessFullyRunnable);
  allTasks.add(setFutureCompleteExceptionallyRunnable);
  allTasks.add(setFutureCancelRunnable);
  for (int k=0; k < 50; k++) {
    final Runnable listener=k % 2 == 0 ? collectResultsRunnable : collectResultsTimedGetRunnable;
    allTasks.add(Executors.callable(listener));
    allTasks.add(new Callable<Void>(){
      @Override public Void call() throws Exception {
        currentFuture.get().addListener(listener,executor);
        return null;
      }
    }
);
  }
  assertEquals(allTasks.size() + 1,barrier.getParties());
  for (int i=0; i < 1000; i++) {
    Collections.shuffle(allTasks);
    final AbstractFuture<String> future=new AbstractFuture<String>(){
    }
;
    currentFuture.set(future);
    for (    Callable<?> task : allTasks) {
      executor.submit(task);
    }
    awaitUnchecked(barrier);
    assertThat(future.isDone()).isTrue();
    Object result=Iterables.getOnlyElement(finalResults);
    if (result instanceof CancellationException) {
      assertTrue(future.isCancelled());
      if (future.wasInterrupted()) {
        assertThat(numSuccessfulSetCalls.get()).isIn(Range.closed(1,2));
      }
 else {
        assertThat(numSuccessfulSetCalls.get()).isEqualTo(1);
      }
    }
 else {
      assertThat(numSuccessfulSetCalls.get()).isEqualTo(1);
    }
    numSuccessfulSetCalls.set(0);
    finalResults.clear();
  }
  executor.shutdown();
}
