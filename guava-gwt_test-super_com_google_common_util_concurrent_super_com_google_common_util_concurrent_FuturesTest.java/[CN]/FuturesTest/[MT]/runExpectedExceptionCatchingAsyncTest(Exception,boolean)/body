{
  AsyncFunctionSpy<Throwable,Integer> fallback=spy(new AsyncFunction<Throwable,Integer>(){
    @Override public ListenableFuture<Integer> apply(    Throwable t) throws Exception {
      if (!wrapInFuture) {
        throw expectedException;
      }
 else {
        return Futures.immediateFailedFuture(expectedException);
      }
    }
  }
);
  ListenableFuture<Integer> failingFuture=Futures.immediateFailedFuture(new RuntimeException());
  ListenableFuture<Integer> faultToleranteFuture=Futures.catchingAsync(failingFuture,Throwable.class,fallback);
  try {
    faultToleranteFuture.get();
    fail("An Exception should have been thrown!");
  }
 catch (  ExecutionException ee) {
    assertSame(expectedException,ee.getCause());
  }
  fallback.verifyCallCount(1);
}
