{
  final RuntimeException raisedException=new RuntimeException();
  AsyncFunctionSpy<Throwable,Integer> fallback=spy(new AsyncFunction<Throwable,Integer>(){
    @Override public ListenableFuture<Integer> apply(    Throwable t) throws Exception {
      assertThat(t).isSameAs(raisedException);
      return Futures.immediateFuture(20);
    }
  }
);
  ListenableFuture<Integer> failingFuture=Futures.immediateFailedFuture(raisedException);
  ListenableFuture<Integer> faultTolerantFuture=Futures.catchingAsync(failingFuture,Throwable.class,fallback);
  assertEquals(20,faultTolerantFuture.get().intValue());
  fallback.verifyCallCount(1);
}
