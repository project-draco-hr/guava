{
  Map<String,Integer> underlying=Maps.newLinkedHashMap();
  underlying.put("a",1);
  underlying.put("b",2);
  underlying.put("c",3);
  underlying.put("d",4);
  underlying.put("e",5);
  underlying.put("f",6);
  underlying.put("g",7);
  Map<String,String> map=Maps.transformValues(underlying,Functions.toStringFunction());
  map.remove("a");
  assertFalse(underlying.containsKey("a"));
  Set<String> keys=map.keySet();
  keys.remove("b");
  assertFalse(underlying.containsKey("b"));
  Iterator<String> keyIterator=keys.iterator();
  keyIterator.next();
  keyIterator.remove();
  assertFalse(underlying.containsKey("c"));
  Collection<String> values=map.values();
  values.remove("4");
  assertFalse(underlying.containsKey("d"));
  Iterator<String> valueIterator=values.iterator();
  valueIterator.next();
  valueIterator.remove();
  assertFalse(underlying.containsKey("e"));
  Set<Map.Entry<String,String>> entries=map.entrySet();
  Map.Entry<String,String> firstEntry=entries.iterator().next();
  entries.remove(firstEntry);
  assertFalse(underlying.containsKey("f"));
  Iterator<Map.Entry<String,String>> entryIterator=entries.iterator();
  entryIterator.next();
  entryIterator.remove();
  assertFalse(underlying.containsKey("g"));
  assertTrue(underlying.isEmpty());
  assertTrue(map.isEmpty());
  assertTrue(keys.isEmpty());
  assertTrue(values.isEmpty());
  assertTrue(entries.isEmpty());
}
