{
  ImmutableSet<Integer> elements=ImmutableSet.of(1,2,3);
  Set<Set<Integer>> powerSet=powerSet(elements);
  assertEquals(8,powerSet.size());
  assertEquals(4 * 1 + 4 * 2 + 4 * 3,powerSet.hashCode());
  Set<Set<Integer>> expected=newHashSet();
  expected.add(ImmutableSet.<Integer>of());
  expected.add(ImmutableSet.of(1));
  expected.add(ImmutableSet.of(2));
  expected.add(ImmutableSet.of(3));
  expected.add(ImmutableSet.of(1,2));
  expected.add(ImmutableSet.of(1,3));
  expected.add(ImmutableSet.of(2,3));
  expected.add(ImmutableSet.of(1,2,3));
  Set<Set<Integer>> almostPowerSet=newHashSet(expected);
  almostPowerSet.remove(ImmutableSet.of(1,2,3));
  almostPowerSet.add(ImmutableSet.of(1,2,4));
  new EqualsTester().addEqualityGroup(expected,powerSet).addEqualityGroup(ImmutableSet.of(1,2,3)).addEqualityGroup(almostPowerSet).testEquals();
  for (  Set<Integer> subset : expected) {
    assertTrue(powerSet.contains(subset));
  }
  assertFalse(powerSet.contains(ImmutableSet.of(1,2,4)));
  assertFalse(powerSet.contains(singleton(null)));
  assertFalse(powerSet.contains(null));
  assertFalse(powerSet.contains("notASet"));
}
