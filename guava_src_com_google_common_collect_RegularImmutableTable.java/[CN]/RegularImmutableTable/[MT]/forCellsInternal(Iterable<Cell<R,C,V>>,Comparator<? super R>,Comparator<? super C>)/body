{
  ImmutableSet.Builder<R> rowSpaceBuilder=ImmutableSet.builder();
  ImmutableSet.Builder<C> columnSpaceBuilder=ImmutableSet.builder();
  ImmutableList<Cell<R,C,V>> cellList=ImmutableList.copyOf(cells);
  for (  Cell<R,C,V> cell : cellList) {
    rowSpaceBuilder.add(cell.getRowKey());
    columnSpaceBuilder.add(cell.getColumnKey());
  }
  ImmutableSet<R> rowSpace=rowSpaceBuilder.build();
  if (rowComparator != null) {
    List<R> rowList=Ordering.from(rowComparator).immutableSortedCopy(rowSpace);
    rowSpace=ImmutableSet.copyOf(rowList);
  }
  ImmutableSet<C> columnSpace=columnSpaceBuilder.build();
  if (columnComparator != null) {
    List<C> columnList=Ordering.from(columnComparator).immutableSortedCopy(columnSpace);
    columnSpace=ImmutableSet.copyOf(columnList);
  }
  return (cellList.size() > (((long)rowSpace.size() * columnSpace.size()) / 2)) ? new DenseImmutableTable<R,C,V>(cellList,rowSpace,columnSpace) : new SparseImmutableTable<R,C,V>(cellList,rowSpace,columnSpace);
}
