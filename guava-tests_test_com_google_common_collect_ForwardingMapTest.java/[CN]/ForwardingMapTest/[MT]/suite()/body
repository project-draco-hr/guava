{
  TestSuite suite=new TestSuite();
  suite.addTestSuite(ForwardingMapTest.class);
  suite.addTest(MapTestSuiteBuilder.using(new TestStringMapGenerator(){
    @Override protected Map<String,String> create(    Entry<String,String>[] entries){
      Map<String,String> map=Maps.newLinkedHashMap();
      for (      Entry<String,String> entry : entries) {
        map.put(entry.getKey(),entry.getValue());
      }
      return new StandardImplForwardingMap<String,String>(map);
    }
  }
).named("ForwardingMap[LinkedHashMap] with standard implementations").withFeatures(CollectionSize.ANY,MapFeature.ALLOWS_NULL_VALUES,MapFeature.ALLOWS_NULL_KEYS,MapFeature.GENERAL_PURPOSE,CollectionFeature.SUPPORTS_ITERATOR_REMOVE,CollectionFeature.KNOWN_ORDER).createTestSuite());
  suite.addTest(MapTestSuiteBuilder.using(new TestStringMapGenerator(){
    @Override protected Map<String,String> create(    Entry<String,String>[] entries){
      ImmutableMap.Builder<String,String> builder=ImmutableMap.builder();
      for (      Entry<String,String> entry : entries) {
        builder.put(entry.getKey(),entry.getValue());
      }
      return new StandardImplForwardingMap<String,String>(builder.build());
    }
  }
).named("ForwardingMap[ImmutableMap] with standard implementations").withFeatures(CollectionSize.ANY,MapFeature.REJECTS_DUPLICATES_AT_CREATION,MapFeature.ALLOWS_NULL_QUERIES,CollectionFeature.KNOWN_ORDER).createTestSuite());
  return suite;
}
