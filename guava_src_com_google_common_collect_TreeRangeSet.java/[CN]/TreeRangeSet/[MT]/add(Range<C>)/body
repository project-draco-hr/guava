{
  checkNotNull(rangeToAdd);
  if (rangeToAdd.isEmpty()) {
    return;
  }
  Cut<C> lbToAdd=rangeToAdd.lowerBound;
  Cut<C> ubToAdd=rangeToAdd.upperBound;
  Entry<Cut<C>,Range<C>> entryBelowLB=rangesByLowerCut.lowerEntry(lbToAdd);
  if (entryBelowLB != null) {
    Range<C> rangeBelowLB=entryBelowLB.getValue();
    if (rangeBelowLB.upperBound.compareTo(lbToAdd) >= 0) {
      if (rangeBelowLB.upperBound.compareTo(ubToAdd) >= 0) {
        ubToAdd=rangeBelowLB.upperBound;
      }
      lbToAdd=rangeBelowLB.lowerBound;
    }
  }
  Entry<Cut<C>,Range<C>> entryBelowUB=rangesByLowerCut.floorEntry(ubToAdd);
  if (entryBelowUB != null) {
    Range<C> rangeBelowUB=entryBelowUB.getValue();
    if (rangeBelowUB.upperBound.compareTo(ubToAdd) >= 0) {
      ubToAdd=rangeBelowUB.upperBound;
    }
  }
  rangesByLowerCut.subMap(lbToAdd,ubToAdd).clear();
  replaceRangeWithSameLowerBound(new Range<C>(lbToAdd,ubToAdd));
}
