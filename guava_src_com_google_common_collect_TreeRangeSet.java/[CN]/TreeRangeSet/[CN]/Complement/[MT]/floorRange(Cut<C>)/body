{
  Iterator<Range<C>> candidatePositiveRanges=rangesByLowerCut.headMap(cut,false).descendingMap().values().iterator();
  if (candidatePositiveRanges.hasNext()) {
    Range<C> firstCandidate=candidatePositiveRanges.next();
    if (firstCandidate.upperBound.compareTo(cut) <= 0) {
      Cut<C> resultLowerBound=firstCandidate.upperBound;
      Cut<C> resultUpperBound=Objects.firstNonNull(rangesByLowerCut.higherKey(resultLowerBound),Cut.<C>aboveAll());
      return Range.create(resultLowerBound,resultUpperBound);
    }
 else     if (candidatePositiveRanges.hasNext()) {
      return Range.create(candidatePositiveRanges.next().upperBound,firstCandidate.lowerBound);
    }
 else     if (Cut.belowAll().equals(firstCandidate.lowerBound)) {
      return null;
    }
 else {
      return Range.create(Cut.<C>belowAll(),firstCandidate.lowerBound);
    }
  }
 else   if (rangesByLowerCut.isEmpty()) {
    return Range.all();
  }
 else {
    return Range.create(Cut.<C>belowAll(),rangesByLowerCut.firstKey());
  }
}
