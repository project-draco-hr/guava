{
  multimap.put("foo",1);
  multimap.put("foo",3);
  multimap.put("bar",4);
  Collection<Integer> values=multimap.get("foo");
  assertTrue(values.add(5));
  assertSize(4);
  assertEquals(3,multimap.get("foo").size());
  assertTrue(multimap.containsEntry("foo",5));
  values.clear();
  assertSize(1);
  assertFalse(multimap.containsKey("foo"));
  assertTrue(values.addAll(asList(7,9)));
  assertSize(3);
  assertEquals(2,multimap.get("foo").size());
  assertTrue(multimap.containsEntry("foo",7));
  assertTrue(multimap.containsEntry("foo",9));
  assertFalse(values.addAll(Collections.<Integer>emptyList()));
  assertSize(3);
  assertTrue(values.remove(7));
  assertSize(2);
  assertEquals(1,multimap.get("foo").size());
  assertFalse(multimap.containsEntry("foo",7));
  assertTrue(multimap.containsEntry("foo",9));
  assertFalse(values.remove(77));
  assertSize(2);
  assertTrue(values.add(11));
  assertTrue(values.add(13));
  assertTrue(values.add(15));
  assertTrue(values.add(17));
  assertTrue(values.removeAll(asList(11,15)));
  assertSize(4);
  ASSERT.that(multimap.get("foo")).hasContentsAnyOrder(9,13,17);
  assertFalse(values.removeAll(asList(21,25)));
  assertSize(4);
  assertTrue(values.retainAll(asList(13,17,19)));
  assertSize(3);
  ASSERT.that(multimap.get("foo")).hasContentsAnyOrder(13,17);
  assertFalse(values.retainAll(asList(13,17,19)));
  assertSize(3);
  values.remove(13);
  values.remove(17);
  assertTrue(multimap.get("foo").isEmpty());
  assertSize(1);
  assertFalse(multimap.containsKey("foo"));
}
