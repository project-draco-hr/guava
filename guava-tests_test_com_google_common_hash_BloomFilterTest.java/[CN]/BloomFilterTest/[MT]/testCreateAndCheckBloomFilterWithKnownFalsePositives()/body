{
  int numInsertions=1000000;
  BloomFilter<CharSequence> bf=BloomFilter.create(Funnels.unencodedCharsFunnel(),numInsertions);
  for (int i=0; i < numInsertions * 2; i+=2) {
    bf.put(Integer.toString(i));
  }
  for (int i=0; i < numInsertions * 2; i+=2) {
    assertTrue(bf.mightContain(Integer.toString(i)));
  }
  ImmutableSet<Integer> falsePositives=ImmutableSet.of(49,51,59,163,199,321,325,363,367,469,545,561,727,769,773,781);
  for (int i=1; i < 900; i+=2) {
    if (!falsePositives.contains(i)) {
      assertFalse("BF should not contain " + i,bf.mightContain(Integer.toString(i)));
    }
  }
  int knownNumberOfFalsePositives=29824;
  int numFpp=0;
  for (int i=1; i < numInsertions * 2; i+=2) {
    if (bf.mightContain(Integer.toString(i))) {
      numFpp++;
    }
  }
  assertEquals(knownNumberOfFalsePositives,numFpp);
  double actualFpp=(double)knownNumberOfFalsePositives / numInsertions;
  double expectedFpp=bf.expectedFpp();
  assertEquals(actualFpp,expectedFpp,0.00015);
}
