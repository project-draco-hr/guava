{
  for (int n=1; n < 1000; n++) {
    for (double fpp=Double.MIN_VALUE; fpp < 1.0; fpp+=0.001) {
      assertTrue(BloomFilter.optimalNumOfBits(n,fpp) >= 0);
    }
  }
  Random random=new Random(0);
  for (int repeats=0; repeats < 10000; repeats++) {
    assertTrue(BloomFilter.optimalNumOfBits(random.nextInt(1 << 16),random.nextDouble()) >= 0);
  }
  assertEquals(3327428144502L,BloomFilter.optimalNumOfBits(Integer.MAX_VALUE,Double.MIN_VALUE));
  try {
    BloomFilter.create(HashTestUtils.BAD_FUNNEL,Integer.MAX_VALUE,Double.MIN_VALUE);
    fail("we can't represent such a large BF!");
  }
 catch (  IllegalArgumentException expected) {
    assertThat(expected).hasMessage("Could not create BloomFilter of 3327428144502 bits");
  }
}
