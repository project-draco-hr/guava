{
  Iterator<Integer> iter=new AbstractIterator<Integer>(){
    private int rep;
    @Override public Integer computeNext(){
switch (rep++) {
case 0:
        return 0;
case 1:
      return 1;
case 2:
    return endOfData();
default :
  fail("Should not have been invoked again");
return null;
}
}
}
;
assertTrue(iter.hasNext());
assertEquals(0,(int)iter.next());
assertTrue(iter.hasNext());
assertTrue(iter.hasNext());
assertTrue(iter.hasNext());
assertEquals(1,(int)iter.next());
assertFalse(iter.hasNext());
assertFalse(iter.hasNext());
try {
iter.next();
fail("no exception thrown");
}
 catch (NoSuchElementException expected) {
}
}
