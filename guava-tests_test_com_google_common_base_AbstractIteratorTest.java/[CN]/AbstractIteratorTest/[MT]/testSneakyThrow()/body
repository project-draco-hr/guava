{
  Iterator<Integer> iter=new AbstractIterator<Integer>(){
    boolean haveBeenCalled;
    @Override public Integer computeNext(){
      if (haveBeenCalled) {
        fail("Should not have been called again");
      }
 else {
        haveBeenCalled=true;
        sneakyThrow(new SomeCheckedException());
      }
      return null;
    }
  }
;
  try {
    iter.hasNext();
    fail("No exception thrown");
  }
 catch (  Exception e) {
    if (!(e instanceof SomeCheckedException)) {
      throw e;
    }
  }
  try {
    iter.hasNext();
    fail("No exception thrown");
  }
 catch (  IllegalStateException expected) {
  }
}
