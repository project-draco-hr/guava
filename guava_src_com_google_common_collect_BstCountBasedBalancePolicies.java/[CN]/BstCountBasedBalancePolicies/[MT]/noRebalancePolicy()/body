{
  return new BstBalancePolicy<N>(){
    @Override public N balance(    BstNodeFactory<N> nodeFactory,    N source,    @Nullable N left,    @Nullable N right){
      return checkNotNull(nodeFactory).createNode(source,left,right);
    }
    @Nullable @Override public N combine(    BstNodeFactory<N> nodeFactory,    @Nullable N left,    @Nullable N right){
      if (left == null) {
        return right;
      }
 else       if (right == null) {
        return left;
      }
 else       if (left.count() > right.count()) {
        return nodeFactory.createNode(left,left.childOrNull(LEFT),combine(nodeFactory,left.childOrNull(RIGHT),right));
      }
 else {
        return nodeFactory.createNode(right,combine(nodeFactory,left,right.childOrNull(LEFT)),right.childOrNull(RIGHT));
      }
    }
  }
;
}
