{
  checkNonNegative("x",x);
  if (fitsInInt(x)) {
    return IntMath.sqrt((int)x,mode);
  }
  long sqrtFloor=sqrtFloor(x);
switch (mode) {
case UNNECESSARY:
    checkRoundingUnnecessary(sqrtFloor * sqrtFloor == x);
case FLOOR:
case DOWN:
  return sqrtFloor;
case CEILING:
case UP:
return sqrtFloor + lessThanBranchFree(sqrtFloor * sqrtFloor,x);
case HALF_DOWN:
case HALF_UP:
case HALF_EVEN:
long halfSquare=sqrtFloor * sqrtFloor + sqrtFloor;
return sqrtFloor + lessThanBranchFree(halfSquare,x);
default :
throw new AssertionError();
}
}
