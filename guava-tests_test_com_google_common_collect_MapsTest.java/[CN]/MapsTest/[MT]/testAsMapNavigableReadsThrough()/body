{
  NavigableSet<String> strings=Sets.newTreeSet();
  Collections.addAll(strings,"one","two","three");
  NavigableMap<String,Integer> map=Maps.asMap(strings,LENGTH_FUNCTION);
  assertNull(map.comparator());
  assertEquals(ImmutableSortedMap.of("one",3,"two",3,"three",5),map);
  assertNull(map.get("four"));
  strings.add("four");
  assertEquals(ImmutableSortedMap.of("one",3,"two",3,"three",5,"four",4),map);
  assertEquals(Integer.valueOf(4),map.get("four"));
  SortedMap<String,Integer> headMap=map.headMap("two");
  assertEquals(ImmutableSortedMap.of("four",4,"one",3,"three",5),headMap);
  strings.add("five");
  strings.remove("one");
  assertEquals(ImmutableSortedMap.of("five",4,"four",4,"three",5),headMap);
  ASSERT.that(map.entrySet()).has().allOf(mapEntry("five",4),mapEntry("four",4),mapEntry("three",5),mapEntry("two",3)).inOrder();
  NavigableMap<String,Integer> tailMap=map.tailMap("s",true);
  NavigableMap<String,Integer> subMap=map.subMap("a",true,"t",false);
  strings.add("six");
  strings.remove("two");
  ASSERT.that(tailMap.entrySet()).has().allOf(mapEntry("six",3),mapEntry("three",5)).inOrder();
  ASSERT.that(subMap.entrySet()).has().allOf(mapEntry("five",4),mapEntry("four",4),mapEntry("six",3)).inOrder();
}
