{
  SortedMap<Integer,String> left=ImmutableSortedMap.<Integer,String>reverseOrder().put(1,"a").put(2,"b").put(3,"c").put(4,"d").put(5,"e").build();
  SortedMap<Integer,String> right=ImmutableSortedMap.of(1,"a",3,"f",5,"g",6,"z");
  SortedMapDifference<Integer,String> diff1=Maps.difference(left,right);
  assertFalse(diff1.areEqual());
  assertThat(diff1.entriesOnlyOnLeft().entrySet()).has().exactly(Maps.immutableEntry(4,"d"),Maps.immutableEntry(2,"b")).inOrder();
  assertThat(diff1.entriesOnlyOnRight().entrySet()).has().item(Maps.immutableEntry(6,"z"));
  assertThat(diff1.entriesInCommon().entrySet()).has().item(Maps.immutableEntry(1,"a"));
  assertThat(diff1.entriesDiffering().entrySet()).has().exactly(Maps.immutableEntry(5,ValueDifferenceImpl.create("e","g")),Maps.immutableEntry(3,ValueDifferenceImpl.create("c","f"))).inOrder();
  assertEquals("not equal: only on left={4=d, 2=b}: only on right={6=z}: " + "value differences={5=(e, g), 3=(c, f)}",diff1.toString());
  SortedMapDifference<Integer,String> diff2=Maps.difference(right,left);
  assertFalse(diff2.areEqual());
  assertThat(diff2.entriesOnlyOnLeft().entrySet()).has().item(Maps.immutableEntry(6,"z"));
  assertThat(diff2.entriesOnlyOnRight().entrySet()).has().exactly(Maps.immutableEntry(2,"b"),Maps.immutableEntry(4,"d")).inOrder();
  assertThat(diff1.entriesInCommon().entrySet()).has().item(Maps.immutableEntry(1,"a"));
  assertEquals(ImmutableMap.of(3,ValueDifferenceImpl.create("f","c"),5,ValueDifferenceImpl.create("g","e")),diff2.entriesDiffering());
  assertEquals("not equal: only on left={6=z}: only on right={2=b, 4=d}: " + "value differences={3=(f, c), 5=(g, e)}",diff2.toString());
}
