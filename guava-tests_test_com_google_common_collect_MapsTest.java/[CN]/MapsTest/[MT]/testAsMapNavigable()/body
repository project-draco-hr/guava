{
  NavigableSet<String> strings=Sets.newTreeSet(asList("one","two","three"));
  NavigableMap<String,Integer> map=Maps.asMap(strings,LENGTH_FUNCTION);
  assertEquals(ImmutableMap.of("one",3,"two",3,"three",5),map);
  assertEquals(Integer.valueOf(5),map.get("three"));
  assertNull(map.get("five"));
  assertThat(map.entrySet()).has().exactly(mapEntry("one",3),mapEntry("three",5),mapEntry("two",3)).inOrder();
  assertThat(map.tailMap("onea").entrySet()).has().exactly(mapEntry("three",5),mapEntry("two",3)).inOrder();
  assertThat(map.subMap("one","two").entrySet()).has().exactly(mapEntry("one",3),mapEntry("three",5)).inOrder();
  assertEquals(ImmutableSortedMap.of("two",3,"three",5),map.tailMap("three",true));
  assertEquals(ImmutableSortedMap.of("one",3,"three",5),map.headMap("two",false));
  assertEquals(ImmutableSortedMap.of("three",5),map.subMap("one",false,"tr",true));
  assertEquals("three",map.higherKey("one"));
  assertEquals("three",map.higherKey("r"));
  assertEquals("three",map.ceilingKey("r"));
  assertEquals("one",map.ceilingKey("one"));
  assertEquals(mapEntry("three",5),map.higherEntry("one"));
  assertEquals(mapEntry("one",3),map.ceilingEntry("one"));
  assertEquals("one",map.lowerKey("three"));
  assertEquals("one",map.lowerKey("r"));
  assertEquals("one",map.floorKey("r"));
  assertEquals("three",map.floorKey("three"));
  assertThat(map.descendingMap().entrySet()).has().exactly(mapEntry("two",3),mapEntry("three",5),mapEntry("one",3)).inOrder();
  assertEquals(map.headMap("three",true),map.descendingMap().tailMap("three",true));
  assertThat(map.tailMap("three",false).entrySet()).has().item(mapEntry("two",3));
  assertNull(map.tailMap("three",true).lowerEntry("three"));
  assertThat(map.headMap("two",false).values()).has().exactly(3,5).inOrder();
  assertThat(map.headMap("two",false).descendingMap().values()).has().exactly(5,3).inOrder();
  assertThat(map.descendingKeySet()).has().exactly("two","three","one").inOrder();
  assertEquals(mapEntry("one",3),map.pollFirstEntry());
  assertEquals(mapEntry("two",3),map.pollLastEntry());
  assertEquals(1,map.size());
}
