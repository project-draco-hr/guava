{
  NavigableSet<String> strings=Sets.newTreeSet(asList("one","two","three"));
  NavigableMap<String,Integer> map=Maps.asMap(strings,LENGTH_FUNCTION);
  assertEquals(ImmutableMap.of("one",3,"two",3,"three",5),map);
  assertEquals(Integer.valueOf(5),map.get("three"));
  assertNull(map.get("five"));
  ASSERT.that(map.entrySet()).hasContentsInOrder(mapEntry("one",3),mapEntry("three",5),mapEntry("two",3));
  ASSERT.that(map.tailMap("onea").entrySet()).hasContentsInOrder(mapEntry("three",5),mapEntry("two",3));
  ASSERT.that(map.subMap("one","two").entrySet()).hasContentsInOrder(mapEntry("one",3),mapEntry("three",5));
  assertEquals(ImmutableSortedMap.of("two",3,"three",5),map.tailMap("three",true));
  assertEquals(ImmutableSortedMap.of("one",3,"three",5),map.headMap("two",false));
  assertEquals(ImmutableSortedMap.of("three",5),map.subMap("one",false,"tr",true));
  assertEquals("three",map.higherKey("one"));
  assertEquals("three",map.higherKey("r"));
  assertEquals("three",map.ceilingKey("r"));
  assertEquals("one",map.ceilingKey("one"));
  assertEquals(mapEntry("three",5),map.higherEntry("one"));
  assertEquals(mapEntry("one",3),map.ceilingEntry("one"));
  assertEquals("one",map.lowerKey("three"));
  assertEquals("one",map.lowerKey("r"));
  assertEquals("one",map.floorKey("r"));
  assertEquals("three",map.floorKey("three"));
  ASSERT.that(map.descendingMap().entrySet()).hasContentsInOrder(mapEntry("two",3),mapEntry("three",5),mapEntry("one",3));
  assertEquals(map.headMap("three",true),map.descendingMap().tailMap("three",true));
  ASSERT.that(map.tailMap("three",false).entrySet()).hasContentsInOrder(mapEntry("two",3));
  assertNull(map.tailMap("three",true).lowerEntry("three"));
  ASSERT.that(map.headMap("two",false).values()).hasContentsInOrder(3,5);
  ASSERT.that(map.headMap("two",false).descendingMap().values()).hasContentsInOrder(5,3);
  ASSERT.that(map.descendingKeySet()).hasContentsInOrder("two","three","one");
  assertEquals(mapEntry("one",3),map.pollFirstEntry());
  assertEquals(mapEntry("two",3),map.pollLastEntry());
  assertEquals(1,map.size());
}
