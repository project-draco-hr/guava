{
  Map<Object,Object> map1=ImmutableMap.<Object,Object>of(1,2);
  Map<Object,Number> map2=ImmutableMap.<Object,Number>of(1,2);
  Map<Object,Integer> map3=ImmutableMap.<Object,Integer>of(1,2);
  Map<Number,Object> map4=ImmutableMap.<Number,Object>of(1,2);
  Map<Number,Number> map5=ImmutableMap.<Number,Number>of(1,2);
  Map<Number,Integer> map6=ImmutableMap.<Number,Integer>of(1,2);
  Map<Integer,Object> map7=ImmutableMap.<Integer,Object>of(1,2);
  Map<Integer,Number> map8=ImmutableMap.<Integer,Number>of(1,2);
  Map<Integer,Integer> map9=ImmutableMap.<Integer,Integer>of(1,2);
  Map<? extends Number,? extends Number> map0=ImmutableMap.of(1,2);
  EntryTransformer<Number,Number,Double> transformer=new EntryTransformer<Number,Number,Double>(){
    @Override public Double transformEntry(    Number key,    Number value){
      return key.doubleValue() + value.doubleValue();
    }
  }
;
  Map<Object,Double> objectKeyed;
  Map<Number,Double> numberKeyed;
  Map<Integer,Double> integerKeyed;
  numberKeyed=transformEntries(map5,transformer);
  numberKeyed=transformEntries(map6,transformer);
  integerKeyed=transformEntries(map8,transformer);
  integerKeyed=transformEntries(map9,transformer);
  Map<? extends Number,Double> wildcarded=transformEntries(map0,transformer);
}
