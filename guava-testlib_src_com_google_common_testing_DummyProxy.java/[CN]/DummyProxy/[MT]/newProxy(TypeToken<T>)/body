{
  Set<Class<? super T>> interfaceClasses=interfaceType.getTypes().interfaces().rawTypes();
  Object dummy=Proxy.newProxyInstance(interfaceClasses.iterator().next().getClassLoader(),interfaceClasses.toArray(new Class<?>[interfaceClasses.size()]),new AbstractInvocationHandler(){
    @Override protected Object handleInvocation(    Object proxy,    Method method,    Object[] args){
      Invokable<?,?> invokable=interfaceType.method(method);
      ImmutableList<Parameter> params=invokable.getParameters();
      for (int i=0; i < args.length; i++) {
        Parameter param=params.get(i);
        if (!param.isAnnotationPresent(Nullable.class)) {
          Preconditions.checkNotNull(args[i]);
        }
      }
      return dummyReturnValue(interfaceType.resolveType(method.getGenericReturnType()));
    }
    @Override public String toString(){
      return "Dummy proxy for " + interfaceType;
    }
  }
);
  @SuppressWarnings("unchecked") T result=(T)dummy;
  return result;
}
