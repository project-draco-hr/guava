{
  TestSuite suite=new TestSuite();
  suite.addTest(ListMultimapTestSuiteBuilder.using(new TestStringListMultimapGenerator(){
    @Override protected ListMultimap<String,String> create(    Entry<String,String>[] entries){
      ListMultimap<String,String> multimap=Multimaps.synchronizedListMultimap(ArrayListMultimap.<String,String>create());
      for (      Entry<String,String> entry : entries) {
        multimap.put(entry.getKey(),entry.getValue());
      }
      return multimap;
    }
  }
).named("synchronized ArrayListMultimap").withFeatures(MapFeature.ALLOWS_NULL_KEYS,MapFeature.ALLOWS_NULL_VALUES,MapFeature.GENERAL_PURPOSE,MapFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION,CollectionSize.ANY).createTestSuite());
  suite.addTest(transformSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      PopulatableMapAsMultimap<Integer,String> multimap=PopulatableMapAsMultimap.create();
      populateMultimapForGet(multimap,elements);
      return multimap.build().get(3);
    }
  }
).named("Multimaps.forMap.get").withFeatures(FOR_MAP_FEATURES_ONE).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      SetMultimap<Integer,String> multimap=LinkedHashMultimap.create();
      populateMultimapForGet(multimap,elements);
      multimap.put(3,"badvalue");
      multimap.put(55556,"foo");
      return (Set<String>)Multimaps.filterEntries(multimap,FILTER_GET_PREDICATE).get(3);
    }
  }
).named("Multimaps.filterEntries.get").withFeatures(COLLECTION_FEATURES_ORDER).suppressing(CollectionIteratorTester.getIteratorKnownOrderRemoveSupportedMethod()).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      PopulatableMapAsMultimap<String,Integer> multimap=PopulatableMapAsMultimap.create();
      populateMultimapForKeySet(multimap,elements);
      return multimap.build().keySet();
    }
  }
).named("Multimaps.forMap.keySet").withFeatures(FOR_MAP_FEATURES_ANY).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      SetMultimap<String,Integer> multimap=LinkedHashMultimap.create();
      populateMultimapForKeySet(multimap,elements);
      multimap.put("badkey",3);
      multimap.put("a",55556);
      return Multimaps.filterEntries(multimap,FILTER_KEYSET_PREDICATE).keySet();
    }
  }
).named("Multimaps.filterEntries.keySet").withFeatures(COLLECTION_FEATURES_REMOVE_ORDER).suppressing(CollectionIteratorTester.getIteratorKnownOrderRemoveSupportedMethod()).createTestSuite());
  suite.addTest(CollectionTestSuiteBuilder.using(new TestStringCollectionGenerator(){
    @Override public Collection<String> create(    String[] elements){
      Multimap<Integer,String> multimap=LinkedHashMultimap.create();
      populateMultimapForValues(multimap,elements);
      multimap.put(3,"badvalue");
      multimap.put(55556,"foo");
      return Multimaps.filterEntries(multimap,FILTER_GET_PREDICATE).values();
    }
  }
).named("Multimaps.filterEntries.values").withFeatures(COLLECTION_FEATURES_REMOVE_ORDER).suppressing(CollectionIteratorTester.getIteratorKnownOrderRemoveSupportedMethod()).createTestSuite());
  suite.addTest(MultisetTestSuiteBuilder.using(new TestStringMultisetGenerator(){
    @Override protected Multiset<String> create(    String[] elements){
      PopulatableMapAsMultimap<String,Integer> multimap=PopulatableMapAsMultimap.create();
      populateMultimapForKeys(multimap,elements);
      return multimap.build().keys();
    }
  }
).named("Multimaps.forMap.keys").withFeatures(FOR_MAP_FEATURES_ANY).suppressing(getReadsDuplicateInitializingMethods()).suppressing(getSetCountDuplicateInitializingMethods()).suppressing(getIteratorDuplicateInitializingMethods()).createTestSuite());
  suite.addTest(MultisetTestSuiteBuilder.using(new TestStringMultisetGenerator(){
    @Override protected Multiset<String> create(    String[] elements){
      SetMultimap<String,Integer> multimap=LinkedHashMultimap.create();
      populateMultimapForKeys(multimap,elements);
      multimap.put("badkey",3);
      multimap.put("a",55556);
      return Multimaps.filterEntries(multimap,FILTER_KEYSET_PREDICATE).keys();
    }
  }
).named("Multimaps.filterEntries.keys").withFeatures(COLLECTION_FEATURES_REMOVE_ORDER).suppressing(CollectionIteratorTester.getIteratorKnownOrderRemoveSupportedMethod()).suppressing(MultisetWritesTester.getEntrySetIteratorMethod()).suppressing(getIteratorDuplicateInitializingMethods()).createTestSuite());
  suite.addTest(CollectionTestSuiteBuilder.using(new TestEntriesGenerator(){
    @Override Multimap<String,Integer> createMultimap(){
      Multimap<String,Integer> multimap=LinkedHashMultimap.create();
      multimap.put("badkey",3);
      multimap.put("a",55556);
      return Multimaps.filterEntries(multimap,FILTER_KEYSET_PREDICATE);
    }
  }
).named("Multimap.filterEntries.entries").withFeatures(CollectionSize.ANY,CollectionFeature.SUPPORTS_REMOVE,CollectionFeature.KNOWN_ORDER).suppressing(CollectionIteratorTester.getIteratorKnownOrderRemoveSupportedMethod()).createTestSuite());
  return suite;
}
