{
  TestSuite suite=new TestSuite();
  suite.addTest(transformSuite());
  suite.addTest(filterSuite());
  suite.addTest(ListMultimapTestSuiteBuilder.using(new TestStringListMultimapGenerator(){
    @Override protected ListMultimap<String,String> create(    Entry<String,String>[] entries){
      ListMultimap<String,String> multimap=Multimaps.synchronizedListMultimap(ArrayListMultimap.<String,String>create());
      for (      Entry<String,String> entry : entries) {
        multimap.put(entry.getKey(),entry.getValue());
      }
      return multimap;
    }
  }
).named("synchronized ArrayListMultimap").withFeatures(MapFeature.ALLOWS_NULL_KEYS,MapFeature.ALLOWS_NULL_VALUES,MapFeature.GENERAL_PURPOSE,MapFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION,CollectionFeature.SUPPORTS_ITERATOR_REMOVE,CollectionSize.ANY).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      PopulatableMapAsMultimap<Integer,String> multimap=PopulatableMapAsMultimap.create();
      populateMultimapForGet(multimap,elements);
      return multimap.build().get(3);
    }
  }
).named("Multimaps.forMap.get").withFeatures(FOR_MAP_FEATURES_ONE).createTestSuite());
  suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator(){
    @Override protected Set<String> create(    String[] elements){
      PopulatableMapAsMultimap<String,Integer> multimap=PopulatableMapAsMultimap.create();
      populateMultimapForKeySet(multimap,elements);
      return multimap.build().keySet();
    }
  }
).named("Multimaps.forMap.keySet").withFeatures(FOR_MAP_FEATURES_ANY).createTestSuite());
  suite.addTest(MultisetTestSuiteBuilder.using(new TestStringMultisetGenerator(){
    @Override protected Multiset<String> create(    String[] elements){
      PopulatableMapAsMultimap<String,Integer> multimap=PopulatableMapAsMultimap.create();
      populateMultimapForKeys(multimap,elements);
      return multimap.build().keys();
    }
  }
).named("Multimaps.forMap.keys").withFeatures(FOR_MAP_FEATURES_ANY).suppressing(getReadsDuplicateInitializingMethods()).suppressing(getSetCountDuplicateInitializingMethods()).suppressing(getIteratorDuplicateInitializingMethods()).createTestSuite());
  return suite;
}
