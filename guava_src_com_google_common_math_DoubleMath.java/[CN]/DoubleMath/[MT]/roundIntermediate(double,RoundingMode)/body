{
  if (!isFinite(x)) {
    throw new ArithmeticException("input is infinite or NaN");
  }
switch (mode) {
case UNNECESSARY:
    checkRoundingUnnecessary(isMathematicalInteger(x));
  return x;
case FLOOR:
return (x >= 0.0) ? x : Math.floor(x);
case CEILING:
return (x >= 0.0) ? Math.ceil(x) : x;
case DOWN:
return x;
case UP:
return (x >= 0.0) ? Math.ceil(x) : Math.floor(x);
case HALF_EVEN:
return Math.rint(x);
case HALF_UP:
if (isMathematicalInteger(x)) {
return x;
}
 else {
return (x >= 0.0) ? x + 0.5 : x - 0.5;
}
case HALF_DOWN:
if (isMathematicalInteger(x)) {
return x;
}
 else if (x >= 0.0) {
double z=x + 0.5;
return (z == x) ? x : DoubleUtils.nextDown(z);
}
 else {
double z=x - 0.5;
return (z == x) ? x : Math.nextUp(z);
}
default :
throw new AssertionError();
}
}
