{
  List<Integer> colorElem=asList(0x00,0x33,0x66,0x99,0xCC,0xFF);
  ImmutableList.Builder<Integer> webSafeColorsBuilder=ImmutableList.builder();
  for (  Integer red : colorElem) {
    for (    Integer green : colorElem) {
      for (      Integer blue : colorElem) {
        webSafeColorsBuilder.add((red << 16) + (green << 8) + blue);
      }
    }
  }
  ImmutableList<Integer> webSafeColors=webSafeColorsBuilder.build();
  assertEquals(216,webSafeColors.size());
  Integer[] webSafeColorArray=webSafeColors.toArray(new Integer[webSafeColors.size()]);
  assertEquals(0x000000,(int)webSafeColorArray[0]);
  assertEquals(0x000033,(int)webSafeColorArray[1]);
  assertEquals(0x000066,(int)webSafeColorArray[2]);
  assertEquals(0x003300,(int)webSafeColorArray[6]);
  assertEquals(0x330000,(int)webSafeColorArray[36]);
  assertEquals(0x000066,(int)webSafeColors.get(2));
  assertEquals(0x003300,(int)webSafeColors.get(6));
  ImmutableList<Integer> addedColor=webSafeColorsBuilder.add(0x00BFFF).build();
  assertEquals("Modifying the builder should not have changed any already" + " built sets",216,webSafeColors.size());
  assertEquals("the new array should be one bigger than webSafeColors",217,addedColor.size());
  Integer[] appendColorArray=addedColor.toArray(new Integer[addedColor.size()]);
  assertEquals(0x00BFFF,(int)appendColorArray[216]);
}
