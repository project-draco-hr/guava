{
  final Iterator<Map.Entry<E,Integer>> backingEntries=backingMap.entrySet().iterator();
  return new UnmodifiableIterator<Multiset.Entry<E>>(){
    @Override public boolean hasNext(){
      return backingEntries.hasNext();
    }
    @Override public Multiset.Entry<E> next(){
      final Map.Entry<E,Integer> mapEntry=backingEntries.next();
      return new Multisets.AbstractEntry<E>(){
        @Override public E getElement(){
          return mapEntry.getKey();
        }
        @Override public int getCount(){
          Integer frequency=backingMap.get(getElement());
          return (frequency == null) ? 0 : frequency;
        }
      }
;
    }
  }
;
}
