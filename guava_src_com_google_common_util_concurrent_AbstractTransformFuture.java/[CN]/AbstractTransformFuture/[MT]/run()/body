{
  ListenableFuture<? extends I> localInputFuture=inputFuture;
  F localFunction=function;
  if (isCancelled() | localInputFuture == null | localFunction == null) {
    return;
  }
  inputFuture=null;
  function=null;
  I sourceResult;
  try {
    sourceResult=getUninterruptibly(localInputFuture);
  }
 catch (  CancellationException e) {
    cancel(false);
    return;
  }
catch (  ExecutionException e) {
    setException(e.getCause());
    return;
  }
catch (  RuntimeException e) {
    setException(e);
    return;
  }
catch (  Error e) {
    setException(e);
    return;
  }
  T transformResult;
  try {
    transformResult=doTransform(localFunction,sourceResult);
  }
 catch (  UndeclaredThrowableException e) {
    setException(e.getCause());
    return;
  }
catch (  Throwable t) {
    setException(t);
    return;
  }
  setResult(transformResult);
}
