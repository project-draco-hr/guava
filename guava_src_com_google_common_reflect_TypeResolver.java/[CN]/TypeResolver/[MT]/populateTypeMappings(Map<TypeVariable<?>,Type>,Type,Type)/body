{
  if (from.equals(to)) {
    return;
  }
  if (from instanceof TypeVariable) {
    mappings.put((TypeVariable<?>)from,to);
  }
 else   if (from instanceof GenericArrayType) {
    populateTypeMappings(mappings,((GenericArrayType)from).getGenericComponentType(),checkNonNullArgument(Types.getComponentType(to),"%s is not an array type.",to));
  }
 else   if (from instanceof ParameterizedType) {
    ParameterizedType fromParameterizedType=(ParameterizedType)from;
    ParameterizedType toParameterizedType=expectArgument(ParameterizedType.class,to);
    checkArgument(fromParameterizedType.getRawType().equals(toParameterizedType.getRawType()),"Inconsistent raw type: %s vs. %s",from,to);
    Type[] fromArgs=fromParameterizedType.getActualTypeArguments();
    Type[] toArgs=toParameterizedType.getActualTypeArguments();
    checkArgument(fromArgs.length == toArgs.length);
    for (int i=0; i < fromArgs.length; i++) {
      populateTypeMappings(mappings,fromArgs[i],toArgs[i]);
    }
  }
 else   if (from instanceof WildcardType) {
    WildcardType fromWildcardType=(WildcardType)from;
    WildcardType toWildcardType=expectArgument(WildcardType.class,to);
    Type[] fromUpperBounds=fromWildcardType.getUpperBounds();
    Type[] toUpperBounds=toWildcardType.getUpperBounds();
    Type[] fromLowerBounds=fromWildcardType.getLowerBounds();
    Type[] toLowerBounds=toWildcardType.getLowerBounds();
    checkArgument(fromUpperBounds.length == toUpperBounds.length && fromLowerBounds.length == toLowerBounds.length,"Incompatible type: %s vs. %s",from,to);
    for (int i=0; i < fromUpperBounds.length; i++) {
      populateTypeMappings(mappings,fromUpperBounds[i],toUpperBounds[i]);
    }
    for (int i=0; i < fromLowerBounds.length; i++) {
      populateTypeMappings(mappings,fromLowerBounds[i],toLowerBounds[i]);
    }
  }
 else {
    throw new IllegalArgumentException("No type mapping from " + from);
  }
}
