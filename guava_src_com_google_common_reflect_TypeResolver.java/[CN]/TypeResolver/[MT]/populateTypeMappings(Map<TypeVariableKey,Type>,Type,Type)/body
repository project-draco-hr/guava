{
  if (from.equals(to)) {
    return;
  }
  new TypeVisitor(){
    @Override void visitTypeVariable(    TypeVariable<?> typeVariable){
      mappings.put(new TypeVariableKey(typeVariable),to);
    }
    @Override void visitWildcardType(    WildcardType fromWildcardType){
      if (!(to instanceof WildcardType)) {
        return;
      }
      WildcardType toWildcardType=(WildcardType)to;
      Type[] fromUpperBounds=fromWildcardType.getUpperBounds();
      Type[] toUpperBounds=toWildcardType.getUpperBounds();
      Type[] fromLowerBounds=fromWildcardType.getLowerBounds();
      Type[] toLowerBounds=toWildcardType.getLowerBounds();
      checkArgument(fromUpperBounds.length == toUpperBounds.length && fromLowerBounds.length == toLowerBounds.length,"Incompatible type: %s vs. %s",fromWildcardType,to);
      for (int i=0; i < fromUpperBounds.length; i++) {
        populateTypeMappings(mappings,fromUpperBounds[i],toUpperBounds[i]);
      }
      for (int i=0; i < fromLowerBounds.length; i++) {
        populateTypeMappings(mappings,fromLowerBounds[i],toLowerBounds[i]);
      }
    }
    @Override void visitParameterizedType(    ParameterizedType fromParameterizedType){
      if (to instanceof WildcardType) {
        return;
      }
      ParameterizedType toParameterizedType=expectArgument(ParameterizedType.class,to);
      checkArgument(fromParameterizedType.getRawType().equals(toParameterizedType.getRawType()),"Inconsistent raw type: %s vs. %s",fromParameterizedType,to);
      Type[] fromArgs=fromParameterizedType.getActualTypeArguments();
      Type[] toArgs=toParameterizedType.getActualTypeArguments();
      checkArgument(fromArgs.length == toArgs.length,"%s not compatible with %s",fromParameterizedType,toParameterizedType);
      for (int i=0; i < fromArgs.length; i++) {
        populateTypeMappings(mappings,fromArgs[i],toArgs[i]);
      }
    }
    @Override void visitGenericArrayType(    GenericArrayType fromArrayType){
      if (to instanceof WildcardType) {
        return;
      }
      Type componentType=Types.getComponentType(to);
      checkArgument(componentType != null,"%s is not an array type.",to);
      populateTypeMappings(mappings,fromArrayType.getGenericComponentType(),componentType);
    }
    @Override void visitClass(    Class<?> fromClass){
      if (to instanceof WildcardType) {
        return;
      }
      throw new IllegalArgumentException("No type mapping from " + fromClass + " to "+ to);
    }
  }
.visit(from);
}
