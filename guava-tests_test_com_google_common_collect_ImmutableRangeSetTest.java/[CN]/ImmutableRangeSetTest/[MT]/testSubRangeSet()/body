{
  ImmutableList.Builder<Range<Integer>> rangesBuilder=ImmutableList.builder();
  rangesBuilder.add(Range.<Integer>all());
  for (int i=-2; i <= 2; i++) {
    for (    BoundType boundType : BoundType.values()) {
      rangesBuilder.add(Range.upTo(i,boundType));
      rangesBuilder.add(Range.downTo(i,boundType));
    }
    for (int j=i + 1; j <= 2; j++) {
      for (      BoundType lbType : BoundType.values()) {
        for (        BoundType ubType : BoundType.values()) {
          rangesBuilder.add(Range.range(i,lbType,j,ubType));
        }
      }
    }
  }
  ImmutableList<Range<Integer>> ranges=rangesBuilder.build();
  for (int i=-2; i <= 2; i++) {
    rangesBuilder.add(Range.closedOpen(i,i));
    rangesBuilder.add(Range.openClosed(i,i));
  }
  ImmutableList<Range<Integer>> subRanges=rangesBuilder.build();
  for (  Range<Integer> range1 : ranges) {
    for (    Range<Integer> range2 : ranges) {
      if (!range1.isConnected(range2) || range1.intersection(range2).isEmpty()) {
        ImmutableRangeSet<Integer> rangeSet=ImmutableRangeSet.<Integer>builder().add(range1).add(range2).build();
        for (        Range<Integer> subRange : subRanges) {
          RangeSet<Integer> expected=TreeRangeSet.create();
          for (          Range<Integer> range : rangeSet.asRanges()) {
            if (range.isConnected(subRange)) {
              expected.add(range.intersection(subRange));
            }
          }
          ImmutableRangeSet<Integer> subRangeSet=rangeSet.subRangeSet(subRange);
          assertEquals(expected,subRangeSet);
          assertEquals(expected.asRanges(),subRangeSet.asRanges());
          if (!expected.isEmpty()) {
            assertEquals(expected.span(),subRangeSet.span());
          }
          for (int i=-3; i <= 3; i++) {
            assertEquals(expected.contains(i),subRangeSet.contains(i));
          }
        }
      }
    }
  }
}
