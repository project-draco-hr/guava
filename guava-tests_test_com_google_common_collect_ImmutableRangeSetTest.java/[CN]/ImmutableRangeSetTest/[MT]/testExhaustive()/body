{
  @SuppressWarnings("unchecked") ImmutableSet<Range<Integer>> ranges=ImmutableSet.of(Range.<Integer>all(),Range.<Integer>closedOpen(3,5),Range.singleton(1),Range.lessThan(2),Range.greaterThan(10),Range.atMost(4),Range.atLeast(3),Range.closed(4,6),Range.closedOpen(1,3),Range.openClosed(5,7),Range.open(3,4));
  for (  Set<Range<Integer>> subset : Sets.powerSet(ranges)) {
    RangeSet<Integer> mutable=TreeRangeSet.create();
    ImmutableRangeSet.Builder<Integer> builder=ImmutableRangeSet.builder();
    int expectedRanges=0;
    for (    Range<Integer> range : subset) {
      boolean overlaps=false;
      for (      Range<Integer> other : mutable.asRanges()) {
        if (other.isConnected(range) && !other.intersection(range).isEmpty()) {
          overlaps=true;
        }
      }
      try {
        builder.add(range);
        assertFalse(overlaps);
        mutable.add(range);
      }
 catch (      IllegalArgumentException e) {
        assertTrue(overlaps);
      }
    }
    ImmutableRangeSet<Integer> built=builder.build();
    assertEquals(mutable,built);
    assertEquals(ImmutableRangeSet.copyOf(mutable),built);
    assertEquals(mutable.complement(),built.complement());
    for (int i=0; i <= 11; i++) {
      assertEquals(mutable.contains(i),built.contains(i));
    }
    SerializableTester.reserializeAndAssert(built);
  }
}
