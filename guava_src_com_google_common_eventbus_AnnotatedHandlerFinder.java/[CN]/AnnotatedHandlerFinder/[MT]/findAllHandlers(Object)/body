{
  Multimap<Class<?>,EventHandler> methodsInListener=HashMultimap.create();
  Class<?> clazz=listener.getClass();
  Set<? extends Class<?>> supers=TypeToken.of(clazz).getTypes().rawTypes();
  for (  Method method : clazz.getMethods()) {
    for (    Class<?> c : supers) {
      try {
        Method m=c.getMethod(method.getName(),method.getParameterTypes());
        if (m.isAnnotationPresent(Subscribe.class)) {
          Class<?>[] parameterTypes=method.getParameterTypes();
          if (parameterTypes.length != 1) {
            throw new IllegalArgumentException("Method " + method + " has @Subscribe annotation, but requires "+ parameterTypes.length+ " arguments.  Event handler methods must require a single argument.");
          }
          Class<?> eventType=parameterTypes[0];
          EventHandler handler=makeHandler(listener,method);
          methodsInListener.put(eventType,handler);
          break;
        }
      }
 catch (      NoSuchMethodException ignored) {
      }
    }
  }
  return methodsInListener;
}
