{
  TestSuite suite=new TestSuite();
  suite.addTest(NavigableSetTestSuiteBuilder.using(new ImmutableSortedSetCopyOfGenerator()).named(ImmutableSortedSetTest.class.getName()).withFeatures(CollectionSize.ANY,CollectionFeature.KNOWN_ORDER,CollectionFeature.SERIALIZABLE,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());
  suite.addTest(NavigableSetTestSuiteBuilder.using(new ImmutableSortedSetHeadsetGenerator()).named(ImmutableSortedSetTest.class.getName() + ", headset").withFeatures(CollectionSize.ANY,CollectionFeature.KNOWN_ORDER,CollectionFeature.SERIALIZABLE,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());
  suite.addTest(NavigableSetTestSuiteBuilder.using(new ImmutableSortedSetTailsetGenerator()).named(ImmutableSortedSetTest.class.getName() + ", tailset").withFeatures(CollectionSize.ANY,CollectionFeature.KNOWN_ORDER,CollectionFeature.SERIALIZABLE,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());
  suite.addTest(NavigableSetTestSuiteBuilder.using(new ImmutableSortedSetSubsetGenerator()).named(ImmutableSortedSetTest.class.getName() + ", subset").withFeatures(CollectionSize.ANY,CollectionFeature.KNOWN_ORDER,CollectionFeature.SERIALIZABLE,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());
  suite.addTest(NavigableSetTestSuiteBuilder.using(new ImmutableSortedSetExplicitComparator()).named(ImmutableSortedSetTest.class.getName() + ", explicit comparator, vararg").withFeatures(CollectionSize.ANY,CollectionFeature.KNOWN_ORDER,CollectionFeature.SERIALIZABLE,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());
  suite.addTest(NavigableSetTestSuiteBuilder.using(new ImmutableSortedSetExplicitSuperclassComparatorGenerator()).named(ImmutableSortedSetTest.class.getName() + ", explicit superclass comparator, iterable").withFeatures(CollectionSize.ANY,CollectionFeature.KNOWN_ORDER,CollectionFeature.SERIALIZABLE,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());
  suite.addTest(NavigableSetTestSuiteBuilder.using(new ImmutableSortedSetReversedOrderGenerator()).named(ImmutableSortedSetTest.class.getName() + ", reverseOrder, iterator").withFeatures(CollectionSize.ANY,CollectionFeature.KNOWN_ORDER,CollectionFeature.SERIALIZABLE,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());
  suite.addTest(NavigableSetTestSuiteBuilder.using(new ImmutableSortedSetUnhashableGenerator()).suppressing(SetHashCodeTester.getHashCodeMethods()).named(ImmutableSortedSetTest.class.getName() + ", unhashable").withFeatures(CollectionSize.ANY,CollectionFeature.KNOWN_ORDER,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());
  suite.addTest(NavigableSetTestSuiteBuilder.using(new ImmutableSortedSetDescendingGenerator()).named(ImmutableSortedSetTest.class.getName() + ", descending").withFeatures(CollectionSize.ANY,CollectionFeature.KNOWN_ORDER,CollectionFeature.SERIALIZABLE,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());
  suite.addTest(ListTestSuiteBuilder.using(new ImmutableSortedSetAsListGenerator()).named("ImmutableSortedSet.asList").withFeatures(CollectionSize.ANY,CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,CollectionFeature.SERIALIZABLE,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());
  suite.addTest(ListTestSuiteBuilder.using(new ImmutableSortedSetSubsetAsListGenerator()).named("ImmutableSortedSet.subSet.asList").withFeatures(CollectionSize.ANY,CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,CollectionFeature.SERIALIZABLE,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());
  suite.addTest(ListTestSuiteBuilder.using(new ImmutableSortedSetDescendingAsListGenerator()).named("ImmutableSortedSet.descendingSet.asList").withFeatures(CollectionSize.ANY,CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,CollectionFeature.SERIALIZABLE,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());
  return suite;
}
