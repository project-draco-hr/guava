{
  return new Inverse<V,K>(backward,this){
    @Override Iterator<Entry<V,K>> entrySetIterator(){
      return new TransformedIterator<Entry<K,V>,Entry<V,K>>(HashBiMap.this.delegate().entrySet().iterator()){
        @Override public Entry<V,K> transform(        final Entry<K,V> forwardEntry){
          return new AbstractMapEntry<V,K>(){
            final V value=forwardEntry.getValue();
            @Override public V getKey(){
              return value;
            }
            @Override public K getValue(){
              return delegate().get(value);
            }
            @Override public K setValue(            K newKey){
              checkState(entrySet().contains(this),"entry no longer in map");
              K oldKey=getValue();
              if (Objects.equal(newKey,oldKey)) {
                return newKey;
              }
              forcePut(value,newKey);
              return oldKey;
            }
          }
;
        }
      }
;
    }
  }
;
}
