{
  MapMakerInternalMap<Object,Object,?,?> map=makeMap(createMapMaker().concurrencyLevel(1));
  Segment<Object,Object,?,?> segment=map.segments[0];
  Object keyOne=new Object();
  Object valueOne=new Object();
  int hashOne=map.hash(keyOne);
  InternalEntry<Object,Object,?> entryOne=segment.newEntryForTesting(keyOne,hashOne,null);
  segment.setValueForTesting(entryOne,valueOne);
  Object keyTwo=new Object();
  Object valueTwo=new Object();
  int hashTwo=map.hash(keyTwo);
  InternalEntry<Object,Object,?> entryTwo=segment.newEntryForTesting(keyTwo,hashTwo,entryOne);
  segment.setValueForTesting(entryTwo,valueTwo);
  Object keyThree=new Object();
  Object valueThree=new Object();
  int hashThree=map.hash(keyThree);
  InternalEntry<Object,Object,?> entryThree=segment.newEntryForTesting(keyThree,hashThree,entryTwo);
  segment.setValueForTesting(entryThree,valueThree);
  assertNull(segment.removeFromChainForTesting(entryOne,entryOne));
  assertSame(entryOne,segment.removeFromChainForTesting(entryTwo,entryTwo));
  InternalEntry<Object,Object,?> newFirst=segment.removeFromChainForTesting(entryThree,entryTwo);
  assertSame(keyThree,newFirst.getKey());
  assertSame(valueThree,newFirst.getValue());
  assertEquals(hashThree,newFirst.getHash());
  assertSame(entryOne,newFirst.getNext());
  newFirst=segment.removeFromChainForTesting(entryThree,entryOne);
  assertSame(keyTwo,newFirst.getKey());
  assertSame(valueTwo,newFirst.getValue());
  assertEquals(hashTwo,newFirst.getHash());
  newFirst=newFirst.getNext();
  assertSame(keyThree,newFirst.getKey());
  assertSame(valueThree,newFirst.getValue());
  assertEquals(hashThree,newFirst.getHash());
  assertNull(newFirst.getNext());
}
