{
  MapMakerInternalMap<Object,Object> map=makeMap(createMapMaker().concurrencyLevel(1).initialCapacity(1).expireAfterWrite(99999,SECONDS));
  Segment<Object,Object> segment=map.segments[0];
  AtomicReferenceArray<ReferenceEntry<Object,Object>> table=segment.table;
  assertEquals(1,table.length());
  Object keyOne=new Object();
  Object valueOne=new Object();
  int hashOne=map.hash(keyOne);
  DummyEntry<Object,Object> entryOne=createDummyEntry(keyOne,hashOne,valueOne,null);
  Object keyTwo=new Object();
  Object valueTwo=new Object();
  int hashTwo=map.hash(keyTwo);
  DummyEntry<Object,Object> entryTwo=createDummyEntry(keyTwo,hashTwo,valueTwo,entryOne);
  Object keyThree=new Object();
  Object valueThree=new Object();
  int hashThree=map.hash(keyThree);
  DummyEntry<Object,Object> entryThree=createDummyEntry(keyThree,hashThree,valueThree,entryTwo);
  assertFalse(segment.reclaimKey(entryOne,hashOne));
  table.set(0,entryOne);
  assertFalse(segment.reclaimKey(entryTwo,hashTwo));
  table.set(0,entryTwo);
  assertFalse(segment.reclaimKey(entryThree,hashThree));
  table.set(0,entryOne);
  segment.count=1;
  assertTrue(segment.reclaimKey(entryOne,hashOne));
  assertFalse(segment.expirationQueue.contains(entryOne));
  assertEquals(0,segment.count);
  assertNull(table.get(0));
}
