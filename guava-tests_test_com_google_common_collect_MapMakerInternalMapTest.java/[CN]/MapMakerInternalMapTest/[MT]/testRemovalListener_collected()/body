{
  QueuingRemovalListener<Object,Object> listener=new QueuingRemovalListener<Object,Object>();
  MapMakerInternalMap<Object,Object> map=makeMap(createMapMaker().concurrencyLevel(1).softValues().removalListener(listener));
  Segment<Object,Object> segment=map.segments[0];
  assertTrue(listener.isEmpty());
  Object one=new Object();
  Object two=new Object();
  Object three=new Object();
  map.put(one,two);
  map.put(two,three);
  assertTrue(listener.isEmpty());
  int hash=map.hash(one);
  ReferenceEntry<Object,Object> entry=segment.getEntry(one,hash);
  map.reclaimValue(entry.getValueReference());
  assertNotified(listener,one,two,RemovalCause.COLLECTED);
  assertTrue(listener.isEmpty());
}
