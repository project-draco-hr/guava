{
  final int numHashes=10000;
  final int numBuckets=30;
  double sumWeights=0.0;
  double[] w=new double[numBuckets];
  for (int i=0; i < numBuckets; i++) {
    double weight=numBuckets / 5 + i;
    w[i]=weight;
    sumWeights+=weight;
  }
  int[] count=new int[numBuckets];
  Random valueGenerator=new Random(RANDOM_SEED);
  for (int i=0; i < numHashes; i++) {
    int bucket=Hashing.weightedConsistentHash(valueGenerator.nextInt(),w);
    assertGreaterThan(-1,bucket);
    assertLessThan(numBuckets,bucket);
    count[bucket]++;
  }
  for (int i=0; i < numBuckets; i++) {
    double observedPercent=100.0 * count[i] / numHashes;
    double expectedPercent=100.0 * w[i] / sumWeights;
    String message=new StringBuilder().append("bucket: ").append(i).append(", ").append("count: ").append(count[i]).append(", ").append("weight: ").append(w[i]).toString();
    assertGreaterThan(message,expectedPercent - MAX_PERCENT_SPREAD,observedPercent);
    assertLessThan(message,expectedPercent + MAX_PERCENT_SPREAD,observedPercent);
  }
}
