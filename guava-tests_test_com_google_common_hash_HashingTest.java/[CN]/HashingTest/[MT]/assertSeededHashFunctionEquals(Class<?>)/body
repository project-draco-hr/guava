{
  Random random=new Random(RANDOM_SEED);
  for (  Method method : clazz.getDeclaredMethods()) {
    if (method.getReturnType().equals(HashFunction.class) && Modifier.isPublic(method.getModifiers()) && method.getParameterTypes().length != 0 && !method.getName().equals("concatenating") && !method.getName().equals("goodFastHash")) {
      Object[] params1=new Object[method.getParameterTypes().length];
      Object[] params2=new Object[method.getParameterTypes().length];
      for (int i=0; i < params1.length; i++) {
        if (method.getParameterTypes()[i] == int.class) {
          params1[i]=random.nextInt();
          params2[i]=random.nextInt();
        }
 else         if (method.getParameterTypes()[i] == long.class) {
          params1[i]=random.nextLong();
          params2[i]=random.nextLong();
        }
 else {
          fail("Unable to create a random parameter for " + method.getParameterTypes()[i]);
        }
      }
      HashFunction hashFunction1a=(HashFunction)method.invoke(clazz,params1);
      HashFunction hashFunction1b=(HashFunction)method.invoke(clazz,params1);
      HashFunction hashFunction2=(HashFunction)method.invoke(clazz,params2);
      new EqualsTester().addEqualityGroup(hashFunction1a,hashFunction1b).addEqualityGroup(hashFunction2).testEquals();
      assertEquals(hashFunction1a.toString(),hashFunction1b.toString());
    }
  }
}
