{
  return new UnmodifiableIterator<List<B>>(){
    int index;
    public boolean hasNext(){
      return index < size;
    }
    public List<B> next(){
      if (!hasNext()) {
        throw new NoSuchElementException();
      }
      Object[] tuple=new Object[axes.size()];
      for (int i=0; i < tuple.length; i++) {
        tuple[i]=axes.get(i).getForIndex(index);
      }
      index++;
      @SuppressWarnings("unchecked") List<B> result=(ImmutableList<B>)ImmutableList.copyOf(tuple);
      return result;
    }
  }
;
}
