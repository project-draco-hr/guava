{
  final int[] stats=new int[4];
  RemovalListener<Integer,Integer> countingListener=new RemovalListener<Integer,Integer>(){
    @Override public void onRemoval(    RemovalNotification<Integer,Integer> notification){
switch (notification.getCause()) {
case EXPIRED:
        stats[0]++;
      break;
case EXPLICIT:
    stats[1]++;
  break;
case REPLACED:
stats[2]++;
break;
case SIZE:
stats[3]++;
break;
default :
throw new IllegalStateException("No collected exceptions in GWT CacheBuilder.");
}
}
}
;
Cache<Integer,Integer> cache=CacheBuilder.newBuilder().expireAfterWrite(1000,TimeUnit.MILLISECONDS).removalListener(countingListener).ticker(fakeTicker).maximumSize(2).build();
cache.put(3,20);
cache.put(6,2);
cache.put(98,45);
cache.put(56,76);
cache.put(23,84);
cache.put(23,20);
cache.put(56,49);
cache.put(23,2);
cache.put(56,4);
fakeTicker.advance(1001,TimeUnit.MILLISECONDS);
cache.getIfPresent(23);
cache.getIfPresent(56);
cache.put(1,4);
cache.put(2,8);
cache.invalidateAll();
assertEquals(2,stats[0]);
assertEquals(2,stats[1]);
assertEquals(4,stats[2]);
assertEquals(3,stats[3]);
}
