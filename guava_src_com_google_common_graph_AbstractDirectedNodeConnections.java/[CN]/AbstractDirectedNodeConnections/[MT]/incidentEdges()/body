{
  return new AbstractSet<E>(){
    @Override public Iterator<E> iterator(){
      return selfLoopCount == 0 ? Iterables.concat(inEdges(),outEdges()).iterator() : Sets.union(inEdges(),outEdges()).iterator();
    }
    @Override public int size(){
      return IntMath.saturatedAdd(inEdgeMap.size() - selfLoopCount,outEdgeMap.size());
    }
    @Override public boolean contains(    Object obj){
      return inEdgeMap.containsKey(obj) || outEdgeMap.containsKey(obj);
    }
  }
;
}
