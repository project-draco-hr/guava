{
class MapViewOfValuesAsSingletonSets extends ImmutableMap<K,ImmutableSet<V>> {
    @Override public int size(){
      return ImmutableMap.this.size();
    }
    @Override public boolean containsKey(    @Nullable Object key){
      return ImmutableMap.this.containsKey(key);
    }
    @Override public ImmutableSet<V> get(    @Nullable Object key){
      V outerValue=ImmutableMap.this.get(key);
      return (outerValue == null) ? null : ImmutableSet.of(outerValue);
    }
    @Override boolean isPartialView(){
      return false;
    }
    @Override ImmutableSet<Entry<K,ImmutableSet<V>>> createEntrySet(){
      return new ImmutableMapEntrySet<K,ImmutableSet<V>>(){
        @Override ImmutableMap<K,ImmutableSet<V>> map(){
          return MapViewOfValuesAsSingletonSets.this;
        }
        @Override public UnmodifiableIterator<Entry<K,ImmutableSet<V>>> iterator(){
          final Iterator<Entry<K,V>> backingIterator=ImmutableMap.this.entrySet().iterator();
          return new UnmodifiableIterator<Entry<K,ImmutableSet<V>>>(){
            @Override public boolean hasNext(){
              return backingIterator.hasNext();
            }
            @Override public Entry<K,ImmutableSet<V>> next(){
              final Entry<K,V> backingEntry=backingIterator.next();
              return new AbstractMapEntry<K,ImmutableSet<V>>(){
                @Override public K getKey(){
                  return backingEntry.getKey();
                }
                @Override public ImmutableSet<V> getValue(){
                  return ImmutableSet.of(backingEntry.getValue());
                }
              }
;
            }
          }
;
        }
      }
;
    }
  }
  return new MapViewOfValuesAsSingletonSets();
}
