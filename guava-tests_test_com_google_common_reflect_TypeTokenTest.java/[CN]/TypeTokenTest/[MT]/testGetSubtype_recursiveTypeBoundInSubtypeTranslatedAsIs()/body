{
class BaseWithTypeVar<T> {
  }
class Outer<O> {
class Sub<X> extends BaseWithTypeVar<List<X>> {
    }
class Sub2<Y extends Sub2<Y>> extends BaseWithTypeVar<List<Y>> {
    }
  }
  ParameterizedType subtype=(ParameterizedType)new TypeToken<BaseWithTypeVar<List<?>>>(){
  }
.getSubtype(Outer.Sub.class).getType();
  assertEquals(Outer.Sub.class,subtype.getRawType());
  assertThat(subtype.getActualTypeArguments()[0]).isInstanceOf(WildcardType.class);
  ParameterizedType owner=(ParameterizedType)subtype.getOwnerType();
  assertEquals(Outer.class,owner.getRawType());
  TypeToken<?> unused=new TypeToken<BaseWithTypeVar<List<?>>>(){
  }
.getSubtype(Outer.Sub2.class);
}
