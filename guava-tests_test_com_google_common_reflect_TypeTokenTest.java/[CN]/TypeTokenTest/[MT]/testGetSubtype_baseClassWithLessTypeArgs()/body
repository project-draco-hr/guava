{
class SingleGenericExtendsBase<T> extends Base {
  }
class DoubleGenericExtendsSingleGeneric<T1,TUnused> extends SingleGenericExtendsBase<T1> {
  }
  TypeToken<SingleGenericExtendsBase<?>> superType=new TypeToken<SingleGenericExtendsBase<?>>(){
  }
;
  TypeToken<DoubleGenericExtendsSingleGeneric<String,Integer>> subType=new TypeToken<DoubleGenericExtendsSingleGeneric<String,Integer>>(){
  }
;
  assertTrue(subType.isSubtypeOf(superType));
  ParameterizedType actualSubType=(ParameterizedType)superType.getSubtype(subType.getRawType()).getType();
  assertEquals(DoubleGenericExtendsSingleGeneric.class,actualSubType.getRawType());
  assertThat(actualSubType.getActualTypeArguments()[0]).isInstanceOf(WildcardType.class);
}
