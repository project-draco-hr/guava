{
class SingleGenericExtendsBase<T> extends Base {
  }
class DoubleGenericExtendsSingleGeneric<T1,TUnused> extends SingleGenericExtendsBase<T1> {
  }
  TypeToken<SingleGenericExtendsBase<?>> supertype=new TypeToken<SingleGenericExtendsBase<?>>(){
  }
;
  TypeToken<DoubleGenericExtendsSingleGeneric<String,Integer>> subtype=new TypeToken<DoubleGenericExtendsSingleGeneric<String,Integer>>(){
  }
;
  assertTrue(subtype.isSubtypeOf(supertype));
  ParameterizedType actualSubtype=(ParameterizedType)supertype.getSubtype(subtype.getRawType()).getType();
  assertEquals(DoubleGenericExtendsSingleGeneric.class,actualSubtype.getRawType());
  assertThat(actualSubtype.getActualTypeArguments()[0]).isInstanceOf(WildcardType.class);
}
