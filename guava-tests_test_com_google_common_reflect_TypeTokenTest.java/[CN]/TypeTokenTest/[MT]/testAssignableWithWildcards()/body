{
  TypeToken<?> unboundedToken=new TypeToken<List<?>>(){
  }
;
  TypeToken<?> upperBoundToken=new TypeToken<List<? extends Number>>(){
  }
;
  TypeToken<?> lowerBoundToken=new TypeToken<List<? super Number>>(){
  }
;
  TypeToken<?> concreteToken=new TypeToken<List<Number>>(){
  }
;
  TypeToken<?> subtypeToken=new TypeToken<List<Integer>>(){
  }
;
  TypeToken<?> supertypeToken=new TypeToken<List<Serializable>>(){
  }
;
  List<TypeToken<?>> allTokens=ImmutableList.of(unboundedToken,upperBoundToken,lowerBoundToken,concreteToken,subtypeToken,supertypeToken);
  for (  TypeToken<?> typeToken : allTokens) {
    assertTrue(typeToken.toString(),unboundedToken.isSupertypeOf(typeToken));
  }
  assertFalse(upperBoundToken.isSupertypeOf(unboundedToken));
  assertTrue(upperBoundToken.isSupertypeOf(upperBoundToken));
  assertFalse(upperBoundToken.isSupertypeOf(lowerBoundToken));
  assertTrue(upperBoundToken.isSupertypeOf(concreteToken));
  assertTrue(upperBoundToken.isSupertypeOf(subtypeToken));
  assertFalse(upperBoundToken.isSupertypeOf(supertypeToken));
  assertFalse(lowerBoundToken.isSupertypeOf(unboundedToken));
  assertFalse(lowerBoundToken.isSupertypeOf(upperBoundToken));
  assertTrue(lowerBoundToken.isSupertypeOf(lowerBoundToken));
  assertTrue(lowerBoundToken.isSupertypeOf(concreteToken));
  assertFalse(lowerBoundToken.isSupertypeOf(subtypeToken));
  assertTrue(lowerBoundToken.isSupertypeOf(supertypeToken));
  for (  TypeToken<?> typeToken : allTokens) {
    assertEquals(typeToken.toString(),typeToken == concreteToken,concreteToken.isSupertypeOf(typeToken));
  }
  for (  TypeToken<?> typeToken : allTokens) {
    assertEquals(typeToken.toString(),typeToken == subtypeToken,subtypeToken.isSupertypeOf(typeToken));
  }
  for (  TypeToken<?> typeToken : allTokens) {
    assertEquals(typeToken.toString(),typeToken == supertypeToken,supertypeToken.isSupertypeOf(typeToken));
  }
}
