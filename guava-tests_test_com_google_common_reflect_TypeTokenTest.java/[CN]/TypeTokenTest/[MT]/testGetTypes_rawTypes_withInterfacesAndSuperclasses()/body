{
abstract class Class2 extends Class1 implements Interface12 {
  }
abstract class Class3<T> extends Class2 implements Interface3<T> {
  }
  TypeToken<Class3<String>>.TypeSet types=new TypeToken<Class3<String>>(){
  }
.getTypes();
  assertThat(types.rawTypes()).has().allOf(Class3.class,Interface3.class,Iterable.class,Class2.class,Interface12.class,Interface1.class,Interface2.class,Class1.class,Object.class);
  assertThat(types.interfaces().rawTypes()).has().allOf(Interface3.class,Interface12.class,Interface1.class,Interface2.class,Iterable.class);
  assertThat(types.classes().rawTypes()).has().allOf(Class3.class,Class2.class,Class1.class,Object.class);
  assertSubtypeFirst(types);
}
