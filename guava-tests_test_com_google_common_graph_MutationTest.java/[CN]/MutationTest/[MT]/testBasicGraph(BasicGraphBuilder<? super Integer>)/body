{
  Random gen=new Random(42);
  for (int trial=0; trial < NUM_TRIALS; ++trial) {
    MutableBasicGraph<Integer> graph=graphBuilder.allowsSelfLoops(true).build();
    while (graph.nodes().size() < NUM_NODES) {
      graph.addNode(gen.nextInt());
    }
    ArrayList<Integer> nodeList=new ArrayList<Integer>(graph.nodes());
    while (graph.edges().size() < NUM_EDGES) {
      graph.putEdge(getRandomElement(nodeList,gen),getRandomElement(nodeList,gen));
    }
    ArrayList<Endpoints<Integer>> edgeList=new ArrayList<Endpoints<Integer>>(graph.edges());
    AbstractGraphTest.validateGraph(graph);
    Collections.shuffle(edgeList,gen);
    int numEdgesToRemove=gen.nextInt(NUM_EDGES);
    for (int i=0; i < numEdgesToRemove; ++i) {
      Endpoints<Integer> edge=edgeList.get(i);
      assertThat(graph.removeEdge(edge.nodeA(),edge.nodeB())).isTrue();
    }
    assertThat(graph.nodes()).hasSize(NUM_NODES);
    assertThat(graph.edges()).hasSize(NUM_EDGES - numEdgesToRemove);
    AbstractGraphTest.validateGraph(graph);
    Collections.shuffle(nodeList,gen);
    int numNodesToRemove=gen.nextInt(NUM_NODES);
    for (int i=0; i < numNodesToRemove; ++i) {
      assertThat(graph.removeNode(nodeList.get(i))).isTrue();
    }
    assertThat(graph.nodes()).hasSize(NUM_NODES - numNodesToRemove);
    AbstractGraphTest.validateGraph(graph);
    for (int i=numNodesToRemove; i < NUM_NODES; ++i) {
      assertThat(graph.removeNode(nodeList.get(i))).isTrue();
    }
    assertThat(graph.nodes()).isEmpty();
    assertThat(graph.edges()).isEmpty();
    AbstractGraphTest.validateGraph(graph);
    for (    Integer node : nodeList) {
      assertThat(graph.addNode(node)).isTrue();
    }
    for (    Endpoints<Integer> edge : edgeList) {
      assertThat(graph.putEdge(edge.nodeA(),edge.nodeB())).isTrue();
    }
    assertThat(graph.nodes()).hasSize(NUM_NODES);
    assertThat(graph.edges()).hasSize(NUM_EDGES);
    AbstractGraphTest.validateGraph(graph);
  }
}
