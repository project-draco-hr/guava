{
  final int hashCode=sample.hashCode();
  Object fakeReference=new Object(){
    @Override public int hashCode(){
      return hashCode;
    }
    @Override public boolean equals(    Object object){
      if (object.hashCode() != hashCode) {
        return false;
      }
      @SuppressWarnings("unchecked") InternReference that=(InternReference)object;
      return sample.equals(that.get());
    }
  }
;
  InternReference existingRef=map.get(fakeReference);
  if (existingRef != null) {
    E canonical=existingRef.get();
    if (canonical != null) {
      return canonical;
    }
  }
  InternReference newRef=new InternReference(sample,hashCode);
  while (true) {
    InternReference sneakyRef=map.putIfAbsent(newRef,newRef);
    if (sneakyRef == null) {
      return sample;
    }
 else {
      E canonical=sneakyRef.get();
      if (canonical != null) {
        return canonical;
      }
    }
  }
}
