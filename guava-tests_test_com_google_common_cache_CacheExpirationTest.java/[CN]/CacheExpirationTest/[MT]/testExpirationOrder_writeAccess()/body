{
  FakeTicker ticker=new FakeTicker();
  IdentityLoader<Integer> loader=identityLoader();
  LoadingCache<Integer,Integer> cache=CacheBuilder.newBuilder().concurrencyLevel(1).expireAfterWrite(5,MILLISECONDS).expireAfterAccess(3,MILLISECONDS).ticker(ticker).build(loader);
  for (int i=0; i < 5; i++) {
    cache.getUnchecked(i);
  }
  ticker.advance(1,MILLISECONDS);
  for (int i=5; i < 10; i++) {
    cache.getUnchecked(i);
  }
  ticker.advance(1,MILLISECONDS);
  Set<Integer> keySet=cache.asMap().keySet();
  assertThat(keySet).has().exactly(0,1,2,3,4,5,6,7,8,9);
  getAll(cache,asList(1,3));
  CacheTesting.drainRecencyQueues(cache);
  ticker.advance(1,MILLISECONDS);
  assertThat(keySet).has().exactly(5,6,7,8,9,1,3);
  getAll(cache,asList(6,8));
  CacheTesting.drainRecencyQueues(cache);
  ticker.advance(1,MILLISECONDS);
  assertThat(keySet).has().exactly(1,3,6,8);
  cache.asMap().put(3,-3);
  getAll(cache,asList(1));
  CacheTesting.drainRecencyQueues(cache);
  ticker.advance(1,MILLISECONDS);
  assertThat(keySet).has().exactly(6,8,3);
  cache.asMap().replace(6,-6);
  cache.get(8,Callables.returning(-8));
  CacheTesting.drainRecencyQueues(cache);
  ticker.advance(1,MILLISECONDS);
  assertThat(keySet).has().exactly(3,6);
}
