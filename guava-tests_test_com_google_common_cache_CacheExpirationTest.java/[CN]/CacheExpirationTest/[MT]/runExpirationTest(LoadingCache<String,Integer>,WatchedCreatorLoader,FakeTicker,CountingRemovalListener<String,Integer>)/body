{
  for (int i=0; i < 10; i++) {
    assertEquals(Integer.valueOf(VALUE_PREFIX + i),cache.getUnchecked(KEY_PREFIX + i));
  }
  for (int i=0; i < 10; i++) {
    loader.reset();
    assertEquals(Integer.valueOf(VALUE_PREFIX + i),cache.getUnchecked(KEY_PREFIX + i));
    assertFalse("Loader should NOT have been called @#" + i,loader.wasCalled());
  }
  ticker.advance(EXPIRING_TIME * 10,MILLISECONDS);
  cache.getUnchecked(KEY_PREFIX + 11);
  assertEquals(1,Iterators.size(cache.asMap().entrySet().iterator()));
  assertEquals(1,Iterators.size(cache.asMap().keySet().iterator()));
  assertEquals(1,Iterators.size(cache.asMap().values().iterator()));
  CacheTesting.expireEntries((LoadingCache<?,?>)cache,EXPIRING_TIME,ticker);
  for (int i=0; i < 11; i++) {
    assertFalse(cache.asMap().containsKey(KEY_PREFIX + i));
  }
  assertEquals(11,removalListener.getCount());
  for (int i=0; i < 10; i++) {
    assertFalse(cache.asMap().containsKey(KEY_PREFIX + i));
    loader.reset();
    assertEquals(Integer.valueOf(VALUE_PREFIX + i),cache.getUnchecked(KEY_PREFIX + i));
    assertTrue("Creator should have been called @#" + i,loader.wasCalled());
  }
  CacheTesting.expireEntries((LoadingCache<?,?>)cache,EXPIRING_TIME,ticker);
  assertEquals("Eviction notifications must be received",21,removalListener.getCount());
  CacheTesting.expireEntries((LoadingCache<?,?>)cache,EXPIRING_TIME,ticker);
  assertEquals("Eviction notifications must be received",21,removalListener.getCount());
}
