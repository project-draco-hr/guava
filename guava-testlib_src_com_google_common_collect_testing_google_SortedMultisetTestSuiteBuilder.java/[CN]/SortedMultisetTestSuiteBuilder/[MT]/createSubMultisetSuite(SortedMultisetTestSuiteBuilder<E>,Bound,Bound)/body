{
  final TestMultisetGenerator<E> delegate=(TestMultisetGenerator<E>)parentBuilder.getSubjectGenerator();
  Set<Feature<?>> features=new HashSet<Feature<?>>();
  features.add(NoRecurse.SUBMULTISET);
  features.add(CollectionFeature.RESTRICTS_ELEMENTS);
  features.addAll(parentBuilder.getFeatures());
  if (!features.remove(CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS)) {
    features.remove(CollectionFeature.SERIALIZABLE);
  }
  SortedMultiset<E> emptyMultiset=(SortedMultiset<E>)delegate.create();
  final Comparator<? super E> comparator=emptyMultiset.comparator();
  SampleElements<E> samples=delegate.samples();
  @SuppressWarnings("unchecked") List<E> samplesList=Arrays.asList(samples.e0,samples.e1,samples.e2,samples.e3,samples.e4);
  Collections.sort(samplesList,comparator);
  final E firstInclusive=samplesList.get(0);
  final E lastInclusive=samplesList.get(samplesList.size() - 1);
  return SortedMultisetTestSuiteBuilder.using(new ForwardingTestMultisetGenerator<E>(delegate){
    @Override public SortedMultiset<E> create(    Object... entries){
      @SuppressWarnings("unchecked") List<E> extremeValues=(List)getExtremeValues();
      @SuppressWarnings("unchecked") List<E> normalValues=(List)Arrays.asList(entries);
      Collections.sort(extremeValues,comparator);
      E firstExclusive=extremeValues.get(1);
      E lastExclusive=extremeValues.get(2);
      if (from == Bound.NO_BOUND) {
        extremeValues.remove(0);
        extremeValues.remove(0);
      }
      if (to == Bound.NO_BOUND) {
        extremeValues.remove(extremeValues.size() - 1);
        extremeValues.remove(extremeValues.size() - 1);
      }
      List<E> allEntries=new ArrayList<E>();
      allEntries.addAll(extremeValues);
      allEntries.addAll(normalValues);
      SortedMultiset<E> multiset=(SortedMultiset<E>)delegate.create(allEntries.toArray());
      if (from == Bound.INCLUSIVE) {
        multiset=multiset.tailMultiset(firstInclusive,BoundType.CLOSED);
      }
 else       if (from == Bound.EXCLUSIVE) {
        multiset=multiset.tailMultiset(firstExclusive,BoundType.OPEN);
      }
      if (to == Bound.INCLUSIVE) {
        multiset=multiset.headMultiset(lastInclusive,BoundType.CLOSED);
      }
 else       if (to == Bound.EXCLUSIVE) {
        multiset=multiset.headMultiset(lastExclusive,BoundType.OPEN);
      }
      return multiset;
    }
  }
).named(parentBuilder.getName() + " subMultiset " + from+ "-"+ to).withFeatures(features).suppressing(parentBuilder.getSuppressedTests()).createTestSuite();
}
